
czysty projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034c4  08009a50  08009a50  00019a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf14  0800cf14  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf14  0800cf14  0001cf14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf1c  0800cf1c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf1c  0800cf1c  0001cf1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf20  0800cf20  0001cf20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cf24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a1b8  200001e4  0800d108  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a39c  0800d108  0002a39c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fc0  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003629  00000000  00000000  000371d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  0003a800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  0003ba18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029252  00000000  00000000  0003ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018648  00000000  00000000  00065cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0750  00000000  00000000  0007e332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ea82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd4  00000000  00000000  0016ead4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a38 	.word	0x08009a38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009a38 	.word	0x08009a38

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_DMA_Init+0x38>)
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <MX_DMA_Init+0x38>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6493      	str	r3, [r2, #72]	; 0x48
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_DMA_Init+0x38>)
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f000 ffef 	bl	8001ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ef4:	200f      	movs	r0, #15
 8000ef6:	f001 f808 	bl	8001f0a <HAL_NVIC_EnableIRQ>

}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a38      	ldr	r2, [pc, #224]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b36      	ldr	r3, [pc, #216]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	4b33      	ldr	r3, [pc, #204]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a32      	ldr	r2, [pc, #200]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a2c      	ldr	r2, [pc, #176]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a26      	ldr	r2, [pc, #152]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2120      	movs	r1, #32
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f001 fbfb 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f640 0104 	movw	r1, #2052	; 0x804
 8000f90:	481d      	ldr	r0, [pc, #116]	; (8001008 <MX_GPIO_Init+0x100>)
 8000f92:	f001 fbf5 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9c:	481a      	ldr	r0, [pc, #104]	; (8001008 <MX_GPIO_Init+0x100>)
 8000f9e:	f001 fbef 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fa8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4814      	ldr	r0, [pc, #80]	; (800100c <MX_GPIO_Init+0x104>)
 8000fba:	f001 fa37 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fbe:	2320      	movs	r3, #32
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd8:	f001 fa28 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000fdc:	f641 0304 	movw	r3, #6148	; 0x1804
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_GPIO_Init+0x100>)
 8000ff6:	f001 fa19 	bl	800242c <HAL_GPIO_Init>

}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	; 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
 8001008:	48000400 	.word	0x48000400
 800100c:	48000800 	.word	0x48000800

08001010 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_I2C1_Init+0x74>)
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <MX_I2C1_Init+0x78>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_I2C1_Init+0x74>)
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <MX_I2C1_Init+0x7c>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_I2C1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_I2C1_Init+0x74>)
 8001028:	2201      	movs	r2, #1
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_I2C1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_I2C1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_I2C1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_I2C1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <MX_I2C1_Init+0x74>)
 800104c:	f001 fbb0 	bl	80027b0 <HAL_I2C_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001056:	f000 faf6 	bl	8001646 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <MX_I2C1_Init+0x74>)
 800105e:	f002 f90b 	bl	8003278 <HAL_I2CEx_ConfigAnalogFilter>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001068:	f000 faed 	bl	8001646 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800106c:	2100      	movs	r1, #0
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_I2C1_Init+0x74>)
 8001070:	f002 f94d 	bl	800330e <HAL_I2CEx_ConfigDigitalFilter>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107a:	f000 fae4 	bl	8001646 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000200 	.word	0x20000200
 8001088:	40005400 	.word	0x40005400
 800108c:	10909cec 	.word	0x10909cec

08001090 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0ac      	sub	sp, #176	; 0xb0
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2288      	movs	r2, #136	; 0x88
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f005 fff5 	bl	80070a0 <memset>
  if(i2cHandle->Instance==I2C1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a21      	ldr	r2, [pc, #132]	; (8001140 <HAL_I2C_MspInit+0xb0>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d13a      	bne.n	8001136 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010c0:	2340      	movs	r3, #64	; 0x40
 80010c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 ffcf 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010d8:	f000 fab5 	bl	8001646 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_I2C_MspInit+0xb4>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e0:	4a18      	ldr	r2, [pc, #96]	; (8001144 <HAL_I2C_MspInit+0xb4>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_I2C_MspInit+0xb4>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fa:	2312      	movs	r3, #18
 80010fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110c:	2304      	movs	r3, #4
 800110e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001116:	4619      	mov	r1, r3
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <HAL_I2C_MspInit+0xb8>)
 800111a:	f001 f987 	bl	800242c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_I2C_MspInit+0xb4>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_I2C_MspInit+0xb4>)
 8001124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001128:	6593      	str	r3, [r2, #88]	; 0x58
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_I2C_MspInit+0xb4>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	37b0      	adds	r7, #176	; 0xb0
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40005400 	.word	0x40005400
 8001144:	40021000 	.word	0x40021000
 8001148:	48000400 	.word	0x48000400

0800114c <lcd_cmd>:
#define LCD_OFFSET_Y  2

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

static void lcd_cmd(uint8_t cmd)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <lcd_cmd+0x44>)
 800115e:	f001 fb0f 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <lcd_cmd+0x44>)
 800116a:	f001 fb09 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800116e:	1df9      	adds	r1, r7, #7
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	2201      	movs	r2, #1
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <lcd_cmd+0x48>)
 8001178:	f003 fcd9 	bl	8004b2e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <lcd_cmd+0x44>)
 8001184:	f001 fafc 	bl	8002780 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	48000400 	.word	0x48000400
 8001194:	2000a254 	.word	0x2000a254

08001198 <lcd_data>:
static void lcd_data(uint8_t data)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <lcd_data+0x44>)
 80011aa:	f001 fae9 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b4:	4809      	ldr	r0, [pc, #36]	; (80011dc <lcd_data+0x44>)
 80011b6:	f001 fae3 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80011ba:	1df9      	adds	r1, r7, #7
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	2201      	movs	r2, #1
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <lcd_data+0x48>)
 80011c4:	f003 fcb3 	bl	8004b2e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <lcd_data+0x44>)
 80011d0:	f001 fad6 	bl	8002780 <HAL_GPIO_WritePin>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	48000400 	.word	0x48000400
 80011e0:	2000a254 	.word	0x2000a254

080011e4 <lcd_send>:

#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <lcd_send+0x20>
		lcd_cmd(value);
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ffa5 	bl	800114c <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8001202:	e004      	b.n	800120e <lcd_send+0x2a>
		lcd_data(value);
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ffc5 	bl	8001198 <lcd_data>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2104      	movs	r1, #4
 8001222:	4817      	ldr	r0, [pc, #92]	; (8001280 <lcd_init+0x68>)
 8001224:	f001 faac 	bl	8002780 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001228:	2064      	movs	r0, #100	; 0x64
 800122a:	f000 fd53 	bl	8001cd4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800122e:	2201      	movs	r2, #1
 8001230:	2104      	movs	r1, #4
 8001232:	4813      	ldr	r0, [pc, #76]	; (8001280 <lcd_init+0x68>)
 8001234:	f001 faa4 	bl	8002780 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001238:	2064      	movs	r0, #100	; 0x64
 800123a:	f000 fd4b 	bl	8001cd4 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	e009      	b.n	8001258 <lcd_init+0x40>
    lcd_send(init_table[i]);
 8001244:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <lcd_init+0x6c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ffc9 	bl	80011e4 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3301      	adds	r3, #1
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b4b      	cmp	r3, #75	; 0x4b
 800125c:	d9f2      	bls.n	8001244 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 800125e:	20c8      	movs	r0, #200	; 0xc8
 8001260:	f000 fd38 	bl	8001cd4 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 8001264:	2011      	movs	r0, #17
 8001266:	f7ff ff71 	bl	800114c <lcd_cmd>
  HAL_Delay(120);
 800126a:	2078      	movs	r0, #120	; 0x78
 800126c:	f000 fd32 	bl	8001cd4 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8001270:	2029      	movs	r0, #41	; 0x29
 8001272:	f7ff ff6b 	bl	800114c <lcd_cmd>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	48000400 	.word	0x48000400
 8001284:	08009a9c 	.word	0x08009a9c

08001288 <lcd_data16>:
static void lcd_data16(uint16_t value)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	b29b      	uxth	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff7c 	bl	8001198 <lcd_data>
	lcd_data(value);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff77 	bl	8001198 <lcd_data>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <lcd_set_window>:
static void lcd_set_window(int x, int y, int width, int height)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80012c0:	202a      	movs	r0, #42	; 0x2a
 80012c2:	f7ff ff43 	bl	800114c <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ffda 	bl	8001288 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4413      	add	r3, r2
 80012de:	b29b      	uxth	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ffd1 	bl	8001288 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 80012e6:	202b      	movs	r0, #43	; 0x2b
 80012e8:	f7ff ff30 	bl	800114c <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	3302      	adds	r3, #2
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ffc7 	bl	8001288 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b29b      	uxth	r3, r3
 8001306:	3301      	adds	r3, #1
 8001308:	b29b      	uxth	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ffbc 	bl	8001288 <lcd_data16>
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <lcd_put_pixel>:
void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	4613      	mov	r3, r2
 8001324:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	015b      	lsls	r3, r3, #5
 8001330:	461a      	mov	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	4905      	ldr	r1, [pc, #20]	; (800134c <lcd_put_pixel+0x34>)
 8001338:	88fa      	ldrh	r2, [r7, #6]
 800133a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000254 	.word	0x20000254

08001350 <lcd_copy>:
void lcd_copy(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	22a0      	movs	r2, #160	; 0xa0
 8001358:	2100      	movs	r1, #0
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff ffa9 	bl	80012b2 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001360:	202c      	movs	r0, #44	; 0x2c
 8001362:	f7ff fef3 	bl	800114c <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <lcd_copy+0x40>)
 800136e:	f001 fa07 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <lcd_copy+0x40>)
 800137a:	f001 fa01 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 800137e:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001382:	4904      	ldr	r1, [pc, #16]	; (8001394 <lcd_copy+0x44>)
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <lcd_copy+0x48>)
 8001386:	f003 fd41 	bl	8004e0c <HAL_SPI_Transmit_DMA>
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	48000400 	.word	0x48000400
 8001394:	20000254 	.word	0x20000254
 8001398:	2000a254 	.word	0x2000a254

0800139c <lps_read_reg>:
#define LPS25HB_TEMP_OUT_H 		0x2C

#define TIMEOUT                 100

static uint8_t lps_read_reg(uint8_t reg)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af04      	add	r7, sp, #16
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	2364      	movs	r3, #100	; 0x64
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	2301      	movs	r3, #1
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	f107 030f 	add.w	r3, r7, #15
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	21ba      	movs	r1, #186	; 0xba
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <lps_read_reg+0x34>)
 80013c2:	f001 fb99 	bl	8002af8 <HAL_I2C_Mem_Read>

    return value;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000200 	.word	0x20000200

080013d4 <lps_write_reg>:

static void lps_write_reg(uint8_t reg, uint8_t value)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af04      	add	r7, sp, #16
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	4613      	mov	r3, r2
 80013e2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	2301      	movs	r3, #1
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	1dbb      	adds	r3, r7, #6
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2301      	movs	r3, #1
 80013f6:	21ba      	movs	r1, #186	; 0xba
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <lps_write_reg+0x34>)
 80013fa:	f001 fa69 	bl	80028d0 <HAL_I2C_Mem_Write>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000200 	.word	0x20000200

0800140c <lps25hb_init>:

HAL_StatusTypeDef lps25hb_init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
    if (lps_read_reg(LPS25HB_WHO_AM_I) != 0xBD)
 8001410:	200f      	movs	r0, #15
 8001412:	f7ff ffc3 	bl	800139c <lps_read_reg>
 8001416:	4603      	mov	r3, r0
 8001418:	2bbd      	cmp	r3, #189	; 0xbd
 800141a:	d001      	beq.n	8001420 <lps25hb_init+0x14>
         return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e004      	b.n	800142a <lps25hb_init+0x1e>

    lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
 8001420:	21c0      	movs	r1, #192	; 0xc0
 8001422:	2020      	movs	r0, #32
 8001424:	f7ff ffd6 	bl	80013d4 <lps_write_reg>
    return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <lps25hb_read_temp>:

float lps25hb_read_temp(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af04      	add	r7, sp, #16
     int16_t temp;

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 8001436:	2364      	movs	r3, #100	; 0x64
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	2302      	movs	r3, #2
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	1dbb      	adds	r3, r7, #6
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2301      	movs	r3, #1
 8001444:	22ab      	movs	r2, #171	; 0xab
 8001446:	21ba      	movs	r1, #186	; 0xba
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <lps25hb_read_temp+0x50>)
 800144a:	f001 fb55 	bl	8002af8 <HAL_I2C_Mem_Read>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <lps25hb_read_temp+0x28>
         Error_Handler();
 8001454:	f000 f8f7 	bl	8001646 <Error_Handler>

     return 42.5f + temp / 480.0f;
 8001458:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001464:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001484 <lps25hb_read_temp+0x54>
 8001468:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001488 <lps25hb_read_temp+0x58>
 8001470:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001474:	eeb0 0a67 	vmov.f32	s0, s15
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000200 	.word	0x20000200
 8001484:	43f00000 	.word	0x43f00000
 8001488:	422a0000 	.word	0x422a0000

0800148c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t test_image[64*64];
int __io_putchar(int ch)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b0a      	cmp	r3, #10
 8001498:	d102      	bne.n	80014a0 <__io_putchar+0x14>
    __io_putchar('\r');
 800149a:	200d      	movs	r0, #13
 800149c:	f7ff fff6 	bl	800148c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80014a0:	1d39      	adds	r1, r7, #4
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	2201      	movs	r2, #1
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <__io_putchar+0x2c>)
 80014aa:	f003 fff5 	bl	8005498 <HAL_UART_Transmit>

  return 1;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000a304 	.word	0x2000a304

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80014c2:	af02      	add	r7, sp, #8
int main(void)
 80014c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014cc:	f000 fb86 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d0:	f000 f868 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d4:	f7ff fd18 	bl	8000f08 <MX_GPIO_Init>
  MX_DMA_Init();
 80014d8:	f7ff fcf8 	bl	8000ecc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014dc:	f000 fac0 	bl	8001a60 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80014e0:	f000 f8b6 	bl	8001650 <MX_SPI2_Init>
  MX_I2C1_Init();
 80014e4:	f7ff fd94 	bl	8001010 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 80014e8:	f7ff fe96 	bl	8001218 <lcd_init>
  wchar_t tekst[MAX];
  char temperaturastr[MAX];
  setlocale(LC_ALL, "C.UTF-8");
 80014ec:	4927      	ldr	r1, [pc, #156]	; (800158c <main+0xd0>)
 80014ee:	2000      	movs	r0, #0
 80014f0:	f005 fd38 	bl	8006f64 <setlocale>

  //hagl_put_num(lps25hb_read_temp(), 40, 55, GREEN, font6x9);



  HAL_Delay(1000);
 80014f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f8:	f000 fbec 	bl	8001cd4 <HAL_Delay>





  printf("Searching...\n");
 80014fc:	4824      	ldr	r0, [pc, #144]	; (8001590 <main+0xd4>)
 80014fe:	f006 fba7 	bl	8007c50 <puts>
  if (lps25hb_init() == HAL_OK) {
 8001502:	f7ff ff83 	bl	800140c <lps25hb_init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <main+0x58>
    printf("OK: LPS25HB\n");
 800150c:	4821      	ldr	r0, [pc, #132]	; (8001594 <main+0xd8>)
 800150e:	f006 fb9f 	bl	8007c50 <puts>
 8001512:	e004      	b.n	800151e <main+0x62>
  } else {
    printf("Error: LPS25HB not found\n");
 8001514:	4820      	ldr	r0, [pc, #128]	; (8001598 <main+0xdc>)
 8001516:	f006 fb9b 	bl	8007c50 <puts>
    Error_Handler();
 800151a:	f000 f894 	bl	8001646 <Error_Handler>
  }
  HAL_Delay(100);
 800151e:	2064      	movs	r0, #100	; 0x64
 8001520:	f000 fbd8 	bl	8001cd4 <HAL_Delay>


  while (1)
  {

	  gcvt(lps25hb_read_temp(), 4, temperaturastr);
 8001524:	f7ff ff84 	bl	8001430 <lps25hb_read_temp>
 8001528:	ee10 3a10 	vmov	r3, s0
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f81b 	bl	8000568 <__aeabi_f2d>
 8001532:	4604      	mov	r4, r0
 8001534:	460d      	mov	r5, r1
 8001536:	463b      	mov	r3, r7
 8001538:	4619      	mov	r1, r3
 800153a:	2004      	movs	r0, #4
 800153c:	ec45 4b10 	vmov	d0, r4, r5
 8001540:	f005 faea 	bl	8006b18 <gcvt>

	  mbstowcs(tekst,temperaturastr,strlen(temperaturastr)+2);
 8001544:	463b      	mov	r3, r7
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fe4c 	bl	80001e4 <strlen>
 800154c:	4603      	mov	r3, r0
 800154e:	1c9a      	adds	r2, r3, #2
 8001550:	4639      	mov	r1, r7
 8001552:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001556:	4618      	mov	r0, r3
 8001558:	f005 fd74 	bl	8007044 <mbstowcs>
	  printf("T = %ls *C\n", tekst);
 800155c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001560:	4619      	mov	r1, r3
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <main+0xe0>)
 8001564:	f006 faee 	bl	8007b44 <iprintf>
	  //printf("T = %.1f*C\n", lps25hb_read_temp());
	 // printf("p = %.1f hPa\n", lps25hb_read_pressure());

	  hagl_put_text(tekst, 40, 50, GREEN, font6x9);
 8001568:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <main+0xe4>)
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	f24e 0307 	movw	r3, #57351	; 0xe007
 8001574:	2232      	movs	r2, #50	; 0x32
 8001576:	2128      	movs	r1, #40	; 0x28
 8001578:	f005 fa45 	bl	8006a06 <hagl_put_text>

	  lcd_copy();
 800157c:	f7ff fee8 	bl	8001350 <lcd_copy>


	  //hagl_put_text(temperaturastr, 40, 55, YELLOW, font6x9);
	  //lcd_copy();

	  HAL_Delay(1000);
 8001580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001584:	f000 fba6 	bl	8001cd4 <HAL_Delay>
  {
 8001588:	e7cc      	b.n	8001524 <main+0x68>
 800158a:	bf00      	nop
 800158c:	08009a50 	.word	0x08009a50
 8001590:	08009a58 	.word	0x08009a58
 8001594:	08009a68 	.word	0x08009a68
 8001598:	08009a74 	.word	0x08009a74
 800159c:	08009a90 	.word	0x08009a90
 80015a0:	08009b34 	.word	0x08009b34

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b096      	sub	sp, #88	; 0x58
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	2244      	movs	r2, #68	; 0x44
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f005 fd74 	bl	80070a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	463b      	mov	r3, r7
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015ca:	f001 fefb 	bl	80033c4 <HAL_PWREx_ControlVoltageScaling>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015d4:	f000 f837 	bl	8001646 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d8:	2302      	movs	r3, #2
 80015da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e2:	2310      	movs	r3, #16
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e6:	2302      	movs	r3, #2
 80015e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ea:	2302      	movs	r3, #2
 80015ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015f2:	230a      	movs	r3, #10
 80015f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015f6:	2307      	movs	r3, #7
 80015f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015fa:	2302      	movs	r3, #2
 80015fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015fe:	2302      	movs	r3, #2
 8001600:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4618      	mov	r0, r3
 8001608:	f001 ff32 	bl	8003470 <HAL_RCC_OscConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001612:	f000 f818 	bl	8001646 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001616:	230f      	movs	r3, #15
 8001618:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161a:	2303      	movs	r3, #3
 800161c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800162a:	463b      	mov	r3, r7
 800162c:	2104      	movs	r1, #4
 800162e:	4618      	mov	r0, r3
 8001630:	f002 fafa 	bl	8003c28 <HAL_RCC_ClockConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800163a:	f000 f804 	bl	8001646 <Error_Handler>
  }
}
 800163e:	bf00      	nop
 8001640:	3758      	adds	r7, #88	; 0x58
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164a:	b672      	cpsid	i
}
 800164c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164e:	e7fe      	b.n	800164e <Error_Handler+0x8>

08001650 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_SPI2_Init+0x74>)
 8001656:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <MX_SPI2_Init+0x78>)
 8001658:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <MX_SPI2_Init+0x74>)
 800165c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001660:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_SPI2_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <MX_SPI2_Init+0x74>)
 800166a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800166e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_SPI2_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <MX_SPI2_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_SPI2_Init+0x74>)
 800167e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001682:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_SPI2_Init+0x74>)
 8001686:	2210      	movs	r2, #16
 8001688:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_SPI2_Init+0x74>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_SPI2_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_SPI2_Init+0x74>)
 8001698:	2200      	movs	r2, #0
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_SPI2_Init+0x74>)
 800169e:	2207      	movs	r2, #7
 80016a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_SPI2_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_SPI2_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_SPI2_Init+0x74>)
 80016b0:	f003 f99a 	bl	80049e8 <HAL_SPI_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80016ba:	f7ff ffc4 	bl	8001646 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000a254 	.word	0x2000a254
 80016c8:	40003800 	.word	0x40003800

080016cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a3a      	ldr	r2, [pc, #232]	; (80017d4 <HAL_SPI_MspInit+0x108>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d16d      	bne.n	80017ca <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016ee:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <HAL_SPI_MspInit+0x10c>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	4a39      	ldr	r2, [pc, #228]	; (80017d8 <HAL_SPI_MspInit+0x10c>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HAL_SPI_MspInit+0x10c>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <HAL_SPI_MspInit+0x10c>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a33      	ldr	r2, [pc, #204]	; (80017d8 <HAL_SPI_MspInit+0x10c>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <HAL_SPI_MspInit+0x10c>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_SPI_MspInit+0x10c>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4a2d      	ldr	r2, [pc, #180]	; (80017d8 <HAL_SPI_MspInit+0x10c>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_SPI_MspInit+0x10c>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001736:	2308      	movs	r3, #8
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001746:	2305      	movs	r3, #5
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4822      	ldr	r0, [pc, #136]	; (80017dc <HAL_SPI_MspInit+0x110>)
 8001752:	f000 fe6b 	bl	800242c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001768:	2305      	movs	r3, #5
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	481b      	ldr	r0, [pc, #108]	; (80017e0 <HAL_SPI_MspInit+0x114>)
 8001774:	f000 fe5a 	bl	800242c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_SPI_MspInit+0x118>)
 800177a:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <HAL_SPI_MspInit+0x11c>)
 800177c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_SPI_MspInit+0x118>)
 8001780:	2201      	movs	r2, #1
 8001782:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_SPI_MspInit+0x118>)
 8001786:	2210      	movs	r2, #16
 8001788:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_SPI_MspInit+0x118>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_SPI_MspInit+0x118>)
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_SPI_MspInit+0x118>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_SPI_MspInit+0x118>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_SPI_MspInit+0x118>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017a8:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <HAL_SPI_MspInit+0x118>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80017ae:	480d      	ldr	r0, [pc, #52]	; (80017e4 <HAL_SPI_MspInit+0x118>)
 80017b0:	f000 fbc6 	bl	8001f40 <HAL_DMA_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 80017ba:	f7ff ff44 	bl	8001646 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_SPI_MspInit+0x118>)
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <HAL_SPI_MspInit+0x118>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40003800 	.word	0x40003800
 80017d8:	40021000 	.word	0x40021000
 80017dc:	48000800 	.word	0x48000800
 80017e0:	48000400 	.word	0x48000400
 80017e4:	2000a2b8 	.word	0x2000a2b8
 80017e8:	40020058 	.word	0x40020058

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_MspInit+0x44>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_MspInit+0x44>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6613      	str	r3, [r2, #96]	; 0x60
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_MspInit+0x44>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_MspInit+0x44>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_MspInit+0x44>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_MspInit+0x44>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <NMI_Handler+0x4>

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler+0x4>

08001846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler+0x4>

08001852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001880:	f000 fa08 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <DMA1_Channel5_IRQHandler+0x10>)
 800188e:	f000 fcee 	bl	800226e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000a2b8 	.word	0x2000a2b8

0800189c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <USART2_IRQHandler+0x10>)
 80018a2:	f003 fe8d 	bl	80055c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000a304 	.word	0x2000a304

080018b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
	return 1;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_kill>:

int _kill(int pid, int sig)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ca:	f005 f949 	bl	8006b60 <__errno>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2216      	movs	r2, #22
 80018d2:	601a      	str	r2, [r3, #0]
	return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_exit>:

void _exit (int status)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ffe7 	bl	80018c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018f2:	e7fe      	b.n	80018f2 <_exit+0x12>

080018f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e00a      	b.n	800191c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001906:	f3af 8000 	nop.w
 800190a:	4601      	mov	r1, r0
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	b2ca      	uxtb	r2, r1
 8001914:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf0      	blt.n	8001906 <_read+0x12>
	}

return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e009      	b.n	8001954 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fd9f 	bl	800148c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf1      	blt.n	8001940 <_write+0x12>
	}
	return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_close>:

int _close(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	return -1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198e:	605a      	str	r2, [r3, #4]
	return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_isatty>:

int _isatty(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
	return 1;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f005 f8ae 	bl	8006b60 <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20018000 	.word	0x20018000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	2000a300 	.word	0x2000a300
 8001a38:	2000a3a0 	.word	0x2000a3a0

08001a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_USART2_UART_Init+0x58>)
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <MX_USART2_UART_Init+0x5c>)
 8001a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <MX_USART2_UART_Init+0x58>)
 8001a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_USART2_UART_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_USART2_UART_Init+0x58>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_USART2_UART_Init+0x58>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_USART2_UART_Init+0x58>)
 8001a86:	220c      	movs	r2, #12
 8001a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_USART2_UART_Init+0x58>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_USART2_UART_Init+0x58>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_USART2_UART_Init+0x58>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_USART2_UART_Init+0x58>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_USART2_UART_Init+0x58>)
 8001aa4:	f003 fcaa 	bl	80053fc <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001aae:	f7ff fdca 	bl	8001646 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000a304 	.word	0x2000a304
 8001abc:	40004400 	.word	0x40004400

08001ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b0ac      	sub	sp, #176	; 0xb0
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2288      	movs	r2, #136	; 0x88
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f005 fadd 	bl	80070a0 <memset>
  if(uartHandle->Instance==USART2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <HAL_UART_MspInit+0xc0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d143      	bne.n	8001b78 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001af0:	2302      	movs	r3, #2
 8001af2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fab7 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b08:	f7ff fd9d 	bl	8001646 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b10:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b16:	6593      	str	r3, [r2, #88]	; 0x58
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	4a16      	ldr	r2, [pc, #88]	; (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b54:	2307      	movs	r3, #7
 8001b56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b64:	f000 fc62 	bl	800242c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2026      	movs	r0, #38	; 0x26
 8001b6e:	f000 f9b0 	bl	8001ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b72:	2026      	movs	r0, #38	; 0x26
 8001b74:	f000 f9c9 	bl	8001f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b78:	bf00      	nop
 8001b7a:	37b0      	adds	r7, #176	; 0xb0
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40004400 	.word	0x40004400
 8001b84:	40021000 	.word	0x40021000

08001b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b8c:	f7ff ff56 	bl	8001a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b92:	490d      	ldr	r1, [pc, #52]	; (8001bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <LoopForever+0xe>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	; (8001bd4 <LoopForever+0x16>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f005 f991 	bl	8006edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bba:	f7ff fc7f 	bl	80014bc <main>

08001bbe <LoopForever>:

LoopForever:
    b LoopForever
 8001bbe:	e7fe      	b.n	8001bbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001bcc:	0800cf24 	.word	0x0800cf24
  ldr r2, =_sbss
 8001bd0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001bd4:	2000a39c 	.word	0x2000a39c

08001bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC1_2_IRQHandler>
	...

08001bdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_Init+0x3c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <HAL_Init+0x3c>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf2:	2003      	movs	r0, #3
 8001bf4:	f000 f962 	bl	8001ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f000 f80f 	bl	8001c1c <HAL_InitTick>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	e001      	b.n	8001c0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c0a:	f7ff fdef 	bl	80017ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40022000 	.word	0x40022000

08001c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c28:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_InitTick+0x6c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d023      	beq.n	8001c78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_InitTick+0x70>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_InitTick+0x6c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f96d 	bl	8001f26 <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d809      	bhi.n	8001c6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 f937 	bl	8001ed2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_InitTick+0x74>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e007      	b.n	8001c7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e004      	b.n	8001c7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	e001      	b.n	8001c7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	2000a388 	.word	0x2000a388

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	2000a388 	.word	0x2000a388

08001cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff ffee 	bl	8001cbc <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_Delay+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffde 	bl	8001cbc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000008 	.word	0x20000008

08001d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4e:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	60d3      	str	r3, [r2, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <__NVIC_GetPriorityGrouping+0x18>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 0307 	and.w	r3, r3, #7
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db0b      	blt.n	8001daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	4907      	ldr	r1, [pc, #28]	; (8001db8 <__NVIC_EnableIRQ+0x38>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2001      	movs	r0, #1
 8001da2:	fa00 f202 	lsl.w	r2, r0, r2
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	; (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	; (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
         );
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e88:	d301      	bcc.n	8001e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00f      	b.n	8001eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <SysTick_Config+0x40>)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e96:	210f      	movs	r1, #15
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f7ff ff8e 	bl	8001dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <SysTick_Config+0x40>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <SysTick_Config+0x40>)
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	e000e010 	.word	0xe000e010

08001ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff29 	bl	8001d1c <__NVIC_SetPriorityGrouping>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee4:	f7ff ff3e 	bl	8001d64 <__NVIC_GetPriorityGrouping>
 8001ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	6978      	ldr	r0, [r7, #20]
 8001ef0:	f7ff ff8e 	bl	8001e10 <NVIC_EncodePriority>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff5d 	bl	8001dbc <__NVIC_SetPriority>
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff31 	bl	8001d80 <__NVIC_EnableIRQ>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ffa2 	bl	8001e78 <SysTick_Config>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e098      	b.n	8002084 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b4d      	ldr	r3, [pc, #308]	; (8002090 <HAL_DMA_Init+0x150>)
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d80f      	bhi.n	8001f7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <HAL_DMA_Init+0x154>)
 8001f66:	4413      	add	r3, r2
 8001f68:	4a4b      	ldr	r2, [pc, #300]	; (8002098 <HAL_DMA_Init+0x158>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	009a      	lsls	r2, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a48      	ldr	r2, [pc, #288]	; (800209c <HAL_DMA_Init+0x15c>)
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f7c:	e00e      	b.n	8001f9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_DMA_Init+0x160>)
 8001f86:	4413      	add	r3, r2
 8001f88:	4a43      	ldr	r2, [pc, #268]	; (8002098 <HAL_DMA_Init+0x158>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	009a      	lsls	r2, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a42      	ldr	r2, [pc, #264]	; (80020a4 <HAL_DMA_Init+0x164>)
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ff6:	d039      	beq.n	800206c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	4a27      	ldr	r2, [pc, #156]	; (800209c <HAL_DMA_Init+0x15c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d11a      	bne.n	8002038 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002002:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_DMA_Init+0x168>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f003 031c 	and.w	r3, r3, #28
 800200e:	210f      	movs	r1, #15
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	4924      	ldr	r1, [pc, #144]	; (80020a8 <HAL_DMA_Init+0x168>)
 8002018:	4013      	ands	r3, r2
 800201a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800201c:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <HAL_DMA_Init+0x168>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	f003 031c 	and.w	r3, r3, #28
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	491d      	ldr	r1, [pc, #116]	; (80020a8 <HAL_DMA_Init+0x168>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
 8002036:	e019      	b.n	800206c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002038:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <HAL_DMA_Init+0x16c>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	f003 031c 	and.w	r3, r3, #28
 8002044:	210f      	movs	r1, #15
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	4917      	ldr	r1, [pc, #92]	; (80020ac <HAL_DMA_Init+0x16c>)
 800204e:	4013      	ands	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <HAL_DMA_Init+0x16c>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6859      	ldr	r1, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f003 031c 	and.w	r3, r3, #28
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	4911      	ldr	r1, [pc, #68]	; (80020ac <HAL_DMA_Init+0x16c>)
 8002068:	4313      	orrs	r3, r2
 800206a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40020407 	.word	0x40020407
 8002094:	bffdfff8 	.word	0xbffdfff8
 8002098:	cccccccd 	.word	0xcccccccd
 800209c:	40020000 	.word	0x40020000
 80020a0:	bffdfbf8 	.word	0xbffdfbf8
 80020a4:	40020400 	.word	0x40020400
 80020a8:	400200a8 	.word	0x400200a8
 80020ac:	400204a8 	.word	0x400204a8

080020b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_DMA_Start_IT+0x20>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e04b      	b.n	8002168 <HAL_DMA_Start_IT+0xb8>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d13a      	bne.n	800215a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f95f 	bl	80023cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 020e 	orr.w	r2, r2, #14
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e00f      	b.n	8002148 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0204 	bic.w	r2, r2, #4
 8002136:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 020a 	orr.w	r2, r2, #10
 8002146:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e005      	b.n	8002166 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002166:	7dfb      	ldrb	r3, [r7, #23]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d008      	beq.n	800219a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2204      	movs	r2, #4
 800218c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e022      	b.n	80021e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 020e 	bic.w	r2, r2, #14
 80021a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f003 021c 	and.w	r2, r3, #28
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2101      	movs	r1, #1
 80021c8:	fa01 f202 	lsl.w	r2, r1, r2
 80021cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d005      	beq.n	8002210 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2204      	movs	r2, #4
 8002208:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	e029      	b.n	8002264 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 020e 	bic.w	r2, r2, #14
 800221e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	f003 021c 	and.w	r2, r3, #28
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f202 	lsl.w	r2, r1, r2
 8002242:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
    }
  }
  return status;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f003 031c 	and.w	r3, r3, #28
 800228e:	2204      	movs	r2, #4
 8002290:	409a      	lsls	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d026      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x7a>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d021      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d107      	bne.n	80022c2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0204 	bic.w	r2, r2, #4
 80022c0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f003 021c 	and.w	r2, r3, #28
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	2104      	movs	r1, #4
 80022d0:	fa01 f202 	lsl.w	r2, r1, r2
 80022d4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d071      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80022e6:	e06c      	b.n	80023c2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	f003 031c 	and.w	r3, r3, #28
 80022f0:	2202      	movs	r2, #2
 80022f2:	409a      	lsls	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d02e      	beq.n	800235a <HAL_DMA_IRQHandler+0xec>
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d029      	beq.n	800235a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10b      	bne.n	800232c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 020a 	bic.w	r2, r2, #10
 8002322:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002330:	f003 021c 	and.w	r2, r3, #28
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	2102      	movs	r1, #2
 800233a:	fa01 f202 	lsl.w	r2, r1, r2
 800233e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d038      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002358:	e033      	b.n	80023c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f003 031c 	and.w	r3, r3, #28
 8002362:	2208      	movs	r2, #8
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d02a      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x156>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d025      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 020e 	bic.w	r2, r2, #14
 8002386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	f003 021c 	and.w	r2, r3, #28
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	2101      	movs	r1, #1
 8002396:	fa01 f202 	lsl.w	r2, r1, r2
 800239a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023c2:	bf00      	nop
 80023c4:	bf00      	nop
}
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	f003 021c 	and.w	r2, r3, #28
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d108      	bne.n	8002410 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800240e:	e007      	b.n	8002420 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	60da      	str	r2, [r3, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243a:	e17f      	b.n	800273c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8171 	beq.w	8002736 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d005      	beq.n	800246c <HAL_GPIO_Init+0x40>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d130      	bne.n	80024ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024a2:	2201      	movs	r2, #1
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f003 0201 	and.w	r2, r3, #1
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d118      	bne.n	800250c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024e0:	2201      	movs	r2, #1
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	08db      	lsrs	r3, r3, #3
 80024f6:	f003 0201 	and.w	r2, r3, #1
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b03      	cmp	r3, #3
 8002516:	d017      	beq.n	8002548 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d123      	bne.n	800259c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	08da      	lsrs	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220f      	movs	r2, #15
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	6939      	ldr	r1, [r7, #16]
 8002598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80ac 	beq.w	8002736 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	4b5f      	ldr	r3, [pc, #380]	; (800275c <HAL_GPIO_Init+0x330>)
 80025e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e2:	4a5e      	ldr	r2, [pc, #376]	; (800275c <HAL_GPIO_Init+0x330>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6613      	str	r3, [r2, #96]	; 0x60
 80025ea:	4b5c      	ldr	r3, [pc, #368]	; (800275c <HAL_GPIO_Init+0x330>)
 80025ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025f6:	4a5a      	ldr	r2, [pc, #360]	; (8002760 <HAL_GPIO_Init+0x334>)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002602:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	220f      	movs	r2, #15
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002620:	d025      	beq.n	800266e <HAL_GPIO_Init+0x242>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4f      	ldr	r2, [pc, #316]	; (8002764 <HAL_GPIO_Init+0x338>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01f      	beq.n	800266a <HAL_GPIO_Init+0x23e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4e      	ldr	r2, [pc, #312]	; (8002768 <HAL_GPIO_Init+0x33c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d019      	beq.n	8002666 <HAL_GPIO_Init+0x23a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4d      	ldr	r2, [pc, #308]	; (800276c <HAL_GPIO_Init+0x340>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0x236>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4c      	ldr	r2, [pc, #304]	; (8002770 <HAL_GPIO_Init+0x344>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00d      	beq.n	800265e <HAL_GPIO_Init+0x232>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4b      	ldr	r2, [pc, #300]	; (8002774 <HAL_GPIO_Init+0x348>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <HAL_GPIO_Init+0x22e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4a      	ldr	r2, [pc, #296]	; (8002778 <HAL_GPIO_Init+0x34c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_GPIO_Init+0x22a>
 8002652:	2306      	movs	r3, #6
 8002654:	e00c      	b.n	8002670 <HAL_GPIO_Init+0x244>
 8002656:	2307      	movs	r3, #7
 8002658:	e00a      	b.n	8002670 <HAL_GPIO_Init+0x244>
 800265a:	2305      	movs	r3, #5
 800265c:	e008      	b.n	8002670 <HAL_GPIO_Init+0x244>
 800265e:	2304      	movs	r3, #4
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x244>
 8002662:	2303      	movs	r3, #3
 8002664:	e004      	b.n	8002670 <HAL_GPIO_Init+0x244>
 8002666:	2302      	movs	r3, #2
 8002668:	e002      	b.n	8002670 <HAL_GPIO_Init+0x244>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_GPIO_Init+0x244>
 800266e:	2300      	movs	r3, #0
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	f002 0203 	and.w	r2, r2, #3
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	4093      	lsls	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002680:	4937      	ldr	r1, [pc, #220]	; (8002760 <HAL_GPIO_Init+0x334>)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	3302      	adds	r3, #2
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800268e:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_GPIO_Init+0x350>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026b2:	4a32      	ldr	r2, [pc, #200]	; (800277c <HAL_GPIO_Init+0x350>)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026b8:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_GPIO_Init+0x350>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026dc:	4a27      	ldr	r2, [pc, #156]	; (800277c <HAL_GPIO_Init+0x350>)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_GPIO_Init+0x350>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002706:	4a1d      	ldr	r2, [pc, #116]	; (800277c <HAL_GPIO_Init+0x350>)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800270c:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_GPIO_Init+0x350>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	43db      	mvns	r3, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002730:	4a12      	ldr	r2, [pc, #72]	; (800277c <HAL_GPIO_Init+0x350>)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3301      	adds	r3, #1
 800273a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	f47f ae78 	bne.w	800243c <HAL_GPIO_Init+0x10>
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	40010000 	.word	0x40010000
 8002764:	48000400 	.word	0x48000400
 8002768:	48000800 	.word	0x48000800
 800276c:	48000c00 	.word	0x48000c00
 8002770:	48001000 	.word	0x48001000
 8002774:	48001400 	.word	0x48001400
 8002778:	48001800 	.word	0x48001800
 800277c:	40010400 	.word	0x40010400

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800279c:	e002      	b.n	80027a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e081      	b.n	80028c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe fc5a 	bl	8001090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002800:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002810:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d107      	bne.n	800282a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	e006      	b.n	8002838 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002836:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d104      	bne.n	800284a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002848:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800286c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69d9      	ldr	r1, [r3, #28]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1a      	ldr	r2, [r3, #32]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	4608      	mov	r0, r1
 80028da:	4611      	mov	r1, r2
 80028dc:	461a      	mov	r2, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	817b      	strh	r3, [r7, #10]
 80028e2:	460b      	mov	r3, r1
 80028e4:	813b      	strh	r3, [r7, #8]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	f040 80f9 	bne.w	8002aea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_I2C_Mem_Write+0x34>
 80028fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0ed      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_I2C_Mem_Write+0x4e>
 800291a:	2302      	movs	r3, #2
 800291c:	e0e6      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002926:	f7ff f9c9 	bl	8001cbc <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2319      	movs	r3, #25
 8002932:	2201      	movs	r2, #1
 8002934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fac3 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0d1      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2221      	movs	r2, #33	; 0x21
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2240      	movs	r2, #64	; 0x40
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002970:	88f8      	ldrh	r0, [r7, #6]
 8002972:	893a      	ldrh	r2, [r7, #8]
 8002974:	8979      	ldrh	r1, [r7, #10]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	4603      	mov	r3, r0
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f9d3 	bl	8002d2c <I2C_RequestMemoryWrite>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0a9      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	2bff      	cmp	r3, #255	; 0xff
 80029a0:	d90e      	bls.n	80029c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	22ff      	movs	r2, #255	; 0xff
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	8979      	ldrh	r1, [r7, #10]
 80029b0:	2300      	movs	r3, #0
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fc2b 	bl	8003214 <I2C_TransferConfig>
 80029be:	e00f      	b.n	80029e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	2300      	movs	r3, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fc1a 	bl	8003214 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 faad 	bl	8002f44 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e07b      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d034      	beq.n	8002a98 <HAL_I2C_Mem_Write+0x1c8>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d130      	bne.n	8002a98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2180      	movs	r1, #128	; 0x80
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fa3f 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e04d      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2bff      	cmp	r3, #255	; 0xff
 8002a58:	d90e      	bls.n	8002a78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	8979      	ldrh	r1, [r7, #10]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fbcf 	bl	8003214 <I2C_TransferConfig>
 8002a76:	e00f      	b.n	8002a98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	8979      	ldrh	r1, [r7, #10]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fbbe 	bl	8003214 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d19e      	bne.n	80029e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fa8c 	bl	8002fc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e01a      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2220      	movs	r2, #32
 8002abc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_I2C_Mem_Write+0x224>)
 8002aca:	400b      	ands	r3, r1
 8002acc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	fe00e800 	.word	0xfe00e800

08002af8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	f040 80fd 	bne.w	8002d1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_I2C_Mem_Read+0x34>
 8002b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0f1      	b.n	8002d1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_I2C_Mem_Read+0x4e>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e0ea      	b.n	8002d1c <HAL_I2C_Mem_Read+0x224>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b4e:	f7ff f8b5 	bl	8001cbc <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2319      	movs	r3, #25
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f9af 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0d5      	b.n	8002d1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2222      	movs	r2, #34	; 0x22
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2240      	movs	r2, #64	; 0x40
 8002b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a3a      	ldr	r2, [r7, #32]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b98:	88f8      	ldrh	r0, [r7, #6]
 8002b9a:	893a      	ldrh	r2, [r7, #8]
 8002b9c:	8979      	ldrh	r1, [r7, #10]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f913 	bl	8002dd4 <I2C_RequestMemoryRead>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0ad      	b.n	8002d1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2bff      	cmp	r3, #255	; 0xff
 8002bc8:	d90e      	bls.n	8002be8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	22ff      	movs	r2, #255	; 0xff
 8002bce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	8979      	ldrh	r1, [r7, #10]
 8002bd8:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <HAL_I2C_Mem_Read+0x22c>)
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fb17 	bl	8003214 <I2C_TransferConfig>
 8002be6:	e00f      	b.n	8002c08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	8979      	ldrh	r1, [r7, #10]
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <HAL_I2C_Mem_Read+0x22c>)
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fb06 	bl	8003214 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2104      	movs	r1, #4
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f956 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07c      	b.n	8002d1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d034      	beq.n	8002cc8 <HAL_I2C_Mem_Read+0x1d0>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d130      	bne.n	8002cc8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f927 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e04d      	b.n	8002d1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2bff      	cmp	r3, #255	; 0xff
 8002c88:	d90e      	bls.n	8002ca8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	22ff      	movs	r2, #255	; 0xff
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	8979      	ldrh	r1, [r7, #10]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 fab7 	bl	8003214 <I2C_TransferConfig>
 8002ca6:	e00f      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	8979      	ldrh	r1, [r7, #10]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 faa6 	bl	8003214 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d19a      	bne.n	8002c08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f974 	bl	8002fc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e01a      	b.n	8002d1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2220      	movs	r2, #32
 8002cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_I2C_Mem_Read+0x230>)
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
  }
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	80002400 	.word	0x80002400
 8002d28:	fe00e800 	.word	0xfe00e800

08002d2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	817b      	strh	r3, [r7, #10]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	813b      	strh	r3, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	8979      	ldrh	r1, [r7, #10]
 8002d4c:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <I2C_RequestMemoryWrite+0xa4>)
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fa5d 	bl	8003214 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	69b9      	ldr	r1, [r7, #24]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f8f0 	bl	8002f44 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e02c      	b.n	8002dc8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d74:	893b      	ldrh	r3, [r7, #8]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	629a      	str	r2, [r3, #40]	; 0x28
 8002d7e:	e015      	b.n	8002dac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d80:	893b      	ldrh	r3, [r7, #8]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	69b9      	ldr	r1, [r7, #24]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f8d6 	bl	8002f44 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e012      	b.n	8002dc8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002da2:	893b      	ldrh	r3, [r7, #8]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2180      	movs	r1, #128	; 0x80
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f884 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	80002000 	.word	0x80002000

08002dd4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	817b      	strh	r3, [r7, #10]
 8002de6:	460b      	mov	r3, r1
 8002de8:	813b      	strh	r3, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	8979      	ldrh	r1, [r7, #10]
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <I2C_RequestMemoryRead+0xa4>)
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fa0a 	bl	8003214 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	69b9      	ldr	r1, [r7, #24]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f89d 	bl	8002f44 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e02c      	b.n	8002e6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d105      	bne.n	8002e26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1a:	893b      	ldrh	r3, [r7, #8]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
 8002e24:	e015      	b.n	8002e52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e26:	893b      	ldrh	r3, [r7, #8]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f883 	bl	8002f44 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e012      	b.n	8002e6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e48:	893b      	ldrh	r3, [r7, #8]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2140      	movs	r1, #64	; 0x40
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f831 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	80002000 	.word	0x80002000

08002e7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d103      	bne.n	8002e9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2200      	movs	r2, #0
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d007      	beq.n	8002eb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	619a      	str	r2, [r3, #24]
  }
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed4:	e022      	b.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d01e      	beq.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7fe feed 	bl	8001cbc <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d113      	bne.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e00f      	b.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4013      	ands	r3, r2
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d0cd      	beq.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f50:	e02c      	b.n	8002fac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f870 	bl	800303c <I2C_IsErrorOccurred>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e02a      	b.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d01e      	beq.n	8002fac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7fe fea5 	bl	8001cbc <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d113      	bne.n	8002fac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e007      	b.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d1cb      	bne.n	8002f52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fd0:	e028      	b.n	8003024 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f830 	bl	800303c <I2C_IsErrorOccurred>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e026      	b.n	8003034 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fe fe69 	bl	8001cbc <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d113      	bne.n	8003024 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e007      	b.n	8003034 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b20      	cmp	r3, #32
 8003030:	d1cf      	bne.n	8002fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	d075      	beq.n	8003154 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2210      	movs	r2, #16
 800306e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003070:	e056      	b.n	8003120 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d052      	beq.n	8003120 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7fe fe1f 	bl	8001cbc <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <I2C_IsErrorOccurred+0x54>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d147      	bne.n	8003120 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b2:	d12e      	bne.n	8003112 <I2C_IsErrorOccurred+0xd6>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ba:	d02a      	beq.n	8003112 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d027      	beq.n	8003112 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030d2:	f7fe fdf3 	bl	8001cbc <HAL_GetTick>
 80030d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d8:	e01b      	b.n	8003112 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030da:	f7fe fdef 	bl	8001cbc <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b19      	cmp	r3, #25
 80030e6:	d914      	bls.n	8003112 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b20      	cmp	r3, #32
 800311e:	d1dc      	bne.n	80030da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b20      	cmp	r3, #32
 800312c:	d003      	beq.n	8003136 <I2C_IsErrorOccurred+0xfa>
 800312e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003132:	2b00      	cmp	r3, #0
 8003134:	d09d      	beq.n	8003072 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2220      	movs	r2, #32
 8003144:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	f043 0304 	orr.w	r3, r3, #4
 800314c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003176:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	f043 0308 	orr.w	r3, r3, #8
 800318e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003198:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80031c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01c      	beq.n	8003204 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff fe56 	bl	8002e7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <I2C_IsErrorOccurred+0x1d4>)
 80031dc:	400b      	ands	r3, r1
 80031de:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003208:	4618      	mov	r0, r3
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	fe00e800 	.word	0xfe00e800

08003214 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	817b      	strh	r3, [r7, #10]
 8003222:	4613      	mov	r3, r2
 8003224:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003226:	897b      	ldrh	r3, [r7, #10]
 8003228:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800322c:	7a7b      	ldrb	r3, [r7, #9]
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003234:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	4313      	orrs	r3, r2
 800323e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003242:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	0d5b      	lsrs	r3, r3, #21
 800324e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <I2C_TransferConfig+0x60>)
 8003254:	430b      	orrs	r3, r1
 8003256:	43db      	mvns	r3, r3
 8003258:	ea02 0103 	and.w	r1, r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	03ff63ff 	.word	0x03ff63ff

08003278 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b20      	cmp	r3, #32
 800328c:	d138      	bne.n	8003300 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003298:	2302      	movs	r3, #2
 800329a:	e032      	b.n	8003302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	; 0x24
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b20      	cmp	r3, #32
 8003322:	d139      	bne.n	8003398 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800332e:	2302      	movs	r3, #2
 8003330:	e033      	b.n	800339a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2224      	movs	r2, #36	; 0x24
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003360:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40007000 	.word	0x40007000

080033c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d2:	d130      	bne.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e0:	d038      	beq.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033ea:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2232      	movs	r2, #50	; 0x32
 80033f8:	fb02 f303 	mul.w	r3, r2, r3
 80033fc:	4a1b      	ldr	r2, [pc, #108]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	0c9b      	lsrs	r3, r3, #18
 8003404:	3301      	adds	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003408:	e002      	b.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3b01      	subs	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341c:	d102      	bne.n	8003424 <HAL_PWREx_ControlVoltageScaling+0x60>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f2      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003430:	d110      	bne.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e00f      	b.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003442:	d007      	beq.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800344c:	4a05      	ldr	r2, [pc, #20]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800344e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003452:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40007000 	.word	0x40007000
 8003468:	20000000 	.word	0x20000000
 800346c:	431bde83 	.word	0x431bde83

08003470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e3ca      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003482:	4b97      	ldr	r3, [pc, #604]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800348c:	4b94      	ldr	r3, [pc, #592]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80e4 	beq.w	800366c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <HAL_RCC_OscConfig+0x4a>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	f040 808b 	bne.w	80035c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	f040 8087 	bne.w	80035c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ba:	4b89      	ldr	r3, [pc, #548]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_RCC_OscConfig+0x62>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e3a2      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	4b82      	ldr	r3, [pc, #520]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d004      	beq.n	80034ec <HAL_RCC_OscConfig+0x7c>
 80034e2:	4b7f      	ldr	r3, [pc, #508]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ea:	e005      	b.n	80034f8 <HAL_RCC_OscConfig+0x88>
 80034ec:	4b7c      	ldr	r3, [pc, #496]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80034ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d223      	bcs.n	8003544 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fd55 	bl	8003fb0 <RCC_SetFlashLatencyFromMSIRange>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e383      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003510:	4b73      	ldr	r3, [pc, #460]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a72      	ldr	r2, [pc, #456]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003516:	f043 0308 	orr.w	r3, r3, #8
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b70      	ldr	r3, [pc, #448]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	496d      	ldr	r1, [pc, #436]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800352e:	4b6c      	ldr	r3, [pc, #432]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	4968      	ldr	r1, [pc, #416]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
 8003542:	e025      	b.n	8003590 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003544:	4b66      	ldr	r3, [pc, #408]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a65      	ldr	r2, [pc, #404]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800354a:	f043 0308 	orr.w	r3, r3, #8
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b63      	ldr	r3, [pc, #396]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4960      	ldr	r1, [pc, #384]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003562:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	495b      	ldr	r1, [pc, #364]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fd15 	bl	8003fb0 <RCC_SetFlashLatencyFromMSIRange>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e343      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003590:	f000 fc4a 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b52      	ldr	r3, [pc, #328]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	4950      	ldr	r1, [pc, #320]	; (80036e4 <HAL_RCC_OscConfig+0x274>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ac:	4a4e      	ldr	r2, [pc, #312]	; (80036e8 <HAL_RCC_OscConfig+0x278>)
 80035ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035b0:	4b4e      	ldr	r3, [pc, #312]	; (80036ec <HAL_RCC_OscConfig+0x27c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe fb31 	bl	8001c1c <HAL_InitTick>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d052      	beq.n	800366a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	e327      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d032      	beq.n	8003636 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035d0:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a42      	ldr	r2, [pc, #264]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035dc:	f7fe fb6e 	bl	8001cbc <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035e4:	f7fe fb6a 	bl	8001cbc <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e310      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035f6:	4b3a      	ldr	r3, [pc, #232]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003602:	4b37      	ldr	r3, [pc, #220]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a36      	ldr	r2, [pc, #216]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003608:	f043 0308 	orr.w	r3, r3, #8
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4931      	ldr	r1, [pc, #196]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003620:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	492c      	ldr	r1, [pc, #176]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
 8003634:	e01a      	b.n	800366c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003636:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003642:	f7fe fb3b 	bl	8001cbc <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800364a:	f7fe fb37 	bl	8001cbc <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e2dd      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800365c:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f0      	bne.n	800364a <HAL_RCC_OscConfig+0x1da>
 8003668:	e000      	b.n	800366c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800366a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d074      	beq.n	8003762 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b08      	cmp	r3, #8
 800367c:	d005      	beq.n	800368a <HAL_RCC_OscConfig+0x21a>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b0c      	cmp	r3, #12
 8003682:	d10e      	bne.n	80036a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d10b      	bne.n	80036a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d064      	beq.n	8003760 <HAL_RCC_OscConfig+0x2f0>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d160      	bne.n	8003760 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e2ba      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x24a>
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0b      	ldr	r2, [pc, #44]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	e026      	b.n	8003708 <HAL_RCC_OscConfig+0x298>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c2:	d115      	bne.n	80036f0 <HAL_RCC_OscConfig+0x280>
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a02      	ldr	r2, [pc, #8]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	e014      	b.n	8003708 <HAL_RCC_OscConfig+0x298>
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	0800caec 	.word	0x0800caec
 80036e8:	20000000 	.word	0x20000000
 80036ec:	20000004 	.word	0x20000004
 80036f0:	4ba0      	ldr	r3, [pc, #640]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a9f      	ldr	r2, [pc, #636]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80036f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b9d      	ldr	r3, [pc, #628]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a9c      	ldr	r2, [pc, #624]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d013      	beq.n	8003738 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fe fad4 	bl	8001cbc <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003718:	f7fe fad0 	bl	8001cbc <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	; 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e276      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800372a:	4b92      	ldr	r3, [pc, #584]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x2a8>
 8003736:	e014      	b.n	8003762 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fe fac0 	bl	8001cbc <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003740:	f7fe fabc 	bl	8001cbc <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e262      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003752:	4b88      	ldr	r3, [pc, #544]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x2d0>
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d060      	beq.n	8003830 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d005      	beq.n	8003780 <HAL_RCC_OscConfig+0x310>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d119      	bne.n	80037ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d116      	bne.n	80037ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003780:	4b7c      	ldr	r3, [pc, #496]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_OscConfig+0x328>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e23f      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003798:	4b76      	ldr	r3, [pc, #472]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	4973      	ldr	r1, [pc, #460]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ac:	e040      	b.n	8003830 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d023      	beq.n	80037fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b6:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6e      	ldr	r2, [pc, #440]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe fa7b 	bl	8001cbc <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ca:	f7fe fa77 	bl	8001cbc <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e21d      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037dc:	4b65      	ldr	r3, [pc, #404]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b62      	ldr	r3, [pc, #392]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	495f      	ldr	r1, [pc, #380]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
 80037fc:	e018      	b.n	8003830 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fe:	4b5d      	ldr	r3, [pc, #372]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a5c      	ldr	r2, [pc, #368]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fe fa57 	bl	8001cbc <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003812:	f7fe fa53 	bl	8001cbc <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e1f9      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003824:	4b53      	ldr	r3, [pc, #332]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d03c      	beq.n	80038b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01c      	beq.n	800387e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003844:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384a:	4a4a      	ldr	r2, [pc, #296]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fe fa32 	bl	8001cbc <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385c:	f7fe fa2e 	bl	8001cbc <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e1d4      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800386e:	4b41      	ldr	r3, [pc, #260]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ef      	beq.n	800385c <HAL_RCC_OscConfig+0x3ec>
 800387c:	e01b      	b.n	80038b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003884:	4a3b      	ldr	r2, [pc, #236]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7fe fa15 	bl	8001cbc <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003896:	f7fe fa11 	bl	8001cbc <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e1b7      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a8:	4b32      	ldr	r3, [pc, #200]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80038aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ef      	bne.n	8003896 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80a6 	beq.w	8003a10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c4:	2300      	movs	r3, #0
 80038c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038c8:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10d      	bne.n	80038f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d4:	4b27      	ldr	r3, [pc, #156]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	4a26      	ldr	r2, [pc, #152]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80038da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038de:	6593      	str	r3, [r2, #88]	; 0x58
 80038e0:	4b24      	ldr	r3, [pc, #144]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ec:	2301      	movs	r3, #1
 80038ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <HAL_RCC_OscConfig+0x508>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d118      	bne.n	800392e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038fc:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <HAL_RCC_OscConfig+0x508>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <HAL_RCC_OscConfig+0x508>)
 8003902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003906:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003908:	f7fe f9d8 	bl	8001cbc <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003910:	f7fe f9d4 	bl	8001cbc <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e17a      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <HAL_RCC_OscConfig+0x508>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d108      	bne.n	8003948 <HAL_RCC_OscConfig+0x4d8>
 8003936:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003946:	e029      	b.n	800399c <HAL_RCC_OscConfig+0x52c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b05      	cmp	r3, #5
 800394e:	d115      	bne.n	800397c <HAL_RCC_OscConfig+0x50c>
 8003950:	4b08      	ldr	r3, [pc, #32]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	4a07      	ldr	r2, [pc, #28]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003958:	f043 0304 	orr.w	r3, r3, #4
 800395c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	4a03      	ldr	r2, [pc, #12]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003970:	e014      	b.n	800399c <HAL_RCC_OscConfig+0x52c>
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	40007000 	.word	0x40007000
 800397c:	4b9c      	ldr	r3, [pc, #624]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	4a9b      	ldr	r2, [pc, #620]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800398c:	4b98      	ldr	r3, [pc, #608]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	4a97      	ldr	r2, [pc, #604]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003994:	f023 0304 	bic.w	r3, r3, #4
 8003998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d016      	beq.n	80039d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fe f98a 	bl	8001cbc <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fe f986 	bl	8001cbc <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e12a      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c2:	4b8b      	ldr	r3, [pc, #556]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ed      	beq.n	80039ac <HAL_RCC_OscConfig+0x53c>
 80039d0:	e015      	b.n	80039fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7fe f973 	bl	8001cbc <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fe f96f 	bl	8001cbc <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e113      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f0:	4b7f      	ldr	r3, [pc, #508]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ed      	bne.n	80039da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039fe:	7ffb      	ldrb	r3, [r7, #31]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d105      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a04:	4b7a      	ldr	r3, [pc, #488]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	4a79      	ldr	r2, [pc, #484]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80fe 	beq.w	8003c16 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	f040 80d0 	bne.w	8003bc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a24:	4b72      	ldr	r3, [pc, #456]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 0203 	and.w	r2, r3, #3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d130      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	3b01      	subs	r3, #1
 8003a44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d127      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d11f      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a64:	2a07      	cmp	r2, #7
 8003a66:	bf14      	ite	ne
 8003a68:	2201      	movne	r2, #1
 8003a6a:	2200      	moveq	r2, #0
 8003a6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d113      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d109      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	3b01      	subs	r3, #1
 8003a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d06e      	beq.n	8003b78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b0c      	cmp	r3, #12
 8003a9e:	d069      	beq.n	8003b74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003aa0:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003aac:	4b50      	ldr	r3, [pc, #320]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0ad      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003abc:	4b4c      	ldr	r3, [pc, #304]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a4b      	ldr	r2, [pc, #300]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ac8:	f7fe f8f8 	bl	8001cbc <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fe f8f4 	bl	8001cbc <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e09a      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae2:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aee:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	4b40      	ldr	r3, [pc, #256]	; (8003bf4 <HAL_RCC_OscConfig+0x784>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003afe:	3a01      	subs	r2, #1
 8003b00:	0112      	lsls	r2, r2, #4
 8003b02:	4311      	orrs	r1, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b08:	0212      	lsls	r2, r2, #8
 8003b0a:	4311      	orrs	r1, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b10:	0852      	lsrs	r2, r2, #1
 8003b12:	3a01      	subs	r2, #1
 8003b14:	0552      	lsls	r2, r2, #21
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b1c:	0852      	lsrs	r2, r2, #1
 8003b1e:	3a01      	subs	r2, #1
 8003b20:	0652      	lsls	r2, r2, #25
 8003b22:	4311      	orrs	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b28:	0912      	lsrs	r2, r2, #4
 8003b2a:	0452      	lsls	r2, r2, #17
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	4930      	ldr	r1, [pc, #192]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b34:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b4c:	f7fe f8b6 	bl	8001cbc <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fe f8b2 	bl	8001cbc <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e058      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b66:	4b22      	ldr	r3, [pc, #136]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b72:	e050      	b.n	8003c16 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e04f      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d148      	bne.n	8003c16 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b90:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a16      	ldr	r2, [pc, #88]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b9c:	f7fe f88e 	bl	8001cbc <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fe f88a 	bl	8001cbc <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e030      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x734>
 8003bc2:	e028      	b.n	8003c16 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d023      	beq.n	8003c12 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7fe f871 	bl	8001cbc <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bdc:	e00c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bde:	f7fe f86d 	bl	8001cbc <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d905      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e013      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCC_OscConfig+0x7b0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1ec      	bne.n	8003bde <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCC_OscConfig+0x7b0>)
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	4905      	ldr	r1, [pc, #20]	; (8003c20 <HAL_RCC_OscConfig+0x7b0>)
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_RCC_OscConfig+0x7b4>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60cb      	str	r3, [r1, #12]
 8003c10:	e001      	b.n	8003c16 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3720      	adds	r7, #32
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	feeefffc 	.word	0xfeeefffc

08003c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0e7      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b75      	ldr	r3, [pc, #468]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d910      	bls.n	8003c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b72      	ldr	r3, [pc, #456]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 0207 	bic.w	r2, r3, #7
 8003c52:	4970      	ldr	r1, [pc, #448]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0cf      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d010      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	4b66      	ldr	r3, [pc, #408]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d908      	bls.n	8003c9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c88:	4b63      	ldr	r3, [pc, #396]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4960      	ldr	r1, [pc, #384]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d04c      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cae:	4b5a      	ldr	r3, [pc, #360]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d121      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0a6      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc6:	4b54      	ldr	r3, [pc, #336]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d115      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e09a      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cde:	4b4e      	ldr	r3, [pc, #312]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e08e      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cee:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e086      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cfe:	4b46      	ldr	r3, [pc, #280]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f023 0203 	bic.w	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4943      	ldr	r1, [pc, #268]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d10:	f7fd ffd4 	bl	8001cbc <HAL_GetTick>
 8003d14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d18:	f7fd ffd0 	bl	8001cbc <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e06e      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 020c 	and.w	r2, r3, #12
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d1eb      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d010      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d208      	bcs.n	8003d6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d5c:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	492b      	ldr	r1, [pc, #172]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d210      	bcs.n	8003d9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 0207 	bic.w	r2, r3, #7
 8003d84:	4923      	ldr	r1, [pc, #140]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8c:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e036      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	4918      	ldr	r1, [pc, #96]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc8:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4910      	ldr	r1, [pc, #64]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ddc:	f000 f824 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	490b      	ldr	r1, [pc, #44]	; (8003e1c <HAL_RCC_ClockConfig+0x1f4>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1f8>)
 8003dfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x1fc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd ff0b 	bl	8001c1c <HAL_InitTick>
 8003e06:	4603      	mov	r3, r0
 8003e08:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40022000 	.word	0x40022000
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	0800caec 	.word	0x0800caec
 8003e20:	20000000 	.word	0x20000000
 8003e24:	20000004 	.word	0x20000004

08003e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e36:	4b3e      	ldr	r3, [pc, #248]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e40:	4b3b      	ldr	r3, [pc, #236]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x34>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d121      	bne.n	8003e9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d11e      	bne.n	8003e9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e5c:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e68:	4b31      	ldr	r3, [pc, #196]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e005      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e78:	4b2d      	ldr	r3, [pc, #180]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10d      	bne.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d102      	bne.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	e004      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003eac:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8003eae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d134      	bne.n	8003f20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d003      	beq.n	8003ece <HAL_RCC_GetSysClockFreq+0xa6>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0xac>
 8003ecc:	e005      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ece:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ed0:	617b      	str	r3, [r7, #20]
      break;
 8003ed2:	e005      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ed6:	617b      	str	r3, [r7, #20]
      break;
 8003ed8:	e002      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	617b      	str	r3, [r7, #20]
      break;
 8003ede:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	3301      	adds	r3, #1
 8003eec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	fb03 f202 	mul.w	r2, r3, r2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	0e5b      	lsrs	r3, r3, #25
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	3301      	adds	r3, #1
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f20:	69bb      	ldr	r3, [r7, #24]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3724      	adds	r7, #36	; 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	0800cb04 	.word	0x0800cb04
 8003f38:	00f42400 	.word	0x00f42400
 8003f3c:	007a1200 	.word	0x007a1200

08003f40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000000 	.word	0x20000000

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f5c:	f7ff fff0 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4904      	ldr	r1, [pc, #16]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	0800cafc 	.word	0x0800cafc

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f88:	f7ff ffda 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0adb      	lsrs	r3, r3, #11
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4904      	ldr	r1, [pc, #16]	; (8003fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	0800cafc 	.word	0x0800cafc

08003fb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fbc:	4b2a      	ldr	r3, [pc, #168]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fc8:	f7ff f9ee 	bl	80033a8 <HAL_PWREx_GetVoltageRange>
 8003fcc:	6178      	str	r0, [r7, #20]
 8003fce:	e014      	b.n	8003ffa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b25      	ldr	r3, [pc, #148]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	4a24      	ldr	r2, [pc, #144]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6593      	str	r3, [r2, #88]	; 0x58
 8003fdc:	4b22      	ldr	r3, [pc, #136]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fe8:	f7ff f9de 	bl	80033a8 <HAL_PWREx_GetVoltageRange>
 8003fec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fee:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004000:	d10b      	bne.n	800401a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d919      	bls.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2ba0      	cmp	r3, #160	; 0xa0
 800400c:	d902      	bls.n	8004014 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800400e:	2302      	movs	r3, #2
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	e013      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004014:	2301      	movs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e010      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d902      	bls.n	8004026 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004020:	2303      	movs	r3, #3
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	e00a      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b80      	cmp	r3, #128	; 0x80
 800402a:	d102      	bne.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800402c:	2302      	movs	r3, #2
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	e004      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b70      	cmp	r3, #112	; 0x70
 8004036:	d101      	bne.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004038:	2301      	movs	r3, #1
 800403a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 0207 	bic.w	r2, r3, #7
 8004044:	4909      	ldr	r1, [pc, #36]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800404c:	4b07      	ldr	r3, [pc, #28]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	429a      	cmp	r2, r3
 8004058:	d001      	beq.n	800405e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000
 800406c:	40022000 	.word	0x40022000

08004070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004078:	2300      	movs	r3, #0
 800407a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800407c:	2300      	movs	r3, #0
 800407e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004088:	2b00      	cmp	r3, #0
 800408a:	d041      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004090:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004094:	d02a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004096:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800409a:	d824      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800409c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040a0:	d008      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040a6:	d81e      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b0:	d010      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040b2:	e018      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040b4:	4b86      	ldr	r3, [pc, #536]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a85      	ldr	r2, [pc, #532]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040c0:	e015      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fabb 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040d2:	e00c      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3320      	adds	r3, #32
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fba6 	bl	800482c <RCCEx_PLLSAI2_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040e4:	e003      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	74fb      	strb	r3, [r7, #19]
      break;
 80040ea:	e000      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ee:	7cfb      	ldrb	r3, [r7, #19]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10b      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040f4:	4b76      	ldr	r3, [pc, #472]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004102:	4973      	ldr	r1, [pc, #460]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800410a:	e001      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d041      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004120:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004124:	d02a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004126:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800412a:	d824      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800412c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004130:	d008      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004136:	d81e      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800413c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004140:	d010      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004142:	e018      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004144:	4b62      	ldr	r3, [pc, #392]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a61      	ldr	r2, [pc, #388]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004150:	e015      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3304      	adds	r3, #4
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fa73 	bl	8004644 <RCCEx_PLLSAI1_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004162:	e00c      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3320      	adds	r3, #32
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fb5e 	bl	800482c <RCCEx_PLLSAI2_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004174:	e003      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	74fb      	strb	r3, [r7, #19]
      break;
 800417a:	e000      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800417c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417e:	7cfb      	ldrb	r3, [r7, #19]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10b      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004184:	4b52      	ldr	r3, [pc, #328]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004192:	494f      	ldr	r1, [pc, #316]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800419a:	e001      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80a0 	beq.w	80042ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ae:	2300      	movs	r3, #0
 80041b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041b2:	4b47      	ldr	r3, [pc, #284]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00d      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c8:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	4a40      	ldr	r2, [pc, #256]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d2:	6593      	str	r3, [r2, #88]	; 0x58
 80041d4:	4b3e      	ldr	r3, [pc, #248]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e0:	2301      	movs	r3, #1
 80041e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e4:	4b3b      	ldr	r3, [pc, #236]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a3a      	ldr	r2, [pc, #232]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041f0:	f7fd fd64 	bl	8001cbc <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041f6:	e009      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f8:	f7fd fd60 	bl	8001cbc <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d902      	bls.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	74fb      	strb	r3, [r7, #19]
        break;
 800420a:	e005      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800420c:	4b31      	ldr	r3, [pc, #196]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ef      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d15c      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800421e:	4b2c      	ldr	r3, [pc, #176]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004228:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01f      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	429a      	cmp	r2, r3
 800423a:	d019      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800423c:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004248:	4b21      	ldr	r3, [pc, #132]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	4a20      	ldr	r2, [pc, #128]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004258:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	4a1c      	ldr	r2, [pc, #112]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d016      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427a:	f7fd fd1f 	bl	8001cbc <HAL_GetTick>
 800427e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004280:	e00b      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004282:	f7fd fd1b 	bl	8001cbc <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004290:	4293      	cmp	r3, r2
 8004292:	d902      	bls.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	74fb      	strb	r3, [r7, #19]
            break;
 8004298:	e006      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ec      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ae:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042be:	4904      	ldr	r1, [pc, #16]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042c6:	e009      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	74bb      	strb	r3, [r7, #18]
 80042cc:	e006      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042dc:	7c7b      	ldrb	r3, [r7, #17]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d105      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e2:	4b9e      	ldr	r3, [pc, #632]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	4a9d      	ldr	r2, [pc, #628]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042fa:	4b98      	ldr	r3, [pc, #608]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f023 0203 	bic.w	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	4994      	ldr	r1, [pc, #592]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800431c:	4b8f      	ldr	r3, [pc, #572]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f023 020c 	bic.w	r2, r3, #12
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432a:	498c      	ldr	r1, [pc, #560]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800433e:	4b87      	ldr	r3, [pc, #540]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	4983      	ldr	r1, [pc, #524]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004360:	4b7e      	ldr	r3, [pc, #504]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	497b      	ldr	r1, [pc, #492]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004382:	4b76      	ldr	r3, [pc, #472]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004390:	4972      	ldr	r1, [pc, #456]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a4:	4b6d      	ldr	r3, [pc, #436]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b2:	496a      	ldr	r1, [pc, #424]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043c6:	4b65      	ldr	r3, [pc, #404]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d4:	4961      	ldr	r1, [pc, #388]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043e8:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f6:	4959      	ldr	r1, [pc, #356]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800440a:	4b54      	ldr	r3, [pc, #336]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004418:	4950      	ldr	r1, [pc, #320]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800442c:	4b4b      	ldr	r3, [pc, #300]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	4948      	ldr	r1, [pc, #288]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800444e:	4b43      	ldr	r3, [pc, #268]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	493f      	ldr	r1, [pc, #252]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d028      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004470:	4b3a      	ldr	r3, [pc, #232]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447e:	4937      	ldr	r1, [pc, #220]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800448a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800448e:	d106      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004490:	4b32      	ldr	r3, [pc, #200]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a31      	ldr	r2, [pc, #196]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800449a:	60d3      	str	r3, [r2, #12]
 800449c:	e011      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044a6:	d10c      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	2101      	movs	r1, #1
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f8c8 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d028      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044ce:	4b23      	ldr	r3, [pc, #140]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	491f      	ldr	r1, [pc, #124]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ec:	d106      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ee:	4b1b      	ldr	r3, [pc, #108]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	4a1a      	ldr	r2, [pc, #104]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044f8:	60d3      	str	r3, [r2, #12]
 80044fa:	e011      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004504:	d10c      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3304      	adds	r3, #4
 800450a:	2101      	movs	r1, #1
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f899 	bl	8004644 <RCCEx_PLLSAI1_Config>
 8004512:	4603      	mov	r3, r0
 8004514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02b      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	4908      	ldr	r1, [pc, #32]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454a:	d109      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800454c:	4b03      	ldr	r3, [pc, #12]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a02      	ldr	r2, [pc, #8]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004556:	60d3      	str	r3, [r2, #12]
 8004558:	e014      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004568:	d10c      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f867 	bl	8004644 <RCCEx_PLLSAI1_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d02f      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004590:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459e:	4928      	ldr	r1, [pc, #160]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ae:	d10d      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f844 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d014      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	74bb      	strb	r3, [r7, #18]
 80045ca:	e011      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3320      	adds	r3, #32
 80045da:	2102      	movs	r1, #2
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f925 	bl	800482c <RCCEx_PLLSAI2_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045e6:	7cfb      	ldrb	r3, [r7, #19]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460a:	490d      	ldr	r1, [pc, #52]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800461e:	4b08      	ldr	r3, [pc, #32]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800462e:	4904      	ldr	r1, [pc, #16]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004636:	7cbb      	ldrb	r3, [r7, #18]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40021000 	.word	0x40021000

08004644 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004652:	4b75      	ldr	r3, [pc, #468]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d018      	beq.n	8004690 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800465e:	4b72      	ldr	r3, [pc, #456]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0203 	and.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d10d      	bne.n	800468a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
       ||
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004676:	4b6c      	ldr	r3, [pc, #432]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
       ||
 8004686:	429a      	cmp	r2, r3
 8004688:	d047      	beq.n	800471a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
 800468e:	e044      	b.n	800471a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b03      	cmp	r3, #3
 8004696:	d018      	beq.n	80046ca <RCCEx_PLLSAI1_Config+0x86>
 8004698:	2b03      	cmp	r3, #3
 800469a:	d825      	bhi.n	80046e8 <RCCEx_PLLSAI1_Config+0xa4>
 800469c:	2b01      	cmp	r3, #1
 800469e:	d002      	beq.n	80046a6 <RCCEx_PLLSAI1_Config+0x62>
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d009      	beq.n	80046b8 <RCCEx_PLLSAI1_Config+0x74>
 80046a4:	e020      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046a6:	4b60      	ldr	r3, [pc, #384]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d11d      	bne.n	80046ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b6:	e01a      	b.n	80046ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046b8:	4b5b      	ldr	r3, [pc, #364]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d116      	bne.n	80046f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c8:	e013      	b.n	80046f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ca:	4b57      	ldr	r3, [pc, #348]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10f      	bne.n	80046f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046d6:	4b54      	ldr	r3, [pc, #336]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d109      	bne.n	80046f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046e6:	e006      	b.n	80046f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
      break;
 80046ec:	e004      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046ee:	bf00      	nop
 80046f0:	e002      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10d      	bne.n	800471a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046fe:	4b4a      	ldr	r3, [pc, #296]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6819      	ldr	r1, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	3b01      	subs	r3, #1
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	430b      	orrs	r3, r1
 8004714:	4944      	ldr	r1, [pc, #272]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d17d      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004720:	4b41      	ldr	r3, [pc, #260]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a40      	ldr	r2, [pc, #256]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004726:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800472a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472c:	f7fd fac6 	bl	8001cbc <HAL_GetTick>
 8004730:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004732:	e009      	b.n	8004748 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004734:	f7fd fac2 	bl	8001cbc <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d902      	bls.n	8004748 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	73fb      	strb	r3, [r7, #15]
        break;
 8004746:	e005      	b.n	8004754 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004748:	4b37      	ldr	r3, [pc, #220]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1ef      	bne.n	8004734 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d160      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d111      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004760:	4b31      	ldr	r3, [pc, #196]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6892      	ldr	r2, [r2, #8]
 8004770:	0211      	lsls	r1, r2, #8
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68d2      	ldr	r2, [r2, #12]
 8004776:	0912      	lsrs	r2, r2, #4
 8004778:	0452      	lsls	r2, r2, #17
 800477a:	430a      	orrs	r2, r1
 800477c:	492a      	ldr	r1, [pc, #168]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 800477e:	4313      	orrs	r3, r2
 8004780:	610b      	str	r3, [r1, #16]
 8004782:	e027      	b.n	80047d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d112      	bne.n	80047b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800478a:	4b27      	ldr	r3, [pc, #156]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004792:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6892      	ldr	r2, [r2, #8]
 800479a:	0211      	lsls	r1, r2, #8
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6912      	ldr	r2, [r2, #16]
 80047a0:	0852      	lsrs	r2, r2, #1
 80047a2:	3a01      	subs	r2, #1
 80047a4:	0552      	lsls	r2, r2, #21
 80047a6:	430a      	orrs	r2, r1
 80047a8:	491f      	ldr	r1, [pc, #124]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	610b      	str	r3, [r1, #16]
 80047ae:	e011      	b.n	80047d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047b0:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6892      	ldr	r2, [r2, #8]
 80047c0:	0211      	lsls	r1, r2, #8
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6952      	ldr	r2, [r2, #20]
 80047c6:	0852      	lsrs	r2, r2, #1
 80047c8:	3a01      	subs	r2, #1
 80047ca:	0652      	lsls	r2, r2, #25
 80047cc:	430a      	orrs	r2, r1
 80047ce:	4916      	ldr	r1, [pc, #88]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a13      	ldr	r2, [pc, #76]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e0:	f7fd fa6c 	bl	8001cbc <HAL_GetTick>
 80047e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047e6:	e009      	b.n	80047fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e8:	f7fd fa68 	bl	8001cbc <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d902      	bls.n	80047fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	73fb      	strb	r3, [r7, #15]
          break;
 80047fa:	e005      	b.n	8004808 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ef      	beq.n	80047e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	4904      	ldr	r1, [pc, #16]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004818:	4313      	orrs	r3, r2
 800481a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000

0800482c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800483a:	4b6a      	ldr	r3, [pc, #424]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d018      	beq.n	8004878 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004846:	4b67      	ldr	r3, [pc, #412]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0203 	and.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d10d      	bne.n	8004872 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
       ||
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800485e:	4b61      	ldr	r3, [pc, #388]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
       ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d047      	beq.n	8004902 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
 8004876:	e044      	b.n	8004902 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b03      	cmp	r3, #3
 800487e:	d018      	beq.n	80048b2 <RCCEx_PLLSAI2_Config+0x86>
 8004880:	2b03      	cmp	r3, #3
 8004882:	d825      	bhi.n	80048d0 <RCCEx_PLLSAI2_Config+0xa4>
 8004884:	2b01      	cmp	r3, #1
 8004886:	d002      	beq.n	800488e <RCCEx_PLLSAI2_Config+0x62>
 8004888:	2b02      	cmp	r3, #2
 800488a:	d009      	beq.n	80048a0 <RCCEx_PLLSAI2_Config+0x74>
 800488c:	e020      	b.n	80048d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800488e:	4b55      	ldr	r3, [pc, #340]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d11d      	bne.n	80048d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800489e:	e01a      	b.n	80048d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048a0:	4b50      	ldr	r3, [pc, #320]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d116      	bne.n	80048da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b0:	e013      	b.n	80048da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048b2:	4b4c      	ldr	r3, [pc, #304]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10f      	bne.n	80048de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048be:	4b49      	ldr	r3, [pc, #292]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048ce:	e006      	b.n	80048de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
      break;
 80048d4:	e004      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048de:	bf00      	nop
    }

    if(status == HAL_OK)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10d      	bne.n	8004902 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048e6:	4b3f      	ldr	r3, [pc, #252]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	430b      	orrs	r3, r1
 80048fc:	4939      	ldr	r1, [pc, #228]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d167      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004908:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a35      	ldr	r2, [pc, #212]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800490e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004914:	f7fd f9d2 	bl	8001cbc <HAL_GetTick>
 8004918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800491a:	e009      	b.n	8004930 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800491c:	f7fd f9ce 	bl	8001cbc <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d902      	bls.n	8004930 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	73fb      	strb	r3, [r7, #15]
        break;
 800492e:	e005      	b.n	800493c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004930:	4b2c      	ldr	r3, [pc, #176]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1ef      	bne.n	800491c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d14a      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d111      	bne.n	800496c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004948:	4b26      	ldr	r3, [pc, #152]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6892      	ldr	r2, [r2, #8]
 8004958:	0211      	lsls	r1, r2, #8
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68d2      	ldr	r2, [r2, #12]
 800495e:	0912      	lsrs	r2, r2, #4
 8004960:	0452      	lsls	r2, r2, #17
 8004962:	430a      	orrs	r2, r1
 8004964:	491f      	ldr	r1, [pc, #124]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004966:	4313      	orrs	r3, r2
 8004968:	614b      	str	r3, [r1, #20]
 800496a:	e011      	b.n	8004990 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800496c:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004974:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6892      	ldr	r2, [r2, #8]
 800497c:	0211      	lsls	r1, r2, #8
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6912      	ldr	r2, [r2, #16]
 8004982:	0852      	lsrs	r2, r2, #1
 8004984:	3a01      	subs	r2, #1
 8004986:	0652      	lsls	r2, r2, #25
 8004988:	430a      	orrs	r2, r1
 800498a:	4916      	ldr	r1, [pc, #88]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498c:	4313      	orrs	r3, r2
 800498e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004990:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499c:	f7fd f98e 	bl	8001cbc <HAL_GetTick>
 80049a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049a2:	e009      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049a4:	f7fd f98a 	bl	8001cbc <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d902      	bls.n	80049b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	73fb      	strb	r3, [r7, #15]
          break;
 80049b6:	e005      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0ef      	beq.n	80049a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	4904      	ldr	r1, [pc, #16]	; (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000

080049e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e095      	b.n	8004b26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d108      	bne.n	8004a14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0a:	d009      	beq.n	8004a20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	61da      	str	r2, [r3, #28]
 8004a12:	e005      	b.n	8004a20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fc fe46 	bl	80016cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a60:	d902      	bls.n	8004a68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	e002      	b.n	8004a6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a76:	d007      	beq.n	8004a88 <HAL_SPI_Init+0xa0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a80:	d002      	beq.n	8004a88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	ea42 0103 	orr.w	r1, r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	0c1b      	lsrs	r3, r3, #16
 8004ae4:	f003 0204 	and.w	r2, r3, #4
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b04:	ea42 0103 	orr.w	r1, r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b088      	sub	sp, #32
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_SPI_Transmit+0x22>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e158      	b.n	8004e02 <HAL_SPI_Transmit+0x2d4>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b58:	f7fd f8b0 	bl	8001cbc <HAL_GetTick>
 8004b5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b72:	e13d      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_Transmit+0x52>
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b84:	e134      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	88fa      	ldrh	r2, [r7, #6]
 8004b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	88fa      	ldrh	r2, [r7, #6]
 8004ba4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d007      	beq.n	8004c10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c18:	d94b      	bls.n	8004cb2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_SPI_Transmit+0xfa>
 8004c22:	8afb      	ldrh	r3, [r7, #22]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d13e      	bne.n	8004ca6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	881a      	ldrh	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	1c9a      	adds	r2, r3, #2
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c4c:	e02b      	b.n	8004ca6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d112      	bne.n	8004c82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	1c9a      	adds	r2, r3, #2
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c80:	e011      	b.n	8004ca6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c82:	f7fd f81b 	bl	8001cbc <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d803      	bhi.n	8004c9a <HAL_SPI_Transmit+0x16c>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d102      	bne.n	8004ca0 <HAL_SPI_Transmit+0x172>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ca4:	e0a4      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1ce      	bne.n	8004c4e <HAL_SPI_Transmit+0x120>
 8004cb0:	e07c      	b.n	8004dac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_SPI_Transmit+0x192>
 8004cba:	8afb      	ldrh	r3, [r7, #22]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d170      	bne.n	8004da2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d912      	bls.n	8004cf0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	881a      	ldrh	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	1c9a      	adds	r2, r3, #2
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b02      	subs	r3, #2
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cee:	e058      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	7812      	ldrb	r2, [r2, #0]
 8004cfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d16:	e044      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d12b      	bne.n	8004d7e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d912      	bls.n	8004d56 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	881a      	ldrh	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b02      	subs	r3, #2
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d54:	e025      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	7812      	ldrb	r2, [r2, #0]
 8004d62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d7c:	e011      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d7e:	f7fc ff9d 	bl	8001cbc <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d803      	bhi.n	8004d96 <HAL_SPI_Transmit+0x268>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d102      	bne.n	8004d9c <HAL_SPI_Transmit+0x26e>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004da0:	e026      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1b5      	bne.n	8004d18 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fadd 	bl	8005370 <SPI_EndRxTxTransaction>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e000      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004dee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	4613      	mov	r3, r2
 8004e18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_SPI_Transmit_DMA+0x20>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e0d8      	b.n	8004fde <HAL_SPI_Transmit_DMA+0x1d2>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d002      	beq.n	8004e46 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004e40:	2302      	movs	r3, #2
 8004e42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e44:	e0c6      	b.n	8004fd4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_SPI_Transmit_DMA+0x46>
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e56:	e0bd      	b.n	8004fd4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	88fa      	ldrh	r2, [r7, #6]
 8004e76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea2:	d10f      	bne.n	8004ec4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ec2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	4a47      	ldr	r2, [pc, #284]	; (8004fe8 <HAL_SPI_Transmit_DMA+0x1dc>)
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed0:	4a46      	ldr	r2, [pc, #280]	; (8004fec <HAL_SPI_Transmit_DMA+0x1e0>)
 8004ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	4a45      	ldr	r2, [pc, #276]	; (8004ff0 <HAL_SPI_Transmit_DMA+0x1e4>)
 8004eda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ef2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004efc:	d82d      	bhi.n	8004f5a <HAL_SPI_Transmit_DMA+0x14e>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f08:	d127      	bne.n	8004f5a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10f      	bne.n	8004f38 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f26:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	085b      	lsrs	r3, r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f36:	e010      	b.n	8004f5a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f46:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	085b      	lsrs	r3, r3, #1
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3301      	adds	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	4619      	mov	r1, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f70:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f72:	f7fd f89d 	bl	80020b0 <HAL_DMA_Start_IT>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00c      	beq.n	8004f96 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f80:	f043 0210 	orr.w	r2, r3, #16
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004f94:	e01e      	b.n	8004fd4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d007      	beq.n	8004fb4 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0220 	orr.w	r2, r2, #32
 8004fc2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0202 	orr.w	r2, r2, #2
 8004fd2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	080050d7 	.word	0x080050d7
 8004fec:	08005031 	.word	0x08005031
 8004ff0:	080050f3 	.word	0x080050f3

08004ff4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800503e:	f7fc fe3d 	bl	8001cbc <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0320 	and.w	r3, r3, #32
 800504e:	2b20      	cmp	r3, #32
 8005050:	d03b      	beq.n	80050ca <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0220 	bic.w	r2, r2, #32
 8005060:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0202 	bic.w	r2, r2, #2
 8005070:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	2164      	movs	r1, #100	; 0x64
 8005076:	6978      	ldr	r0, [r7, #20]
 8005078:	f000 f97a 	bl	8005370 <SPI_EndRxTxTransaction>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005086:	f043 0220 	orr.w	r2, r3, #32
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2200      	movs	r2, #0
 80050b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80050c2:	6978      	ldr	r0, [r7, #20]
 80050c4:	f7ff ffaa 	bl	800501c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80050c8:	e002      	b.n	80050d0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80050ca:	6978      	ldr	r0, [r7, #20]
 80050cc:	f7ff ff92 	bl	8004ff4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff ff8f 	bl	8005008 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0203 	bic.w	r2, r2, #3
 800510e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005114:	f043 0210 	orr.w	r2, r3, #16
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff ff79 	bl	800501c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800512a:	bf00      	nop
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005144:	f7fc fdba 	bl	8001cbc <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	4413      	add	r3, r2
 8005152:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005154:	f7fc fdb2 	bl	8001cbc <HAL_GetTick>
 8005158:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800515a:	4b39      	ldr	r3, [pc, #228]	; (8005240 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	015b      	lsls	r3, r3, #5
 8005160:	0d1b      	lsrs	r3, r3, #20
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800516a:	e054      	b.n	8005216 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d050      	beq.n	8005216 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005174:	f7fc fda2 	bl	8001cbc <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	429a      	cmp	r2, r3
 8005182:	d902      	bls.n	800518a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d13d      	bne.n	8005206 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a2:	d111      	bne.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ac:	d004      	beq.n	80051b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b6:	d107      	bne.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d0:	d10f      	bne.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e017      	b.n	8005236 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3b01      	subs	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4013      	ands	r3, r2
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	461a      	mov	r2, r3
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	429a      	cmp	r2, r3
 8005232:	d19b      	bne.n	800516c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000000 	.word	0x20000000

08005244 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005256:	f7fc fd31 	bl	8001cbc <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	4413      	add	r3, r2
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005266:	f7fc fd29 	bl	8001cbc <HAL_GetTick>
 800526a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	330c      	adds	r3, #12
 8005272:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005274:	4b3d      	ldr	r3, [pc, #244]	; (800536c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	00da      	lsls	r2, r3, #3
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	0d1b      	lsrs	r3, r3, #20
 8005284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005286:	fb02 f303 	mul.w	r3, r2, r3
 800528a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800528c:	e060      	b.n	8005350 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005294:	d107      	bne.n	80052a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ac:	d050      	beq.n	8005350 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052ae:	f7fc fd05 	bl	8001cbc <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d902      	bls.n	80052c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d13d      	bne.n	8005340 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052dc:	d111      	bne.n	8005302 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e6:	d004      	beq.n	80052f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f0:	d107      	bne.n	8005302 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005300:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800530a:	d10f      	bne.n	800532c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800532a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e010      	b.n	8005362 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	3b01      	subs	r3, #1
 800534e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4013      	ands	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	d196      	bne.n	800528e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3728      	adds	r7, #40	; 0x28
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000000 	.word	0x20000000

08005370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff ff5b 	bl	8005244 <SPI_WaitFifoStateUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d007      	beq.n	80053a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005398:	f043 0220 	orr.w	r2, r3, #32
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e027      	b.n	80053f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2200      	movs	r2, #0
 80053ac:	2180      	movs	r1, #128	; 0x80
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff fec0 	bl	8005134 <SPI_WaitFlagStateUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053be:	f043 0220 	orr.w	r2, r3, #32
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e014      	b.n	80053f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7ff ff34 	bl	8005244 <SPI_WaitFifoStateUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e6:	f043 0220 	orr.w	r2, r3, #32
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e000      	b.n	80053f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e040      	b.n	8005490 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fc fb4e 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2224      	movs	r2, #36	; 0x24
 8005428:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0201 	bic.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fbc2 	bl	8005bc4 <UART_SetConfig>
 8005440:	4603      	mov	r3, r0
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e022      	b.n	8005490 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fe6e 	bl	8006134 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fef5 	bl	8006278 <UART_CheckIdleState>
 800548e:	4603      	mov	r3, r0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	4613      	mov	r3, r2
 80054a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	f040 8082 	bne.w	80055b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_UART_Transmit+0x26>
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e07a      	b.n	80055b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_UART_Transmit+0x38>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e073      	b.n	80055b8 <HAL_UART_Transmit+0x120>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2221      	movs	r2, #33	; 0x21
 80054e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054e6:	f7fc fbe9 	bl	8001cbc <HAL_GetTick>
 80054ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	88fa      	ldrh	r2, [r7, #6]
 80054f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005504:	d108      	bne.n	8005518 <HAL_UART_Transmit+0x80>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d104      	bne.n	8005518 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	e003      	b.n	8005520 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005528:	e02d      	b.n	8005586 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2200      	movs	r2, #0
 8005532:	2180      	movs	r1, #128	; 0x80
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 fee8 	bl	800630a <UART_WaitOnFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e039      	b.n	80055b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	881a      	ldrh	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005556:	b292      	uxth	r2, r2
 8005558:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	3302      	adds	r3, #2
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	e008      	b.n	8005574 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	781a      	ldrb	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	b292      	uxth	r2, r2
 800556c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3301      	adds	r3, #1
 8005572:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1cb      	bne.n	800552a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2200      	movs	r2, #0
 800559a:	2140      	movs	r1, #64	; 0x40
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 feb4 	bl	800630a <UART_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e005      	b.n	80055b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	e000      	b.n	80055b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80055b6:	2302      	movs	r3, #2
  }
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3720      	adds	r7, #32
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b0ba      	sub	sp, #232	; 0xe8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80055ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80055ee:	4013      	ands	r3, r2
 80055f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80055f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d115      	bne.n	8005628 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00f      	beq.n	8005628 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 82a6 	beq.w	8005b6a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
      }
      return;
 8005626:	e2a0      	b.n	8005b6a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8117 	beq.w	8005860 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800563e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005642:	4b85      	ldr	r3, [pc, #532]	; (8005858 <HAL_UART_IRQHandler+0x298>)
 8005644:	4013      	ands	r3, r2
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 810a 	beq.w	8005860 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800564c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d011      	beq.n	800567c <HAL_UART_IRQHandler+0xbc>
 8005658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2201      	movs	r2, #1
 800566a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005672:	f043 0201 	orr.w	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800567c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d011      	beq.n	80056ac <HAL_UART_IRQHandler+0xec>
 8005688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00b      	beq.n	80056ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2202      	movs	r2, #2
 800569a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a2:	f043 0204 	orr.w	r2, r3, #4
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d011      	beq.n	80056dc <HAL_UART_IRQHandler+0x11c>
 80056b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00b      	beq.n	80056dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2204      	movs	r2, #4
 80056ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056d2:	f043 0202 	orr.w	r2, r3, #2
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d017      	beq.n	8005718 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d105      	bne.n	8005700 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2208      	movs	r2, #8
 8005706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800570e:	f043 0208 	orr.w	r2, r3, #8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005720:	2b00      	cmp	r3, #0
 8005722:	d012      	beq.n	800574a <HAL_UART_IRQHandler+0x18a>
 8005724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005728:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00c      	beq.n	800574a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005738:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 820c 	beq.w	8005b6e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00d      	beq.n	800577e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005784:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	d005      	beq.n	80057a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800579a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d04f      	beq.n	8005842 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fe75 	bl	8006492 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d141      	bne.n	800583a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3308      	adds	r3, #8
 80057bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3308      	adds	r3, #8
 80057de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1d9      	bne.n	80057b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	2b00      	cmp	r3, #0
 8005808:	d013      	beq.n	8005832 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	4a13      	ldr	r2, [pc, #76]	; (800585c <HAL_UART_IRQHandler+0x29c>)
 8005810:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	4618      	mov	r0, r3
 8005818:	f7fc fce8 	bl	80021ec <HAL_DMA_Abort_IT>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d017      	beq.n	8005852 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800582c:	4610      	mov	r0, r2
 800582e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	e00f      	b.n	8005852 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f9b0 	bl	8005b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	e00b      	b.n	8005852 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f9ac 	bl	8005b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005840:	e007      	b.n	8005852 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f9a8 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005850:	e18d      	b.n	8005b6e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005852:	bf00      	nop
    return;
 8005854:	e18b      	b.n	8005b6e <HAL_UART_IRQHandler+0x5ae>
 8005856:	bf00      	nop
 8005858:	04000120 	.word	0x04000120
 800585c:	08006559 	.word	0x08006559

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005864:	2b01      	cmp	r3, #1
 8005866:	f040 8146 	bne.w	8005af6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 813f 	beq.w	8005af6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8138 	beq.w	8005af6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2210      	movs	r2, #16
 800588c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005898:	2b40      	cmp	r3, #64	; 0x40
 800589a:	f040 80b4 	bne.w	8005a06 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 815f 	beq.w	8005b72 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058be:	429a      	cmp	r2, r3
 80058c0:	f080 8157 	bcs.w	8005b72 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f040 8085 	bne.w	80059ea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	461a      	mov	r2, r3
 8005906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800590a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800590e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005916:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1da      	bne.n	80058e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3308      	adds	r3, #8
 8005930:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800593a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3308      	adds	r3, #8
 800594a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800594e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005952:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005956:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e1      	bne.n	800592a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800598a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800598c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005990:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e3      	bne.n	8005966 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ba:	f023 0310 	bic.w	r3, r3, #16
 80059be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80059ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e4      	bne.n	80059aa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fc fbc3 	bl	8002170 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f8d4 	bl	8005bac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a04:	e0b5      	b.n	8005b72 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80a7 	beq.w	8005b76 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80a2 	beq.w	8005b76 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a54:	647b      	str	r3, [r7, #68]	; 0x44
 8005a56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e4      	bne.n	8005a32 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	623b      	str	r3, [r7, #32]
   return(result);
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a8c:	633a      	str	r2, [r7, #48]	; 0x30
 8005a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e3      	bne.n	8005a68 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0310 	bic.w	r3, r3, #16
 8005ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	69b9      	ldr	r1, [r7, #24]
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e4      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f85c 	bl	8005bac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005af4:	e03f      	b.n	8005b76 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00e      	beq.n	8005b20 <HAL_UART_IRQHandler+0x560>
 8005b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fd5d 	bl	80065d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b1e:	e02d      	b.n	8005b7c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00e      	beq.n	8005b4a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01c      	beq.n	8005b7a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	4798      	blx	r3
    }
    return;
 8005b48:	e017      	b.n	8005b7a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d012      	beq.n	8005b7c <HAL_UART_IRQHandler+0x5bc>
 8005b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fd0e 	bl	8006584 <UART_EndTransmit_IT>
    return;
 8005b68:	e008      	b.n	8005b7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005b6a:	bf00      	nop
 8005b6c:	e006      	b.n	8005b7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8005b6e:	bf00      	nop
 8005b70:	e004      	b.n	8005b7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005b72:	bf00      	nop
 8005b74:	e002      	b.n	8005b7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005b76:	bf00      	nop
 8005b78:	e000      	b.n	8005b7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8005b7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005b7c:	37e8      	adds	r7, #232	; 0xe8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop

08005b84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc8:	b08a      	sub	sp, #40	; 0x28
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4ba4      	ldr	r3, [pc, #656]	; (8005e84 <UART_SetConfig+0x2c0>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a99      	ldr	r2, [pc, #612]	; (8005e88 <UART_SetConfig+0x2c4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c40:	430a      	orrs	r2, r1
 8005c42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a90      	ldr	r2, [pc, #576]	; (8005e8c <UART_SetConfig+0x2c8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d126      	bne.n	8005c9c <UART_SetConfig+0xd8>
 8005c4e:	4b90      	ldr	r3, [pc, #576]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	f003 0303 	and.w	r3, r3, #3
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d81b      	bhi.n	8005c94 <UART_SetConfig+0xd0>
 8005c5c:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <UART_SetConfig+0xa0>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c85 	.word	0x08005c85
 8005c6c:	08005c7d 	.word	0x08005c7d
 8005c70:	08005c8d 	.word	0x08005c8d
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c7a:	e116      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c82:	e112      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005c84:	2304      	movs	r3, #4
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c8a:	e10e      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c92:	e10a      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005c94:	2310      	movs	r3, #16
 8005c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c9a:	e106      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a7c      	ldr	r2, [pc, #496]	; (8005e94 <UART_SetConfig+0x2d0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d138      	bne.n	8005d18 <UART_SetConfig+0x154>
 8005ca6:	4b7a      	ldr	r3, [pc, #488]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cac:	f003 030c 	and.w	r3, r3, #12
 8005cb0:	2b0c      	cmp	r3, #12
 8005cb2:	d82d      	bhi.n	8005d10 <UART_SetConfig+0x14c>
 8005cb4:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <UART_SetConfig+0xf8>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005cf1 	.word	0x08005cf1
 8005cc0:	08005d11 	.word	0x08005d11
 8005cc4:	08005d11 	.word	0x08005d11
 8005cc8:	08005d11 	.word	0x08005d11
 8005ccc:	08005d01 	.word	0x08005d01
 8005cd0:	08005d11 	.word	0x08005d11
 8005cd4:	08005d11 	.word	0x08005d11
 8005cd8:	08005d11 	.word	0x08005d11
 8005cdc:	08005cf9 	.word	0x08005cf9
 8005ce0:	08005d11 	.word	0x08005d11
 8005ce4:	08005d11 	.word	0x08005d11
 8005ce8:	08005d11 	.word	0x08005d11
 8005cec:	08005d09 	.word	0x08005d09
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf6:	e0d8      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfe:	e0d4      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005d00:	2304      	movs	r3, #4
 8005d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d06:	e0d0      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d0e:	e0cc      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005d10:	2310      	movs	r3, #16
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d16:	e0c8      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a5e      	ldr	r2, [pc, #376]	; (8005e98 <UART_SetConfig+0x2d4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d125      	bne.n	8005d6e <UART_SetConfig+0x1aa>
 8005d22:	4b5b      	ldr	r3, [pc, #364]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d2c:	2b30      	cmp	r3, #48	; 0x30
 8005d2e:	d016      	beq.n	8005d5e <UART_SetConfig+0x19a>
 8005d30:	2b30      	cmp	r3, #48	; 0x30
 8005d32:	d818      	bhi.n	8005d66 <UART_SetConfig+0x1a2>
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d00a      	beq.n	8005d4e <UART_SetConfig+0x18a>
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d814      	bhi.n	8005d66 <UART_SetConfig+0x1a2>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <UART_SetConfig+0x182>
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d008      	beq.n	8005d56 <UART_SetConfig+0x192>
 8005d44:	e00f      	b.n	8005d66 <UART_SetConfig+0x1a2>
 8005d46:	2300      	movs	r3, #0
 8005d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4c:	e0ad      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d54:	e0a9      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005d56:	2304      	movs	r3, #4
 8005d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d5c:	e0a5      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005d5e:	2308      	movs	r3, #8
 8005d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d64:	e0a1      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005d66:	2310      	movs	r3, #16
 8005d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6c:	e09d      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a4a      	ldr	r2, [pc, #296]	; (8005e9c <UART_SetConfig+0x2d8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d125      	bne.n	8005dc4 <UART_SetConfig+0x200>
 8005d78:	4b45      	ldr	r3, [pc, #276]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d82:	2bc0      	cmp	r3, #192	; 0xc0
 8005d84:	d016      	beq.n	8005db4 <UART_SetConfig+0x1f0>
 8005d86:	2bc0      	cmp	r3, #192	; 0xc0
 8005d88:	d818      	bhi.n	8005dbc <UART_SetConfig+0x1f8>
 8005d8a:	2b80      	cmp	r3, #128	; 0x80
 8005d8c:	d00a      	beq.n	8005da4 <UART_SetConfig+0x1e0>
 8005d8e:	2b80      	cmp	r3, #128	; 0x80
 8005d90:	d814      	bhi.n	8005dbc <UART_SetConfig+0x1f8>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <UART_SetConfig+0x1d8>
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d008      	beq.n	8005dac <UART_SetConfig+0x1e8>
 8005d9a:	e00f      	b.n	8005dbc <UART_SetConfig+0x1f8>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da2:	e082      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005da4:	2302      	movs	r3, #2
 8005da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005daa:	e07e      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005dac:	2304      	movs	r3, #4
 8005dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db2:	e07a      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005db4:	2308      	movs	r3, #8
 8005db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dba:	e076      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc2:	e072      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a35      	ldr	r2, [pc, #212]	; (8005ea0 <UART_SetConfig+0x2dc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d12a      	bne.n	8005e24 <UART_SetConfig+0x260>
 8005dce:	4b30      	ldr	r3, [pc, #192]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ddc:	d01a      	beq.n	8005e14 <UART_SetConfig+0x250>
 8005dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de2:	d81b      	bhi.n	8005e1c <UART_SetConfig+0x258>
 8005de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005de8:	d00c      	beq.n	8005e04 <UART_SetConfig+0x240>
 8005dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dee:	d815      	bhi.n	8005e1c <UART_SetConfig+0x258>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <UART_SetConfig+0x238>
 8005df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df8:	d008      	beq.n	8005e0c <UART_SetConfig+0x248>
 8005dfa:	e00f      	b.n	8005e1c <UART_SetConfig+0x258>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e02:	e052      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005e04:	2302      	movs	r3, #2
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0a:	e04e      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e12:	e04a      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005e14:	2308      	movs	r3, #8
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e1a:	e046      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e22:	e042      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <UART_SetConfig+0x2c4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d13a      	bne.n	8005ea4 <UART_SetConfig+0x2e0>
 8005e2e:	4b18      	ldr	r3, [pc, #96]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e3c:	d01a      	beq.n	8005e74 <UART_SetConfig+0x2b0>
 8005e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e42:	d81b      	bhi.n	8005e7c <UART_SetConfig+0x2b8>
 8005e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e48:	d00c      	beq.n	8005e64 <UART_SetConfig+0x2a0>
 8005e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4e:	d815      	bhi.n	8005e7c <UART_SetConfig+0x2b8>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <UART_SetConfig+0x298>
 8005e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e58:	d008      	beq.n	8005e6c <UART_SetConfig+0x2a8>
 8005e5a:	e00f      	b.n	8005e7c <UART_SetConfig+0x2b8>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e62:	e022      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005e64:	2302      	movs	r3, #2
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6a:	e01e      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e72:	e01a      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005e74:	2308      	movs	r3, #8
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7a:	e016      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e82:	e012      	b.n	8005eaa <UART_SetConfig+0x2e6>
 8005e84:	efff69f3 	.word	0xefff69f3
 8005e88:	40008000 	.word	0x40008000
 8005e8c:	40013800 	.word	0x40013800
 8005e90:	40021000 	.word	0x40021000
 8005e94:	40004400 	.word	0x40004400
 8005e98:	40004800 	.word	0x40004800
 8005e9c:	40004c00 	.word	0x40004c00
 8005ea0:	40005000 	.word	0x40005000
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a9f      	ldr	r2, [pc, #636]	; (800612c <UART_SetConfig+0x568>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d17a      	bne.n	8005faa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d824      	bhi.n	8005f06 <UART_SetConfig+0x342>
 8005ebc:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <UART_SetConfig+0x300>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005f07 	.word	0x08005f07
 8005ecc:	08005ef1 	.word	0x08005ef1
 8005ed0:	08005f07 	.word	0x08005f07
 8005ed4:	08005ef7 	.word	0x08005ef7
 8005ed8:	08005f07 	.word	0x08005f07
 8005edc:	08005f07 	.word	0x08005f07
 8005ee0:	08005f07 	.word	0x08005f07
 8005ee4:	08005eff 	.word	0x08005eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee8:	f7fe f836 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8005eec:	61f8      	str	r0, [r7, #28]
        break;
 8005eee:	e010      	b.n	8005f12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef0:	4b8f      	ldr	r3, [pc, #572]	; (8006130 <UART_SetConfig+0x56c>)
 8005ef2:	61fb      	str	r3, [r7, #28]
        break;
 8005ef4:	e00d      	b.n	8005f12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ef6:	f7fd ff97 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8005efa:	61f8      	str	r0, [r7, #28]
        break;
 8005efc:	e009      	b.n	8005f12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f02:	61fb      	str	r3, [r7, #28]
        break;
 8005f04:	e005      	b.n	8005f12 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 80fb 	beq.w	8006110 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	4413      	add	r3, r2
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d305      	bcc.n	8005f36 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f30:	69fa      	ldr	r2, [r7, #28]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d903      	bls.n	8005f3e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f3c:	e0e8      	b.n	8006110 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	2200      	movs	r2, #0
 8005f42:	461c      	mov	r4, r3
 8005f44:	4615      	mov	r5, r2
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	022b      	lsls	r3, r5, #8
 8005f50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f54:	0222      	lsls	r2, r4, #8
 8005f56:	68f9      	ldr	r1, [r7, #12]
 8005f58:	6849      	ldr	r1, [r1, #4]
 8005f5a:	0849      	lsrs	r1, r1, #1
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	4688      	mov	r8, r1
 8005f60:	4681      	mov	r9, r0
 8005f62:	eb12 0a08 	adds.w	sl, r2, r8
 8005f66:	eb43 0b09 	adc.w	fp, r3, r9
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f78:	4650      	mov	r0, sl
 8005f7a:	4659      	mov	r1, fp
 8005f7c:	f7fa fe24 	bl	8000bc8 <__aeabi_uldivmod>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4613      	mov	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f8e:	d308      	bcc.n	8005fa2 <UART_SetConfig+0x3de>
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f96:	d204      	bcs.n	8005fa2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	60da      	str	r2, [r3, #12]
 8005fa0:	e0b6      	b.n	8006110 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fa8:	e0b2      	b.n	8006110 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb2:	d15e      	bne.n	8006072 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d828      	bhi.n	800600e <UART_SetConfig+0x44a>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0x400>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fe9 	.word	0x08005fe9
 8005fc8:	08005ff1 	.word	0x08005ff1
 8005fcc:	08005ff9 	.word	0x08005ff9
 8005fd0:	0800600f 	.word	0x0800600f
 8005fd4:	08005fff 	.word	0x08005fff
 8005fd8:	0800600f 	.word	0x0800600f
 8005fdc:	0800600f 	.word	0x0800600f
 8005fe0:	0800600f 	.word	0x0800600f
 8005fe4:	08006007 	.word	0x08006007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe8:	f7fd ffb6 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8005fec:	61f8      	str	r0, [r7, #28]
        break;
 8005fee:	e014      	b.n	800601a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff0:	f7fd ffc8 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8005ff4:	61f8      	str	r0, [r7, #28]
        break;
 8005ff6:	e010      	b.n	800601a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ff8:	4b4d      	ldr	r3, [pc, #308]	; (8006130 <UART_SetConfig+0x56c>)
 8005ffa:	61fb      	str	r3, [r7, #28]
        break;
 8005ffc:	e00d      	b.n	800601a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ffe:	f7fd ff13 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8006002:	61f8      	str	r0, [r7, #28]
        break;
 8006004:	e009      	b.n	800601a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600a:	61fb      	str	r3, [r7, #28]
        break;
 800600c:	e005      	b.n	800601a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006018:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d077      	beq.n	8006110 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	005a      	lsls	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	085b      	lsrs	r3, r3, #1
 800602a:	441a      	add	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	fbb2 f3f3 	udiv	r3, r2, r3
 8006034:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	2b0f      	cmp	r3, #15
 800603a:	d916      	bls.n	800606a <UART_SetConfig+0x4a6>
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006042:	d212      	bcs.n	800606a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	b29b      	uxth	r3, r3
 8006048:	f023 030f 	bic.w	r3, r3, #15
 800604c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	085b      	lsrs	r3, r3, #1
 8006052:	b29b      	uxth	r3, r3
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	b29a      	uxth	r2, r3
 800605a:	8afb      	ldrh	r3, [r7, #22]
 800605c:	4313      	orrs	r3, r2
 800605e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	8afa      	ldrh	r2, [r7, #22]
 8006066:	60da      	str	r2, [r3, #12]
 8006068:	e052      	b.n	8006110 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006070:	e04e      	b.n	8006110 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006076:	2b08      	cmp	r3, #8
 8006078:	d827      	bhi.n	80060ca <UART_SetConfig+0x506>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <UART_SetConfig+0x4bc>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	080060a5 	.word	0x080060a5
 8006084:	080060ad 	.word	0x080060ad
 8006088:	080060b5 	.word	0x080060b5
 800608c:	080060cb 	.word	0x080060cb
 8006090:	080060bb 	.word	0x080060bb
 8006094:	080060cb 	.word	0x080060cb
 8006098:	080060cb 	.word	0x080060cb
 800609c:	080060cb 	.word	0x080060cb
 80060a0:	080060c3 	.word	0x080060c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a4:	f7fd ff58 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 80060a8:	61f8      	str	r0, [r7, #28]
        break;
 80060aa:	e014      	b.n	80060d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ac:	f7fd ff6a 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 80060b0:	61f8      	str	r0, [r7, #28]
        break;
 80060b2:	e010      	b.n	80060d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b4:	4b1e      	ldr	r3, [pc, #120]	; (8006130 <UART_SetConfig+0x56c>)
 80060b6:	61fb      	str	r3, [r7, #28]
        break;
 80060b8:	e00d      	b.n	80060d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ba:	f7fd feb5 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 80060be:	61f8      	str	r0, [r7, #28]
        break;
 80060c0:	e009      	b.n	80060d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c6:	61fb      	str	r3, [r7, #28]
        break;
 80060c8:	e005      	b.n	80060d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060d4:	bf00      	nop
    }

    if (pclk != 0U)
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d019      	beq.n	8006110 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	085a      	lsrs	r2, r3, #1
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	441a      	add	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	2b0f      	cmp	r3, #15
 80060f4:	d909      	bls.n	800610a <UART_SetConfig+0x546>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060fc:	d205      	bcs.n	800610a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60da      	str	r2, [r3, #12]
 8006108:	e002      	b.n	8006110 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800611c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006120:	4618      	mov	r0, r3
 8006122:	3728      	adds	r7, #40	; 0x28
 8006124:	46bd      	mov	sp, r7
 8006126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800612a:	bf00      	nop
 800612c:	40008000 	.word	0x40008000
 8006130:	00f42400 	.word	0x00f42400

08006134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01a      	beq.n	800624a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006232:	d10a      	bne.n	800624a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
  }
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af02      	add	r7, sp, #8
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006288:	f7fb fd18 	bl	8001cbc <HAL_GetTick>
 800628c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b08      	cmp	r3, #8
 800629a:	d10e      	bne.n	80062ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800629c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f82d 	bl	800630a <UART_WaitOnFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e023      	b.n	8006302 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d10e      	bne.n	80062e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f817 	bl	800630a <UART_WaitOnFlagUntilTimeout>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e00d      	b.n	8006302 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b09c      	sub	sp, #112	; 0x70
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	603b      	str	r3, [r7, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631a:	e0a5      	b.n	8006468 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800631c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	f000 80a1 	beq.w	8006468 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006326:	f7fb fcc9 	bl	8001cbc <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006332:	429a      	cmp	r2, r3
 8006334:	d302      	bcc.n	800633c <UART_WaitOnFlagUntilTimeout+0x32>
 8006336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006338:	2b00      	cmp	r3, #0
 800633a:	d13e      	bne.n	80063ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800634a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800634c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006350:	667b      	str	r3, [r7, #100]	; 0x64
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800635c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006360:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e6      	bne.n	800633c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	663b      	str	r3, [r7, #96]	; 0x60
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800638e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006390:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800639c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e5      	bne.n	800636e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e067      	b.n	800648a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d04f      	beq.n	8006468 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d6:	d147      	bne.n	8006468 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
 8006402:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006408:	e841 2300 	strex	r3, r2, [r1]
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e6      	bne.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3308      	adds	r3, #8
 800641a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	613b      	str	r3, [r7, #16]
   return(result);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	66bb      	str	r3, [r7, #104]	; 0x68
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3308      	adds	r3, #8
 8006432:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006434:	623a      	str	r2, [r7, #32]
 8006436:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	69f9      	ldr	r1, [r7, #28]
 800643a:	6a3a      	ldr	r2, [r7, #32]
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	61bb      	str	r3, [r7, #24]
   return(result);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e5      	bne.n	8006414 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e010      	b.n	800648a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69da      	ldr	r2, [r3, #28]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4013      	ands	r3, r2
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	429a      	cmp	r2, r3
 8006476:	bf0c      	ite	eq
 8006478:	2301      	moveq	r3, #1
 800647a:	2300      	movne	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	461a      	mov	r2, r3
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	429a      	cmp	r2, r3
 8006484:	f43f af4a 	beq.w	800631c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3770      	adds	r7, #112	; 0x70
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006492:	b480      	push	{r7}
 8006494:	b095      	sub	sp, #84	; 0x54
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b8:	643b      	str	r3, [r7, #64]	; 0x40
 80064ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e6      	bne.n	800649a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	61fb      	str	r3, [r7, #28]
   return(result);
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f023 0301 	bic.w	r3, r3, #1
 80064e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3308      	adds	r3, #8
 80064ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e5      	bne.n	80064cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006504:	2b01      	cmp	r3, #1
 8006506:	d118      	bne.n	800653a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	60bb      	str	r3, [r7, #8]
   return(result);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f023 0310 	bic.w	r3, r3, #16
 800651c:	647b      	str	r3, [r7, #68]	; 0x44
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006526:	61bb      	str	r3, [r7, #24]
 8006528:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	6979      	ldr	r1, [r7, #20]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	613b      	str	r3, [r7, #16]
   return(result);
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e6      	bne.n	8006508 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800654c:	bf00      	nop
 800654e:	3754      	adds	r7, #84	; 0x54
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f7ff fb0e 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800657c:	bf00      	nop
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	60bb      	str	r3, [r7, #8]
   return(result);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a0:	61fb      	str	r3, [r7, #28]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6979      	ldr	r1, [r7, #20]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	613b      	str	r3, [r7, #16]
   return(result);
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e6      	bne.n	800658c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff fada 	bl	8005b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065d0:	bf00      	nop
 80065d2:	3720      	adds	r7, #32
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	881a      	ldrh	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	799b      	ldrb	r3, [r3, #6]
 80065fe:	08db      	lsrs	r3, r3, #3
 8006600:	b2db      	uxtb	r3, r3
 8006602:	b29b      	uxth	r3, r3
 8006604:	fb12 f303 	smulbb	r3, r2, r3
 8006608:	b29a      	uxth	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	889b      	ldrh	r3, [r3, #4]
 8006612:	461a      	mov	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	885b      	ldrh	r3, [r3, #2]
 8006618:	fb02 f303 	mul.w	r3, r2, r3
 800661c:	461a      	mov	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	60da      	str	r2, [r3, #12]
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	3306      	adds	r3, #6
 8006644:	2208      	movs	r2, #8
 8006646:	4619      	mov	r1, r3
 8006648:	f000 fd1c 	bl	8007084 <memcpy>
    meta->width = font[FONTX_WIDTH];
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	7b9a      	ldrb	r2, [r3, #14]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	7bda      	ldrb	r2, [r3, #15]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	7c1a      	ldrb	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	72da      	strb	r2, [r3, #11]

    return 0;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800666e:	b580      	push	{r7, lr}
 8006670:	b08e      	sub	sp, #56	; 0x38
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800667a:	f107 0314 	add.w	r3, r7, #20
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff ffd7 	bl	8006634 <fontx_meta>
 8006686:	4603      	mov	r3, r0
 8006688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 800668c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <fontx_glyph+0x2c>
        return status;
 8006694:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006698:	e077      	b.n	800678a <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 800669a:	7f7a      	ldrb	r2, [r7, #29]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 80066a0:	7fba      	ldrb	r2, [r7, #30]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80066a6:	7f7b      	ldrb	r3, [r7, #29]
 80066a8:	3307      	adds	r3, #7
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da00      	bge.n	80066b0 <fontx_glyph+0x42>
 80066ae:	3307      	adds	r3, #7
 80066b0:	10db      	asrs	r3, r3, #3
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	78da      	ldrb	r2, [r3, #3]
 80066bc:	7fbb      	ldrb	r3, [r7, #30]
 80066be:	fb12 f303 	smulbb	r3, r2, r3
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80066c8:	7ffb      	ldrb	r3, [r7, #31]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10f      	bne.n	80066ee <fontx_glyph+0x80>
        if (code < 0x100) {
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2bff      	cmp	r3, #255	; 0xff
 80066d2:	d859      	bhi.n	8006788 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	789b      	ldrb	r3, [r3, #2]
 80066d8:	461a      	mov	r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	fb02 f303 	mul.w	r3, r2, r3
 80066e0:	3311      	adds	r3, #17
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	441a      	add	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	e04d      	b.n	800678a <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3312      	adds	r3, #18
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3311      	adds	r3, #17
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8006700:	e03d      	b.n	800677e <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	3301      	adds	r3, #1
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	4413      	add	r3, r2
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	3302      	adds	r3, #2
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	3303      	adds	r3, #3
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	4413      	add	r3, r2
 8006726:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	429a      	cmp	r2, r3
 800672e:	d31c      	bcc.n	800676a <fontx_glyph+0xfc>
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	429a      	cmp	r2, r3
 8006736:	d818      	bhi.n	800676a <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006740:	4413      	add	r3, r2
 8006742:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3311      	adds	r3, #17
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	461a      	mov	r2, r3
                    nc * glyph->size
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	789b      	ldrb	r3, [r3, #2]
 8006752:	4619      	mov	r1, r3
 8006754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006756:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800675a:	4413      	add	r3, r2
 800675c:	3312      	adds	r3, #18
                glyph->buffer = &font[
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	441a      	add	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e00f      	b.n	800678a <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 800676a:	6a3a      	ldr	r2, [r7, #32]
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006772:	4413      	add	r3, r2
 8006774:	3301      	adds	r3, #1
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	3304      	adds	r3, #4
 800677c:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	1e5a      	subs	r2, r3, #1
 8006782:	633a      	str	r2, [r7, #48]	; 0x30
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1bc      	bne.n	8006702 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006788:	2301      	movs	r3, #1
 800678a:	4618      	mov	r0, r3
 800678c:	3738      	adds	r7, #56	; 0x38
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	80fb      	strh	r3, [r7, #6]
 800679e:	460b      	mov	r3, r1
 80067a0:	80bb      	strh	r3, [r7, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 80067a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067aa:	4a12      	ldr	r2, [pc, #72]	; (80067f4 <hagl_put_pixel+0x60>)
 80067ac:	8812      	ldrh	r2, [r2, #0]
 80067ae:	4293      	cmp	r3, r2
 80067b0:	db1a      	blt.n	80067e8 <hagl_put_pixel+0x54>
 80067b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80067b6:	4a0f      	ldr	r2, [pc, #60]	; (80067f4 <hagl_put_pixel+0x60>)
 80067b8:	8852      	ldrh	r2, [r2, #2]
 80067ba:	4293      	cmp	r3, r2
 80067bc:	db14      	blt.n	80067e8 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80067be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067c2:	4a0c      	ldr	r2, [pc, #48]	; (80067f4 <hagl_put_pixel+0x60>)
 80067c4:	8892      	ldrh	r2, [r2, #4]
 80067c6:	4293      	cmp	r3, r2
 80067c8:	dc10      	bgt.n	80067ec <hagl_put_pixel+0x58>
 80067ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80067ce:	4a09      	ldr	r2, [pc, #36]	; (80067f4 <hagl_put_pixel+0x60>)
 80067d0:	88d2      	ldrh	r2, [r2, #6]
 80067d2:	4293      	cmp	r3, r2
 80067d4:	dc0a      	bgt.n	80067ec <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 80067d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067da:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80067de:	887a      	ldrh	r2, [r7, #2]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fa fd99 	bl	8001318 <lcd_put_pixel>
 80067e6:	e002      	b.n	80067ee <hagl_put_pixel+0x5a>
        return;
 80067e8:	bf00      	nop
 80067ea:	e000      	b.n	80067ee <hagl_put_pixel+0x5a>
        return;
 80067ec:	bf00      	nop
}
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	2000000c 	.word	0x2000000c

080067f8 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 80067f8:	b590      	push	{r4, r7, lr}
 80067fa:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006806:	f844 0c24 	str.w	r0, [r4, #-36]
 800680a:	460c      	mov	r4, r1
 800680c:	4610      	mov	r0, r2
 800680e:	4619      	mov	r1, r3
 8006810:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006814:	4622      	mov	r2, r4
 8006816:	f823 2c26 	strh.w	r2, [r3, #-38]
 800681a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800681e:	4602      	mov	r2, r0
 8006820:	f823 2c28 	strh.w	r2, [r3, #-40]
 8006824:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006828:	460a      	mov	r2, r1
 800682a:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800682e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006832:	4619      	mov	r1, r3
 8006834:	f107 0310 	add.w	r3, r7, #16
 8006838:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff ff13 	bl	800666e <fontx_glyph>
 8006848:	4603      	mov	r3, r0
 800684a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800684e:	f102 0209 	add.w	r2, r2, #9
 8006852:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8006854:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006858:	f103 0309 	add.w	r3, r3, #9
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <hagl_put_char+0x6e>
        return 0;
 8006862:	2300      	movs	r3, #0
 8006864:	e0c9      	b.n	80069fa <hagl_put_char+0x202>
    }

    bitmap.width = glyph.width,
 8006866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800686a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800686e:	b29a      	uxth	r2, r3
 8006870:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006874:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8006878:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800687c:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8006880:	b29a      	uxth	r2, r3
 8006882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006886:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 800688a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800688e:	2210      	movs	r2, #16
 8006890:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8006894:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006898:	3a08      	subs	r2, #8
 800689a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800689e:	3b18      	subs	r3, #24
 80068a0:	4611      	mov	r1, r2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff fea2 	bl	80065ec <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80068a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068ac:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80068b0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80068b4:	f102 020c 	add.w	r2, r2, #12
 80068b8:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 80068ba:	2300      	movs	r3, #0
 80068bc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80068c0:	f102 020b 	add.w	r2, r2, #11
 80068c4:	7013      	strb	r3, [r2, #0]
 80068c6:	e079      	b.n	80069bc <hagl_put_char+0x1c4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80068c8:	2300      	movs	r3, #0
 80068ca:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80068ce:	f102 020a 	add.w	r2, r2, #10
 80068d2:	7013      	strb	r3, [r2, #0]
 80068d4:	e04f      	b.n	8006976 <hagl_put_char+0x17e>
            set = *(glyph.buffer + x / 8) & (0x80 >> (x % 8));
 80068d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068da:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80068de:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80068e2:	f102 020a 	add.w	r2, r2, #10
 80068e6:	7812      	ldrb	r2, [r2, #0]
 80068e8:	08d2      	lsrs	r2, r2, #3
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	4413      	add	r3, r2
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	b25a      	sxtb	r2, r3
 80068f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80068f6:	f103 030a 	add.w	r3, r3, #10
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	2180      	movs	r1, #128	; 0x80
 8006902:	fa41 f303 	asr.w	r3, r1, r3
 8006906:	b25b      	sxtb	r3, r3
 8006908:	4013      	ands	r3, r2
 800690a:	b25b      	sxtb	r3, r3
 800690c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006910:	f102 0208 	add.w	r2, r2, #8
 8006914:	7013      	strb	r3, [r2, #0]
            if (set) {
 8006916:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800691a:	f103 0308 	add.w	r3, r3, #8
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d010      	beq.n	8006946 <hagl_put_char+0x14e>
                *(ptr++) = color;
 8006924:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006928:	f103 030c 	add.w	r3, r3, #12
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	1c9a      	adds	r2, r3, #2
 8006930:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8006934:	f101 010c 	add.w	r1, r1, #12
 8006938:	600a      	str	r2, [r1, #0]
 800693a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800693e:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8006942:	801a      	strh	r2, [r3, #0]
 8006944:	e00c      	b.n	8006960 <hagl_put_char+0x168>
            } else {
                *(ptr++) = 0x0000;
 8006946:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800694a:	f103 030c 	add.w	r3, r3, #12
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	1c9a      	adds	r2, r3, #2
 8006952:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8006956:	f101 010c 	add.w	r1, r1, #12
 800695a:	600a      	str	r2, [r1, #0]
 800695c:	2200      	movs	r2, #0
 800695e:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006960:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006964:	f103 030a 	add.w	r3, r3, #10
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	3301      	adds	r3, #1
 800696c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006970:	f102 020a 	add.w	r2, r2, #10
 8006974:	7013      	strb	r3, [r2, #0]
 8006976:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800697a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800697e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006982:	f102 020a 	add.w	r2, r2, #10
 8006986:	7812      	ldrb	r2, [r2, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d3a4      	bcc.n	80068d6 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 800698c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006990:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006994:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006998:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 800699c:	4413      	add	r3, r2
 800699e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80069a2:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80069a6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80069aa:	f103 030b 	add.w	r3, r3, #11
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	3301      	adds	r3, #1
 80069b2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80069b6:	f102 020b 	add.w	r2, r2, #11
 80069ba:	7013      	strb	r3, [r2, #0]
 80069bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069c0:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80069c4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80069c8:	f102 020b 	add.w	r2, r2, #11
 80069cc:	7812      	ldrb	r2, [r2, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	f4ff af7a 	bcc.w	80068c8 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 80069d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069d8:	3b18      	subs	r3, #24
 80069da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80069de:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 80069e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80069e6:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 80069ea:	461a      	mov	r2, r3
 80069ec:	f000 f85a 	bl	8006aa4 <hagl_blit>

    return bitmap.width;
 80069f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069f4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80069f8:	b2db      	uxtb	r3, r3
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd90      	pop	{r4, r7, pc}

08006a06 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b08c      	sub	sp, #48	; 0x30
 8006a0a:	af02      	add	r7, sp, #8
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	4608      	mov	r0, r1
 8006a10:	4611      	mov	r1, r2
 8006a12:	461a      	mov	r2, r3
 8006a14:	4603      	mov	r3, r0
 8006a16:	817b      	strh	r3, [r7, #10]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	813b      	strh	r3, [r7, #8]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8006a20:	897b      	ldrh	r3, [r7, #10]
 8006a22:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006a24:	f107 0314 	add.w	r3, r7, #20
 8006a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fe02 	bl	8006634 <fontx_meta>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8006a36:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <hagl_put_text+0x3c>
        return 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e02c      	b.n	8006a9c <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1d1a      	adds	r2, r3, #4
 8006a46:	60fa      	str	r2, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	2b0d      	cmp	r3, #13
 8006a50:	d002      	beq.n	8006a58 <hagl_put_text+0x52>
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	2b0a      	cmp	r3, #10
 8006a56:	d108      	bne.n	8006a6a <hagl_put_text+0x64>
            x0 = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8006a5c:	7fbb      	ldrb	r3, [r7, #30]
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	893b      	ldrh	r3, [r7, #8]
 8006a62:	4413      	add	r3, r2
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	813b      	strh	r3, [r7, #8]
 8006a68:	e010      	b.n	8006a8c <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8006a6a:	88f8      	ldrh	r0, [r7, #6]
 8006a6c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006a70:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	4603      	mov	r3, r0
 8006a7a:	6a38      	ldr	r0, [r7, #32]
 8006a7c:	f7ff febc 	bl	80067f8 <hagl_put_char>
 8006a80:	4603      	mov	r3, r0
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	897b      	ldrh	r3, [r7, #10]
 8006a86:	4413      	add	r3, r2
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1d6      	bne.n	8006a42 <hagl_put_text+0x3c>

    return x0 - original;
 8006a94:	897a      	ldrh	r2, [r7, #10]
 8006a96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	b29b      	uxth	r3, r3
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3728      	adds	r7, #40	; 0x28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	603a      	str	r2, [r7, #0]
 8006aae:	80fb      	strh	r3, [r7, #6]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8006aba:	2300      	movs	r3, #0
 8006abc:	827b      	strh	r3, [r7, #18]
 8006abe:	e020      	b.n	8006b02 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	823b      	strh	r3, [r7, #16]
 8006ac4:	e015      	b.n	8006af2 <hagl_blit+0x4e>
            color = *(ptr++);
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	1c9a      	adds	r2, r3, #2
 8006aca:	617a      	str	r2, [r7, #20]
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8006ad0:	88fa      	ldrh	r2, [r7, #6]
 8006ad2:	8a3b      	ldrh	r3, [r7, #16]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	b218      	sxth	r0, r3
 8006ada:	88ba      	ldrh	r2, [r7, #4]
 8006adc:	8a7b      	ldrh	r3, [r7, #18]
 8006ade:	4413      	add	r3, r2
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	b21b      	sxth	r3, r3
 8006ae4:	89fa      	ldrh	r2, [r7, #14]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	f7ff fe54 	bl	8006794 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8006aec:	8a3b      	ldrh	r3, [r7, #16]
 8006aee:	3301      	adds	r3, #1
 8006af0:	823b      	strh	r3, [r7, #16]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	8a3a      	ldrh	r2, [r7, #16]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d3e4      	bcc.n	8006ac6 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8006afc:	8a7b      	ldrh	r3, [r7, #18]
 8006afe:	3301      	adds	r3, #1
 8006b00:	827b      	strh	r3, [r7, #18]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	885b      	ldrh	r3, [r3, #2]
 8006b06:	8a7a      	ldrh	r2, [r7, #18]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d3d9      	bcc.n	8006ac0 <hagl_blit+0x1c>
        }
    }
#endif
};
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <gcvt>:
 8006b18:	b530      	push	{r4, r5, lr}
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	460c      	mov	r4, r1
 8006b20:	4605      	mov	r5, r0
 8006b22:	2300      	movs	r3, #0
 8006b24:	ec51 0b10 	vmov	r0, r1, d0
 8006b28:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b2c:	f7f9 ffe6 	bl	8000afc <__aeabi_dcmplt>
 8006b30:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006b34:	4622      	mov	r2, r4
 8006b36:	b118      	cbz	r0, 8006b40 <gcvt+0x28>
 8006b38:	232d      	movs	r3, #45	; 0x2d
 8006b3a:	f802 3b01 	strb.w	r3, [r2], #1
 8006b3e:	3d01      	subs	r5, #1
 8006b40:	2300      	movs	r3, #0
 8006b42:	4806      	ldr	r0, [pc, #24]	; (8006b5c <gcvt+0x44>)
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	4629      	mov	r1, r5
 8006b48:	2367      	movs	r3, #103	; 0x67
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	f002 f8c0 	bl	8008cd0 <_gcvt>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	bf14      	ite	ne
 8006b54:	4620      	movne	r0, r4
 8006b56:	2000      	moveq	r0, #0
 8006b58:	b005      	add	sp, #20
 8006b5a:	bd30      	pop	{r4, r5, pc}
 8006b5c:	20000014 	.word	0x20000014

08006b60 <__errno>:
 8006b60:	4b01      	ldr	r3, [pc, #4]	; (8006b68 <__errno+0x8>)
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000014 	.word	0x20000014

08006b6c <__sflush_r>:
 8006b6c:	898a      	ldrh	r2, [r1, #12]
 8006b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b72:	4605      	mov	r5, r0
 8006b74:	0710      	lsls	r0, r2, #28
 8006b76:	460c      	mov	r4, r1
 8006b78:	d458      	bmi.n	8006c2c <__sflush_r+0xc0>
 8006b7a:	684b      	ldr	r3, [r1, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	dc05      	bgt.n	8006b8c <__sflush_r+0x20>
 8006b80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dc02      	bgt.n	8006b8c <__sflush_r+0x20>
 8006b86:	2000      	movs	r0, #0
 8006b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b8e:	2e00      	cmp	r6, #0
 8006b90:	d0f9      	beq.n	8006b86 <__sflush_r+0x1a>
 8006b92:	2300      	movs	r3, #0
 8006b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b98:	682f      	ldr	r7, [r5, #0]
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	d032      	beq.n	8006c04 <__sflush_r+0x98>
 8006b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	075a      	lsls	r2, r3, #29
 8006ba4:	d505      	bpl.n	8006bb2 <__sflush_r+0x46>
 8006ba6:	6863      	ldr	r3, [r4, #4]
 8006ba8:	1ac0      	subs	r0, r0, r3
 8006baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bac:	b10b      	cbz	r3, 8006bb2 <__sflush_r+0x46>
 8006bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bb0:	1ac0      	subs	r0, r0, r3
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bb8:	6a21      	ldr	r1, [r4, #32]
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b0      	blx	r6
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	d106      	bne.n	8006bd2 <__sflush_r+0x66>
 8006bc4:	6829      	ldr	r1, [r5, #0]
 8006bc6:	291d      	cmp	r1, #29
 8006bc8:	d82c      	bhi.n	8006c24 <__sflush_r+0xb8>
 8006bca:	4a2a      	ldr	r2, [pc, #168]	; (8006c74 <__sflush_r+0x108>)
 8006bcc:	40ca      	lsrs	r2, r1
 8006bce:	07d6      	lsls	r6, r2, #31
 8006bd0:	d528      	bpl.n	8006c24 <__sflush_r+0xb8>
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	6062      	str	r2, [r4, #4]
 8006bd6:	04d9      	lsls	r1, r3, #19
 8006bd8:	6922      	ldr	r2, [r4, #16]
 8006bda:	6022      	str	r2, [r4, #0]
 8006bdc:	d504      	bpl.n	8006be8 <__sflush_r+0x7c>
 8006bde:	1c42      	adds	r2, r0, #1
 8006be0:	d101      	bne.n	8006be6 <__sflush_r+0x7a>
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	b903      	cbnz	r3, 8006be8 <__sflush_r+0x7c>
 8006be6:	6560      	str	r0, [r4, #84]	; 0x54
 8006be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bea:	602f      	str	r7, [r5, #0]
 8006bec:	2900      	cmp	r1, #0
 8006bee:	d0ca      	beq.n	8006b86 <__sflush_r+0x1a>
 8006bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bf4:	4299      	cmp	r1, r3
 8006bf6:	d002      	beq.n	8006bfe <__sflush_r+0x92>
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 fa59 	bl	80070b0 <_free_r>
 8006bfe:	2000      	movs	r0, #0
 8006c00:	6360      	str	r0, [r4, #52]	; 0x34
 8006c02:	e7c1      	b.n	8006b88 <__sflush_r+0x1c>
 8006c04:	6a21      	ldr	r1, [r4, #32]
 8006c06:	2301      	movs	r3, #1
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b0      	blx	r6
 8006c0c:	1c41      	adds	r1, r0, #1
 8006c0e:	d1c7      	bne.n	8006ba0 <__sflush_r+0x34>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0c4      	beq.n	8006ba0 <__sflush_r+0x34>
 8006c16:	2b1d      	cmp	r3, #29
 8006c18:	d001      	beq.n	8006c1e <__sflush_r+0xb2>
 8006c1a:	2b16      	cmp	r3, #22
 8006c1c:	d101      	bne.n	8006c22 <__sflush_r+0xb6>
 8006c1e:	602f      	str	r7, [r5, #0]
 8006c20:	e7b1      	b.n	8006b86 <__sflush_r+0x1a>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	e7ad      	b.n	8006b88 <__sflush_r+0x1c>
 8006c2c:	690f      	ldr	r7, [r1, #16]
 8006c2e:	2f00      	cmp	r7, #0
 8006c30:	d0a9      	beq.n	8006b86 <__sflush_r+0x1a>
 8006c32:	0793      	lsls	r3, r2, #30
 8006c34:	680e      	ldr	r6, [r1, #0]
 8006c36:	bf08      	it	eq
 8006c38:	694b      	ldreq	r3, [r1, #20]
 8006c3a:	600f      	str	r7, [r1, #0]
 8006c3c:	bf18      	it	ne
 8006c3e:	2300      	movne	r3, #0
 8006c40:	eba6 0807 	sub.w	r8, r6, r7
 8006c44:	608b      	str	r3, [r1, #8]
 8006c46:	f1b8 0f00 	cmp.w	r8, #0
 8006c4a:	dd9c      	ble.n	8006b86 <__sflush_r+0x1a>
 8006c4c:	6a21      	ldr	r1, [r4, #32]
 8006c4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c50:	4643      	mov	r3, r8
 8006c52:	463a      	mov	r2, r7
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b0      	blx	r6
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	dc06      	bgt.n	8006c6a <__sflush_r+0xfe>
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	e78e      	b.n	8006b88 <__sflush_r+0x1c>
 8006c6a:	4407      	add	r7, r0
 8006c6c:	eba8 0800 	sub.w	r8, r8, r0
 8006c70:	e7e9      	b.n	8006c46 <__sflush_r+0xda>
 8006c72:	bf00      	nop
 8006c74:	20400001 	.word	0x20400001

08006c78 <_fflush_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	690b      	ldr	r3, [r1, #16]
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	b913      	cbnz	r3, 8006c88 <_fflush_r+0x10>
 8006c82:	2500      	movs	r5, #0
 8006c84:	4628      	mov	r0, r5
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	b118      	cbz	r0, 8006c92 <_fflush_r+0x1a>
 8006c8a:	6983      	ldr	r3, [r0, #24]
 8006c8c:	b90b      	cbnz	r3, 8006c92 <_fflush_r+0x1a>
 8006c8e:	f000 f887 	bl	8006da0 <__sinit>
 8006c92:	4b14      	ldr	r3, [pc, #80]	; (8006ce4 <_fflush_r+0x6c>)
 8006c94:	429c      	cmp	r4, r3
 8006c96:	d11b      	bne.n	8006cd0 <_fflush_r+0x58>
 8006c98:	686c      	ldr	r4, [r5, #4]
 8006c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0ef      	beq.n	8006c82 <_fflush_r+0xa>
 8006ca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ca4:	07d0      	lsls	r0, r2, #31
 8006ca6:	d404      	bmi.n	8006cb2 <_fflush_r+0x3a>
 8006ca8:	0599      	lsls	r1, r3, #22
 8006caa:	d402      	bmi.n	8006cb2 <_fflush_r+0x3a>
 8006cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cae:	f000 f962 	bl	8006f76 <__retarget_lock_acquire_recursive>
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	f7ff ff59 	bl	8006b6c <__sflush_r>
 8006cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cbc:	07da      	lsls	r2, r3, #31
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	d4e0      	bmi.n	8006c84 <_fflush_r+0xc>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	059b      	lsls	r3, r3, #22
 8006cc6:	d4dd      	bmi.n	8006c84 <_fflush_r+0xc>
 8006cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cca:	f000 f955 	bl	8006f78 <__retarget_lock_release_recursive>
 8006cce:	e7d9      	b.n	8006c84 <_fflush_r+0xc>
 8006cd0:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <_fflush_r+0x70>)
 8006cd2:	429c      	cmp	r4, r3
 8006cd4:	d101      	bne.n	8006cda <_fflush_r+0x62>
 8006cd6:	68ac      	ldr	r4, [r5, #8]
 8006cd8:	e7df      	b.n	8006c9a <_fflush_r+0x22>
 8006cda:	4b04      	ldr	r3, [pc, #16]	; (8006cec <_fflush_r+0x74>)
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	bf08      	it	eq
 8006ce0:	68ec      	ldreq	r4, [r5, #12]
 8006ce2:	e7da      	b.n	8006c9a <_fflush_r+0x22>
 8006ce4:	0800cb54 	.word	0x0800cb54
 8006ce8:	0800cb74 	.word	0x0800cb74
 8006cec:	0800cb34 	.word	0x0800cb34

08006cf0 <std>:
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cfe:	6083      	str	r3, [r0, #8]
 8006d00:	8181      	strh	r1, [r0, #12]
 8006d02:	6643      	str	r3, [r0, #100]	; 0x64
 8006d04:	81c2      	strh	r2, [r0, #14]
 8006d06:	6183      	str	r3, [r0, #24]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	2208      	movs	r2, #8
 8006d0c:	305c      	adds	r0, #92	; 0x5c
 8006d0e:	f000 f9c7 	bl	80070a0 <memset>
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <std+0x38>)
 8006d14:	6263      	str	r3, [r4, #36]	; 0x24
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <std+0x3c>)
 8006d18:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <std+0x40>)
 8006d1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <std+0x44>)
 8006d20:	6224      	str	r4, [r4, #32]
 8006d22:	6323      	str	r3, [r4, #48]	; 0x30
 8006d24:	bd10      	pop	{r4, pc}
 8006d26:	bf00      	nop
 8006d28:	08007c81 	.word	0x08007c81
 8006d2c:	08007ca3 	.word	0x08007ca3
 8006d30:	08007cdb 	.word	0x08007cdb
 8006d34:	08007cff 	.word	0x08007cff

08006d38 <_cleanup_r>:
 8006d38:	4901      	ldr	r1, [pc, #4]	; (8006d40 <_cleanup_r+0x8>)
 8006d3a:	f000 b8af 	b.w	8006e9c <_fwalk_reent>
 8006d3e:	bf00      	nop
 8006d40:	08006c79 	.word	0x08006c79

08006d44 <__sfmoreglue>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	2268      	movs	r2, #104	; 0x68
 8006d48:	1e4d      	subs	r5, r1, #1
 8006d4a:	4355      	muls	r5, r2
 8006d4c:	460e      	mov	r6, r1
 8006d4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d52:	f000 fa19 	bl	8007188 <_malloc_r>
 8006d56:	4604      	mov	r4, r0
 8006d58:	b140      	cbz	r0, 8006d6c <__sfmoreglue+0x28>
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d60:	300c      	adds	r0, #12
 8006d62:	60a0      	str	r0, [r4, #8]
 8006d64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d68:	f000 f99a 	bl	80070a0 <memset>
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}

08006d70 <__sfp_lock_acquire>:
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <__sfp_lock_acquire+0x8>)
 8006d72:	f000 b900 	b.w	8006f76 <__retarget_lock_acquire_recursive>
 8006d76:	bf00      	nop
 8006d78:	2000a38d 	.word	0x2000a38d

08006d7c <__sfp_lock_release>:
 8006d7c:	4801      	ldr	r0, [pc, #4]	; (8006d84 <__sfp_lock_release+0x8>)
 8006d7e:	f000 b8fb 	b.w	8006f78 <__retarget_lock_release_recursive>
 8006d82:	bf00      	nop
 8006d84:	2000a38d 	.word	0x2000a38d

08006d88 <__sinit_lock_acquire>:
 8006d88:	4801      	ldr	r0, [pc, #4]	; (8006d90 <__sinit_lock_acquire+0x8>)
 8006d8a:	f000 b8f4 	b.w	8006f76 <__retarget_lock_acquire_recursive>
 8006d8e:	bf00      	nop
 8006d90:	2000a38e 	.word	0x2000a38e

08006d94 <__sinit_lock_release>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__sinit_lock_release+0x8>)
 8006d96:	f000 b8ef 	b.w	8006f78 <__retarget_lock_release_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	2000a38e 	.word	0x2000a38e

08006da0 <__sinit>:
 8006da0:	b510      	push	{r4, lr}
 8006da2:	4604      	mov	r4, r0
 8006da4:	f7ff fff0 	bl	8006d88 <__sinit_lock_acquire>
 8006da8:	69a3      	ldr	r3, [r4, #24]
 8006daa:	b11b      	cbz	r3, 8006db4 <__sinit+0x14>
 8006dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db0:	f7ff bff0 	b.w	8006d94 <__sinit_lock_release>
 8006db4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006db8:	6523      	str	r3, [r4, #80]	; 0x50
 8006dba:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <__sinit+0x68>)
 8006dbc:	4a13      	ldr	r2, [pc, #76]	; (8006e0c <__sinit+0x6c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	bf04      	itt	eq
 8006dc6:	2301      	moveq	r3, #1
 8006dc8:	61a3      	streq	r3, [r4, #24]
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f000 f820 	bl	8006e10 <__sfp>
 8006dd0:	6060      	str	r0, [r4, #4]
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 f81c 	bl	8006e10 <__sfp>
 8006dd8:	60a0      	str	r0, [r4, #8]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 f818 	bl	8006e10 <__sfp>
 8006de0:	2200      	movs	r2, #0
 8006de2:	60e0      	str	r0, [r4, #12]
 8006de4:	2104      	movs	r1, #4
 8006de6:	6860      	ldr	r0, [r4, #4]
 8006de8:	f7ff ff82 	bl	8006cf0 <std>
 8006dec:	68a0      	ldr	r0, [r4, #8]
 8006dee:	2201      	movs	r2, #1
 8006df0:	2109      	movs	r1, #9
 8006df2:	f7ff ff7d 	bl	8006cf0 <std>
 8006df6:	68e0      	ldr	r0, [r4, #12]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	2112      	movs	r1, #18
 8006dfc:	f7ff ff78 	bl	8006cf0 <std>
 8006e00:	2301      	movs	r3, #1
 8006e02:	61a3      	str	r3, [r4, #24]
 8006e04:	e7d2      	b.n	8006dac <__sinit+0xc>
 8006e06:	bf00      	nop
 8006e08:	0800cb94 	.word	0x0800cb94
 8006e0c:	08006d39 	.word	0x08006d39

08006e10 <__sfp>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	4607      	mov	r7, r0
 8006e14:	f7ff ffac 	bl	8006d70 <__sfp_lock_acquire>
 8006e18:	4b1e      	ldr	r3, [pc, #120]	; (8006e94 <__sfp+0x84>)
 8006e1a:	681e      	ldr	r6, [r3, #0]
 8006e1c:	69b3      	ldr	r3, [r6, #24]
 8006e1e:	b913      	cbnz	r3, 8006e26 <__sfp+0x16>
 8006e20:	4630      	mov	r0, r6
 8006e22:	f7ff ffbd 	bl	8006da0 <__sinit>
 8006e26:	3648      	adds	r6, #72	; 0x48
 8006e28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	d503      	bpl.n	8006e38 <__sfp+0x28>
 8006e30:	6833      	ldr	r3, [r6, #0]
 8006e32:	b30b      	cbz	r3, 8006e78 <__sfp+0x68>
 8006e34:	6836      	ldr	r6, [r6, #0]
 8006e36:	e7f7      	b.n	8006e28 <__sfp+0x18>
 8006e38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e3c:	b9d5      	cbnz	r5, 8006e74 <__sfp+0x64>
 8006e3e:	4b16      	ldr	r3, [pc, #88]	; (8006e98 <__sfp+0x88>)
 8006e40:	60e3      	str	r3, [r4, #12]
 8006e42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e46:	6665      	str	r5, [r4, #100]	; 0x64
 8006e48:	f000 f894 	bl	8006f74 <__retarget_lock_init_recursive>
 8006e4c:	f7ff ff96 	bl	8006d7c <__sfp_lock_release>
 8006e50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e58:	6025      	str	r5, [r4, #0]
 8006e5a:	61a5      	str	r5, [r4, #24]
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e64:	f000 f91c 	bl	80070a0 <memset>
 8006e68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e70:	4620      	mov	r0, r4
 8006e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e74:	3468      	adds	r4, #104	; 0x68
 8006e76:	e7d9      	b.n	8006e2c <__sfp+0x1c>
 8006e78:	2104      	movs	r1, #4
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	f7ff ff62 	bl	8006d44 <__sfmoreglue>
 8006e80:	4604      	mov	r4, r0
 8006e82:	6030      	str	r0, [r6, #0]
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d1d5      	bne.n	8006e34 <__sfp+0x24>
 8006e88:	f7ff ff78 	bl	8006d7c <__sfp_lock_release>
 8006e8c:	230c      	movs	r3, #12
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	e7ee      	b.n	8006e70 <__sfp+0x60>
 8006e92:	bf00      	nop
 8006e94:	0800cb94 	.word	0x0800cb94
 8006e98:	ffff0001 	.word	0xffff0001

08006e9c <_fwalk_reent>:
 8006e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	4688      	mov	r8, r1
 8006ea4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ea8:	2700      	movs	r7, #0
 8006eaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eae:	f1b9 0901 	subs.w	r9, r9, #1
 8006eb2:	d505      	bpl.n	8006ec0 <_fwalk_reent+0x24>
 8006eb4:	6824      	ldr	r4, [r4, #0]
 8006eb6:	2c00      	cmp	r4, #0
 8006eb8:	d1f7      	bne.n	8006eaa <_fwalk_reent+0xe>
 8006eba:	4638      	mov	r0, r7
 8006ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec0:	89ab      	ldrh	r3, [r5, #12]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d907      	bls.n	8006ed6 <_fwalk_reent+0x3a>
 8006ec6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	d003      	beq.n	8006ed6 <_fwalk_reent+0x3a>
 8006ece:	4629      	mov	r1, r5
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	47c0      	blx	r8
 8006ed4:	4307      	orrs	r7, r0
 8006ed6:	3568      	adds	r5, #104	; 0x68
 8006ed8:	e7e9      	b.n	8006eae <_fwalk_reent+0x12>
	...

08006edc <__libc_init_array>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	4d0d      	ldr	r5, [pc, #52]	; (8006f14 <__libc_init_array+0x38>)
 8006ee0:	4c0d      	ldr	r4, [pc, #52]	; (8006f18 <__libc_init_array+0x3c>)
 8006ee2:	1b64      	subs	r4, r4, r5
 8006ee4:	10a4      	asrs	r4, r4, #2
 8006ee6:	2600      	movs	r6, #0
 8006ee8:	42a6      	cmp	r6, r4
 8006eea:	d109      	bne.n	8006f00 <__libc_init_array+0x24>
 8006eec:	4d0b      	ldr	r5, [pc, #44]	; (8006f1c <__libc_init_array+0x40>)
 8006eee:	4c0c      	ldr	r4, [pc, #48]	; (8006f20 <__libc_init_array+0x44>)
 8006ef0:	f002 fda2 	bl	8009a38 <_init>
 8006ef4:	1b64      	subs	r4, r4, r5
 8006ef6:	10a4      	asrs	r4, r4, #2
 8006ef8:	2600      	movs	r6, #0
 8006efa:	42a6      	cmp	r6, r4
 8006efc:	d105      	bne.n	8006f0a <__libc_init_array+0x2e>
 8006efe:	bd70      	pop	{r4, r5, r6, pc}
 8006f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f04:	4798      	blx	r3
 8006f06:	3601      	adds	r6, #1
 8006f08:	e7ee      	b.n	8006ee8 <__libc_init_array+0xc>
 8006f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0e:	4798      	blx	r3
 8006f10:	3601      	adds	r6, #1
 8006f12:	e7f2      	b.n	8006efa <__libc_init_array+0x1e>
 8006f14:	0800cf1c 	.word	0x0800cf1c
 8006f18:	0800cf1c 	.word	0x0800cf1c
 8006f1c:	0800cf1c 	.word	0x0800cf1c
 8006f20:	0800cf20 	.word	0x0800cf20

08006f24 <_setlocale_r>:
 8006f24:	b510      	push	{r4, lr}
 8006f26:	4614      	mov	r4, r2
 8006f28:	b90a      	cbnz	r2, 8006f2e <_setlocale_r+0xa>
 8006f2a:	480b      	ldr	r0, [pc, #44]	; (8006f58 <_setlocale_r+0x34>)
 8006f2c:	bd10      	pop	{r4, pc}
 8006f2e:	490b      	ldr	r1, [pc, #44]	; (8006f5c <_setlocale_r+0x38>)
 8006f30:	4610      	mov	r0, r2
 8006f32:	f7f9 f94d 	bl	80001d0 <strcmp>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d0f7      	beq.n	8006f2a <_setlocale_r+0x6>
 8006f3a:	4907      	ldr	r1, [pc, #28]	; (8006f58 <_setlocale_r+0x34>)
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f7f9 f947 	bl	80001d0 <strcmp>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d0f1      	beq.n	8006f2a <_setlocale_r+0x6>
 8006f46:	4906      	ldr	r1, [pc, #24]	; (8006f60 <_setlocale_r+0x3c>)
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f7f9 f941 	bl	80001d0 <strcmp>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d0eb      	beq.n	8006f2a <_setlocale_r+0x6>
 8006f52:	2000      	movs	r0, #0
 8006f54:	e7ea      	b.n	8006f2c <_setlocale_r+0x8>
 8006f56:	bf00      	nop
 8006f58:	0800cb98 	.word	0x0800cb98
 8006f5c:	0800cb9a 	.word	0x0800cb9a
 8006f60:	0800cf10 	.word	0x0800cf10

08006f64 <setlocale>:
 8006f64:	4b02      	ldr	r3, [pc, #8]	; (8006f70 <setlocale+0xc>)
 8006f66:	460a      	mov	r2, r1
 8006f68:	4601      	mov	r1, r0
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	f7ff bfda 	b.w	8006f24 <_setlocale_r>
 8006f70:	20000014 	.word	0x20000014

08006f74 <__retarget_lock_init_recursive>:
 8006f74:	4770      	bx	lr

08006f76 <__retarget_lock_acquire_recursive>:
 8006f76:	4770      	bx	lr

08006f78 <__retarget_lock_release_recursive>:
 8006f78:	4770      	bx	lr

08006f7a <__swhatbuf_r>:
 8006f7a:	b570      	push	{r4, r5, r6, lr}
 8006f7c:	460e      	mov	r6, r1
 8006f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f82:	2900      	cmp	r1, #0
 8006f84:	b096      	sub	sp, #88	; 0x58
 8006f86:	4614      	mov	r4, r2
 8006f88:	461d      	mov	r5, r3
 8006f8a:	da08      	bge.n	8006f9e <__swhatbuf_r+0x24>
 8006f8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	602a      	str	r2, [r5, #0]
 8006f94:	061a      	lsls	r2, r3, #24
 8006f96:	d410      	bmi.n	8006fba <__swhatbuf_r+0x40>
 8006f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f9c:	e00e      	b.n	8006fbc <__swhatbuf_r+0x42>
 8006f9e:	466a      	mov	r2, sp
 8006fa0:	f001 ff56 	bl	8008e50 <_fstat_r>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	dbf1      	blt.n	8006f8c <__swhatbuf_r+0x12>
 8006fa8:	9a01      	ldr	r2, [sp, #4]
 8006faa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fb2:	425a      	negs	r2, r3
 8006fb4:	415a      	adcs	r2, r3
 8006fb6:	602a      	str	r2, [r5, #0]
 8006fb8:	e7ee      	b.n	8006f98 <__swhatbuf_r+0x1e>
 8006fba:	2340      	movs	r3, #64	; 0x40
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	b016      	add	sp, #88	; 0x58
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}

08006fc4 <__smakebuf_r>:
 8006fc4:	898b      	ldrh	r3, [r1, #12]
 8006fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fc8:	079d      	lsls	r5, r3, #30
 8006fca:	4606      	mov	r6, r0
 8006fcc:	460c      	mov	r4, r1
 8006fce:	d507      	bpl.n	8006fe0 <__smakebuf_r+0x1c>
 8006fd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	2301      	movs	r3, #1
 8006fda:	6163      	str	r3, [r4, #20]
 8006fdc:	b002      	add	sp, #8
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	ab01      	add	r3, sp, #4
 8006fe2:	466a      	mov	r2, sp
 8006fe4:	f7ff ffc9 	bl	8006f7a <__swhatbuf_r>
 8006fe8:	9900      	ldr	r1, [sp, #0]
 8006fea:	4605      	mov	r5, r0
 8006fec:	4630      	mov	r0, r6
 8006fee:	f000 f8cb 	bl	8007188 <_malloc_r>
 8006ff2:	b948      	cbnz	r0, 8007008 <__smakebuf_r+0x44>
 8006ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff8:	059a      	lsls	r2, r3, #22
 8006ffa:	d4ef      	bmi.n	8006fdc <__smakebuf_r+0x18>
 8006ffc:	f023 0303 	bic.w	r3, r3, #3
 8007000:	f043 0302 	orr.w	r3, r3, #2
 8007004:	81a3      	strh	r3, [r4, #12]
 8007006:	e7e3      	b.n	8006fd0 <__smakebuf_r+0xc>
 8007008:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <__smakebuf_r+0x7c>)
 800700a:	62b3      	str	r3, [r6, #40]	; 0x28
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	6020      	str	r0, [r4, #0]
 8007010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007014:	81a3      	strh	r3, [r4, #12]
 8007016:	9b00      	ldr	r3, [sp, #0]
 8007018:	6163      	str	r3, [r4, #20]
 800701a:	9b01      	ldr	r3, [sp, #4]
 800701c:	6120      	str	r0, [r4, #16]
 800701e:	b15b      	cbz	r3, 8007038 <__smakebuf_r+0x74>
 8007020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007024:	4630      	mov	r0, r6
 8007026:	f001 ff25 	bl	8008e74 <_isatty_r>
 800702a:	b128      	cbz	r0, 8007038 <__smakebuf_r+0x74>
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	f023 0303 	bic.w	r3, r3, #3
 8007032:	f043 0301 	orr.w	r3, r3, #1
 8007036:	81a3      	strh	r3, [r4, #12]
 8007038:	89a0      	ldrh	r0, [r4, #12]
 800703a:	4305      	orrs	r5, r0
 800703c:	81a5      	strh	r5, [r4, #12]
 800703e:	e7cd      	b.n	8006fdc <__smakebuf_r+0x18>
 8007040:	08006d39 	.word	0x08006d39

08007044 <mbstowcs>:
 8007044:	b510      	push	{r4, lr}
 8007046:	4603      	mov	r3, r0
 8007048:	b142      	cbz	r2, 800705c <mbstowcs+0x18>
 800704a:	2000      	movs	r0, #0
 800704c:	5c0c      	ldrb	r4, [r1, r0]
 800704e:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
 8007052:	b114      	cbz	r4, 800705a <mbstowcs+0x16>
 8007054:	3001      	adds	r0, #1
 8007056:	4290      	cmp	r0, r2
 8007058:	d1f8      	bne.n	800704c <mbstowcs+0x8>
 800705a:	bd10      	pop	{r4, pc}
 800705c:	4610      	mov	r0, r2
 800705e:	e7fc      	b.n	800705a <mbstowcs+0x16>

08007060 <__ascii_mbtowc>:
 8007060:	b082      	sub	sp, #8
 8007062:	b901      	cbnz	r1, 8007066 <__ascii_mbtowc+0x6>
 8007064:	a901      	add	r1, sp, #4
 8007066:	b142      	cbz	r2, 800707a <__ascii_mbtowc+0x1a>
 8007068:	b14b      	cbz	r3, 800707e <__ascii_mbtowc+0x1e>
 800706a:	7813      	ldrb	r3, [r2, #0]
 800706c:	600b      	str	r3, [r1, #0]
 800706e:	7812      	ldrb	r2, [r2, #0]
 8007070:	1e10      	subs	r0, r2, #0
 8007072:	bf18      	it	ne
 8007074:	2001      	movne	r0, #1
 8007076:	b002      	add	sp, #8
 8007078:	4770      	bx	lr
 800707a:	4610      	mov	r0, r2
 800707c:	e7fb      	b.n	8007076 <__ascii_mbtowc+0x16>
 800707e:	f06f 0001 	mvn.w	r0, #1
 8007082:	e7f8      	b.n	8007076 <__ascii_mbtowc+0x16>

08007084 <memcpy>:
 8007084:	440a      	add	r2, r1
 8007086:	4291      	cmp	r1, r2
 8007088:	f100 33ff 	add.w	r3, r0, #4294967295
 800708c:	d100      	bne.n	8007090 <memcpy+0xc>
 800708e:	4770      	bx	lr
 8007090:	b510      	push	{r4, lr}
 8007092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800709a:	4291      	cmp	r1, r2
 800709c:	d1f9      	bne.n	8007092 <memcpy+0xe>
 800709e:	bd10      	pop	{r4, pc}

080070a0 <memset>:
 80070a0:	4402      	add	r2, r0
 80070a2:	4603      	mov	r3, r0
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d100      	bne.n	80070aa <memset+0xa>
 80070a8:	4770      	bx	lr
 80070aa:	f803 1b01 	strb.w	r1, [r3], #1
 80070ae:	e7f9      	b.n	80070a4 <memset+0x4>

080070b0 <_free_r>:
 80070b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070b2:	2900      	cmp	r1, #0
 80070b4:	d044      	beq.n	8007140 <_free_r+0x90>
 80070b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ba:	9001      	str	r0, [sp, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f1a1 0404 	sub.w	r4, r1, #4
 80070c2:	bfb8      	it	lt
 80070c4:	18e4      	addlt	r4, r4, r3
 80070c6:	f001 ff03 	bl	8008ed0 <__malloc_lock>
 80070ca:	4a1e      	ldr	r2, [pc, #120]	; (8007144 <_free_r+0x94>)
 80070cc:	9801      	ldr	r0, [sp, #4]
 80070ce:	6813      	ldr	r3, [r2, #0]
 80070d0:	b933      	cbnz	r3, 80070e0 <_free_r+0x30>
 80070d2:	6063      	str	r3, [r4, #4]
 80070d4:	6014      	str	r4, [r2, #0]
 80070d6:	b003      	add	sp, #12
 80070d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070dc:	f001 befe 	b.w	8008edc <__malloc_unlock>
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	d908      	bls.n	80070f6 <_free_r+0x46>
 80070e4:	6825      	ldr	r5, [r4, #0]
 80070e6:	1961      	adds	r1, r4, r5
 80070e8:	428b      	cmp	r3, r1
 80070ea:	bf01      	itttt	eq
 80070ec:	6819      	ldreq	r1, [r3, #0]
 80070ee:	685b      	ldreq	r3, [r3, #4]
 80070f0:	1949      	addeq	r1, r1, r5
 80070f2:	6021      	streq	r1, [r4, #0]
 80070f4:	e7ed      	b.n	80070d2 <_free_r+0x22>
 80070f6:	461a      	mov	r2, r3
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	b10b      	cbz	r3, 8007100 <_free_r+0x50>
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	d9fa      	bls.n	80070f6 <_free_r+0x46>
 8007100:	6811      	ldr	r1, [r2, #0]
 8007102:	1855      	adds	r5, r2, r1
 8007104:	42a5      	cmp	r5, r4
 8007106:	d10b      	bne.n	8007120 <_free_r+0x70>
 8007108:	6824      	ldr	r4, [r4, #0]
 800710a:	4421      	add	r1, r4
 800710c:	1854      	adds	r4, r2, r1
 800710e:	42a3      	cmp	r3, r4
 8007110:	6011      	str	r1, [r2, #0]
 8007112:	d1e0      	bne.n	80070d6 <_free_r+0x26>
 8007114:	681c      	ldr	r4, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	6053      	str	r3, [r2, #4]
 800711a:	4421      	add	r1, r4
 800711c:	6011      	str	r1, [r2, #0]
 800711e:	e7da      	b.n	80070d6 <_free_r+0x26>
 8007120:	d902      	bls.n	8007128 <_free_r+0x78>
 8007122:	230c      	movs	r3, #12
 8007124:	6003      	str	r3, [r0, #0]
 8007126:	e7d6      	b.n	80070d6 <_free_r+0x26>
 8007128:	6825      	ldr	r5, [r4, #0]
 800712a:	1961      	adds	r1, r4, r5
 800712c:	428b      	cmp	r3, r1
 800712e:	bf04      	itt	eq
 8007130:	6819      	ldreq	r1, [r3, #0]
 8007132:	685b      	ldreq	r3, [r3, #4]
 8007134:	6063      	str	r3, [r4, #4]
 8007136:	bf04      	itt	eq
 8007138:	1949      	addeq	r1, r1, r5
 800713a:	6021      	streq	r1, [r4, #0]
 800713c:	6054      	str	r4, [r2, #4]
 800713e:	e7ca      	b.n	80070d6 <_free_r+0x26>
 8007140:	b003      	add	sp, #12
 8007142:	bd30      	pop	{r4, r5, pc}
 8007144:	2000a390 	.word	0x2000a390

08007148 <sbrk_aligned>:
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	4e0e      	ldr	r6, [pc, #56]	; (8007184 <sbrk_aligned+0x3c>)
 800714c:	460c      	mov	r4, r1
 800714e:	6831      	ldr	r1, [r6, #0]
 8007150:	4605      	mov	r5, r0
 8007152:	b911      	cbnz	r1, 800715a <sbrk_aligned+0x12>
 8007154:	f000 fd84 	bl	8007c60 <_sbrk_r>
 8007158:	6030      	str	r0, [r6, #0]
 800715a:	4621      	mov	r1, r4
 800715c:	4628      	mov	r0, r5
 800715e:	f000 fd7f 	bl	8007c60 <_sbrk_r>
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	d00a      	beq.n	800717c <sbrk_aligned+0x34>
 8007166:	1cc4      	adds	r4, r0, #3
 8007168:	f024 0403 	bic.w	r4, r4, #3
 800716c:	42a0      	cmp	r0, r4
 800716e:	d007      	beq.n	8007180 <sbrk_aligned+0x38>
 8007170:	1a21      	subs	r1, r4, r0
 8007172:	4628      	mov	r0, r5
 8007174:	f000 fd74 	bl	8007c60 <_sbrk_r>
 8007178:	3001      	adds	r0, #1
 800717a:	d101      	bne.n	8007180 <sbrk_aligned+0x38>
 800717c:	f04f 34ff 	mov.w	r4, #4294967295
 8007180:	4620      	mov	r0, r4
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	2000a394 	.word	0x2000a394

08007188 <_malloc_r>:
 8007188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800718c:	1ccd      	adds	r5, r1, #3
 800718e:	f025 0503 	bic.w	r5, r5, #3
 8007192:	3508      	adds	r5, #8
 8007194:	2d0c      	cmp	r5, #12
 8007196:	bf38      	it	cc
 8007198:	250c      	movcc	r5, #12
 800719a:	2d00      	cmp	r5, #0
 800719c:	4607      	mov	r7, r0
 800719e:	db01      	blt.n	80071a4 <_malloc_r+0x1c>
 80071a0:	42a9      	cmp	r1, r5
 80071a2:	d905      	bls.n	80071b0 <_malloc_r+0x28>
 80071a4:	230c      	movs	r3, #12
 80071a6:	603b      	str	r3, [r7, #0]
 80071a8:	2600      	movs	r6, #0
 80071aa:	4630      	mov	r0, r6
 80071ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b0:	4e2e      	ldr	r6, [pc, #184]	; (800726c <_malloc_r+0xe4>)
 80071b2:	f001 fe8d 	bl	8008ed0 <__malloc_lock>
 80071b6:	6833      	ldr	r3, [r6, #0]
 80071b8:	461c      	mov	r4, r3
 80071ba:	bb34      	cbnz	r4, 800720a <_malloc_r+0x82>
 80071bc:	4629      	mov	r1, r5
 80071be:	4638      	mov	r0, r7
 80071c0:	f7ff ffc2 	bl	8007148 <sbrk_aligned>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	4604      	mov	r4, r0
 80071c8:	d14d      	bne.n	8007266 <_malloc_r+0xde>
 80071ca:	6834      	ldr	r4, [r6, #0]
 80071cc:	4626      	mov	r6, r4
 80071ce:	2e00      	cmp	r6, #0
 80071d0:	d140      	bne.n	8007254 <_malloc_r+0xcc>
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	4631      	mov	r1, r6
 80071d6:	4638      	mov	r0, r7
 80071d8:	eb04 0803 	add.w	r8, r4, r3
 80071dc:	f000 fd40 	bl	8007c60 <_sbrk_r>
 80071e0:	4580      	cmp	r8, r0
 80071e2:	d13a      	bne.n	800725a <_malloc_r+0xd2>
 80071e4:	6821      	ldr	r1, [r4, #0]
 80071e6:	3503      	adds	r5, #3
 80071e8:	1a6d      	subs	r5, r5, r1
 80071ea:	f025 0503 	bic.w	r5, r5, #3
 80071ee:	3508      	adds	r5, #8
 80071f0:	2d0c      	cmp	r5, #12
 80071f2:	bf38      	it	cc
 80071f4:	250c      	movcc	r5, #12
 80071f6:	4629      	mov	r1, r5
 80071f8:	4638      	mov	r0, r7
 80071fa:	f7ff ffa5 	bl	8007148 <sbrk_aligned>
 80071fe:	3001      	adds	r0, #1
 8007200:	d02b      	beq.n	800725a <_malloc_r+0xd2>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	442b      	add	r3, r5
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	e00e      	b.n	8007228 <_malloc_r+0xa0>
 800720a:	6822      	ldr	r2, [r4, #0]
 800720c:	1b52      	subs	r2, r2, r5
 800720e:	d41e      	bmi.n	800724e <_malloc_r+0xc6>
 8007210:	2a0b      	cmp	r2, #11
 8007212:	d916      	bls.n	8007242 <_malloc_r+0xba>
 8007214:	1961      	adds	r1, r4, r5
 8007216:	42a3      	cmp	r3, r4
 8007218:	6025      	str	r5, [r4, #0]
 800721a:	bf18      	it	ne
 800721c:	6059      	strne	r1, [r3, #4]
 800721e:	6863      	ldr	r3, [r4, #4]
 8007220:	bf08      	it	eq
 8007222:	6031      	streq	r1, [r6, #0]
 8007224:	5162      	str	r2, [r4, r5]
 8007226:	604b      	str	r3, [r1, #4]
 8007228:	4638      	mov	r0, r7
 800722a:	f104 060b 	add.w	r6, r4, #11
 800722e:	f001 fe55 	bl	8008edc <__malloc_unlock>
 8007232:	f026 0607 	bic.w	r6, r6, #7
 8007236:	1d23      	adds	r3, r4, #4
 8007238:	1af2      	subs	r2, r6, r3
 800723a:	d0b6      	beq.n	80071aa <_malloc_r+0x22>
 800723c:	1b9b      	subs	r3, r3, r6
 800723e:	50a3      	str	r3, [r4, r2]
 8007240:	e7b3      	b.n	80071aa <_malloc_r+0x22>
 8007242:	6862      	ldr	r2, [r4, #4]
 8007244:	42a3      	cmp	r3, r4
 8007246:	bf0c      	ite	eq
 8007248:	6032      	streq	r2, [r6, #0]
 800724a:	605a      	strne	r2, [r3, #4]
 800724c:	e7ec      	b.n	8007228 <_malloc_r+0xa0>
 800724e:	4623      	mov	r3, r4
 8007250:	6864      	ldr	r4, [r4, #4]
 8007252:	e7b2      	b.n	80071ba <_malloc_r+0x32>
 8007254:	4634      	mov	r4, r6
 8007256:	6876      	ldr	r6, [r6, #4]
 8007258:	e7b9      	b.n	80071ce <_malloc_r+0x46>
 800725a:	230c      	movs	r3, #12
 800725c:	603b      	str	r3, [r7, #0]
 800725e:	4638      	mov	r0, r7
 8007260:	f001 fe3c 	bl	8008edc <__malloc_unlock>
 8007264:	e7a1      	b.n	80071aa <_malloc_r+0x22>
 8007266:	6025      	str	r5, [r4, #0]
 8007268:	e7de      	b.n	8007228 <_malloc_r+0xa0>
 800726a:	bf00      	nop
 800726c:	2000a390 	.word	0x2000a390

08007270 <__cvt>:
 8007270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	ec55 4b10 	vmov	r4, r5, d0
 8007278:	2d00      	cmp	r5, #0
 800727a:	460e      	mov	r6, r1
 800727c:	4619      	mov	r1, r3
 800727e:	462b      	mov	r3, r5
 8007280:	bfbb      	ittet	lt
 8007282:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007286:	461d      	movlt	r5, r3
 8007288:	2300      	movge	r3, #0
 800728a:	232d      	movlt	r3, #45	; 0x2d
 800728c:	700b      	strb	r3, [r1, #0]
 800728e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007290:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007294:	4691      	mov	r9, r2
 8007296:	f023 0820 	bic.w	r8, r3, #32
 800729a:	bfbc      	itt	lt
 800729c:	4622      	movlt	r2, r4
 800729e:	4614      	movlt	r4, r2
 80072a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072a4:	d005      	beq.n	80072b2 <__cvt+0x42>
 80072a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072aa:	d100      	bne.n	80072ae <__cvt+0x3e>
 80072ac:	3601      	adds	r6, #1
 80072ae:	2102      	movs	r1, #2
 80072b0:	e000      	b.n	80072b4 <__cvt+0x44>
 80072b2:	2103      	movs	r1, #3
 80072b4:	ab03      	add	r3, sp, #12
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	ab02      	add	r3, sp, #8
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	ec45 4b10 	vmov	d0, r4, r5
 80072c0:	4653      	mov	r3, sl
 80072c2:	4632      	mov	r2, r6
 80072c4:	f000 fe9c 	bl	8008000 <_dtoa_r>
 80072c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072cc:	4607      	mov	r7, r0
 80072ce:	d102      	bne.n	80072d6 <__cvt+0x66>
 80072d0:	f019 0f01 	tst.w	r9, #1
 80072d4:	d022      	beq.n	800731c <__cvt+0xac>
 80072d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072da:	eb07 0906 	add.w	r9, r7, r6
 80072de:	d110      	bne.n	8007302 <__cvt+0x92>
 80072e0:	783b      	ldrb	r3, [r7, #0]
 80072e2:	2b30      	cmp	r3, #48	; 0x30
 80072e4:	d10a      	bne.n	80072fc <__cvt+0x8c>
 80072e6:	2200      	movs	r2, #0
 80072e8:	2300      	movs	r3, #0
 80072ea:	4620      	mov	r0, r4
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7f9 fbfb 	bl	8000ae8 <__aeabi_dcmpeq>
 80072f2:	b918      	cbnz	r0, 80072fc <__cvt+0x8c>
 80072f4:	f1c6 0601 	rsb	r6, r6, #1
 80072f8:	f8ca 6000 	str.w	r6, [sl]
 80072fc:	f8da 3000 	ldr.w	r3, [sl]
 8007300:	4499      	add	r9, r3
 8007302:	2200      	movs	r2, #0
 8007304:	2300      	movs	r3, #0
 8007306:	4620      	mov	r0, r4
 8007308:	4629      	mov	r1, r5
 800730a:	f7f9 fbed 	bl	8000ae8 <__aeabi_dcmpeq>
 800730e:	b108      	cbz	r0, 8007314 <__cvt+0xa4>
 8007310:	f8cd 900c 	str.w	r9, [sp, #12]
 8007314:	2230      	movs	r2, #48	; 0x30
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	454b      	cmp	r3, r9
 800731a:	d307      	bcc.n	800732c <__cvt+0xbc>
 800731c:	9b03      	ldr	r3, [sp, #12]
 800731e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007320:	1bdb      	subs	r3, r3, r7
 8007322:	4638      	mov	r0, r7
 8007324:	6013      	str	r3, [r2, #0]
 8007326:	b004      	add	sp, #16
 8007328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800732c:	1c59      	adds	r1, r3, #1
 800732e:	9103      	str	r1, [sp, #12]
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	e7f0      	b.n	8007316 <__cvt+0xa6>

08007334 <__exponent>:
 8007334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007336:	4603      	mov	r3, r0
 8007338:	2900      	cmp	r1, #0
 800733a:	bfb8      	it	lt
 800733c:	4249      	neglt	r1, r1
 800733e:	f803 2b02 	strb.w	r2, [r3], #2
 8007342:	bfb4      	ite	lt
 8007344:	222d      	movlt	r2, #45	; 0x2d
 8007346:	222b      	movge	r2, #43	; 0x2b
 8007348:	2909      	cmp	r1, #9
 800734a:	7042      	strb	r2, [r0, #1]
 800734c:	dd2a      	ble.n	80073a4 <__exponent+0x70>
 800734e:	f10d 0407 	add.w	r4, sp, #7
 8007352:	46a4      	mov	ip, r4
 8007354:	270a      	movs	r7, #10
 8007356:	46a6      	mov	lr, r4
 8007358:	460a      	mov	r2, r1
 800735a:	fb91 f6f7 	sdiv	r6, r1, r7
 800735e:	fb07 1516 	mls	r5, r7, r6, r1
 8007362:	3530      	adds	r5, #48	; 0x30
 8007364:	2a63      	cmp	r2, #99	; 0x63
 8007366:	f104 34ff 	add.w	r4, r4, #4294967295
 800736a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800736e:	4631      	mov	r1, r6
 8007370:	dcf1      	bgt.n	8007356 <__exponent+0x22>
 8007372:	3130      	adds	r1, #48	; 0x30
 8007374:	f1ae 0502 	sub.w	r5, lr, #2
 8007378:	f804 1c01 	strb.w	r1, [r4, #-1]
 800737c:	1c44      	adds	r4, r0, #1
 800737e:	4629      	mov	r1, r5
 8007380:	4561      	cmp	r1, ip
 8007382:	d30a      	bcc.n	800739a <__exponent+0x66>
 8007384:	f10d 0209 	add.w	r2, sp, #9
 8007388:	eba2 020e 	sub.w	r2, r2, lr
 800738c:	4565      	cmp	r5, ip
 800738e:	bf88      	it	hi
 8007390:	2200      	movhi	r2, #0
 8007392:	4413      	add	r3, r2
 8007394:	1a18      	subs	r0, r3, r0
 8007396:	b003      	add	sp, #12
 8007398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800739e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073a2:	e7ed      	b.n	8007380 <__exponent+0x4c>
 80073a4:	2330      	movs	r3, #48	; 0x30
 80073a6:	3130      	adds	r1, #48	; 0x30
 80073a8:	7083      	strb	r3, [r0, #2]
 80073aa:	70c1      	strb	r1, [r0, #3]
 80073ac:	1d03      	adds	r3, r0, #4
 80073ae:	e7f1      	b.n	8007394 <__exponent+0x60>

080073b0 <_printf_float>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	ed2d 8b02 	vpush	{d8}
 80073b8:	b08d      	sub	sp, #52	; 0x34
 80073ba:	460c      	mov	r4, r1
 80073bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80073c0:	4616      	mov	r6, r2
 80073c2:	461f      	mov	r7, r3
 80073c4:	4605      	mov	r5, r0
 80073c6:	f001 fd65 	bl	8008e94 <_localeconv_r>
 80073ca:	f8d0 a000 	ldr.w	sl, [r0]
 80073ce:	4650      	mov	r0, sl
 80073d0:	f7f8 ff08 	bl	80001e4 <strlen>
 80073d4:	2300      	movs	r3, #0
 80073d6:	930a      	str	r3, [sp, #40]	; 0x28
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	9305      	str	r3, [sp, #20]
 80073dc:	f8d8 3000 	ldr.w	r3, [r8]
 80073e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80073e4:	3307      	adds	r3, #7
 80073e6:	f023 0307 	bic.w	r3, r3, #7
 80073ea:	f103 0208 	add.w	r2, r3, #8
 80073ee:	f8c8 2000 	str.w	r2, [r8]
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80073fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80073fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007402:	9307      	str	r3, [sp, #28]
 8007404:	f8cd 8018 	str.w	r8, [sp, #24]
 8007408:	ee08 0a10 	vmov	s16, r0
 800740c:	4b9f      	ldr	r3, [pc, #636]	; (800768c <_printf_float+0x2dc>)
 800740e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007412:	f04f 32ff 	mov.w	r2, #4294967295
 8007416:	f7f9 fb99 	bl	8000b4c <__aeabi_dcmpun>
 800741a:	bb88      	cbnz	r0, 8007480 <_printf_float+0xd0>
 800741c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007420:	4b9a      	ldr	r3, [pc, #616]	; (800768c <_printf_float+0x2dc>)
 8007422:	f04f 32ff 	mov.w	r2, #4294967295
 8007426:	f7f9 fb73 	bl	8000b10 <__aeabi_dcmple>
 800742a:	bb48      	cbnz	r0, 8007480 <_printf_float+0xd0>
 800742c:	2200      	movs	r2, #0
 800742e:	2300      	movs	r3, #0
 8007430:	4640      	mov	r0, r8
 8007432:	4649      	mov	r1, r9
 8007434:	f7f9 fb62 	bl	8000afc <__aeabi_dcmplt>
 8007438:	b110      	cbz	r0, 8007440 <_printf_float+0x90>
 800743a:	232d      	movs	r3, #45	; 0x2d
 800743c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007440:	4b93      	ldr	r3, [pc, #588]	; (8007690 <_printf_float+0x2e0>)
 8007442:	4894      	ldr	r0, [pc, #592]	; (8007694 <_printf_float+0x2e4>)
 8007444:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007448:	bf94      	ite	ls
 800744a:	4698      	movls	r8, r3
 800744c:	4680      	movhi	r8, r0
 800744e:	2303      	movs	r3, #3
 8007450:	6123      	str	r3, [r4, #16]
 8007452:	9b05      	ldr	r3, [sp, #20]
 8007454:	f023 0204 	bic.w	r2, r3, #4
 8007458:	6022      	str	r2, [r4, #0]
 800745a:	f04f 0900 	mov.w	r9, #0
 800745e:	9700      	str	r7, [sp, #0]
 8007460:	4633      	mov	r3, r6
 8007462:	aa0b      	add	r2, sp, #44	; 0x2c
 8007464:	4621      	mov	r1, r4
 8007466:	4628      	mov	r0, r5
 8007468:	f000 f9d8 	bl	800781c <_printf_common>
 800746c:	3001      	adds	r0, #1
 800746e:	f040 8090 	bne.w	8007592 <_printf_float+0x1e2>
 8007472:	f04f 30ff 	mov.w	r0, #4294967295
 8007476:	b00d      	add	sp, #52	; 0x34
 8007478:	ecbd 8b02 	vpop	{d8}
 800747c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007480:	4642      	mov	r2, r8
 8007482:	464b      	mov	r3, r9
 8007484:	4640      	mov	r0, r8
 8007486:	4649      	mov	r1, r9
 8007488:	f7f9 fb60 	bl	8000b4c <__aeabi_dcmpun>
 800748c:	b140      	cbz	r0, 80074a0 <_printf_float+0xf0>
 800748e:	464b      	mov	r3, r9
 8007490:	2b00      	cmp	r3, #0
 8007492:	bfbc      	itt	lt
 8007494:	232d      	movlt	r3, #45	; 0x2d
 8007496:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800749a:	487f      	ldr	r0, [pc, #508]	; (8007698 <_printf_float+0x2e8>)
 800749c:	4b7f      	ldr	r3, [pc, #508]	; (800769c <_printf_float+0x2ec>)
 800749e:	e7d1      	b.n	8007444 <_printf_float+0x94>
 80074a0:	6863      	ldr	r3, [r4, #4]
 80074a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074a6:	9206      	str	r2, [sp, #24]
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	d13f      	bne.n	800752c <_printf_float+0x17c>
 80074ac:	2306      	movs	r3, #6
 80074ae:	6063      	str	r3, [r4, #4]
 80074b0:	9b05      	ldr	r3, [sp, #20]
 80074b2:	6861      	ldr	r1, [r4, #4]
 80074b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80074b8:	2300      	movs	r3, #0
 80074ba:	9303      	str	r3, [sp, #12]
 80074bc:	ab0a      	add	r3, sp, #40	; 0x28
 80074be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80074c2:	ab09      	add	r3, sp, #36	; 0x24
 80074c4:	ec49 8b10 	vmov	d0, r8, r9
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	6022      	str	r2, [r4, #0]
 80074cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074d0:	4628      	mov	r0, r5
 80074d2:	f7ff fecd 	bl	8007270 <__cvt>
 80074d6:	9b06      	ldr	r3, [sp, #24]
 80074d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074da:	2b47      	cmp	r3, #71	; 0x47
 80074dc:	4680      	mov	r8, r0
 80074de:	d108      	bne.n	80074f2 <_printf_float+0x142>
 80074e0:	1cc8      	adds	r0, r1, #3
 80074e2:	db02      	blt.n	80074ea <_printf_float+0x13a>
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	4299      	cmp	r1, r3
 80074e8:	dd41      	ble.n	800756e <_printf_float+0x1be>
 80074ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80074ee:	fa5f fb8b 	uxtb.w	fp, fp
 80074f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074f6:	d820      	bhi.n	800753a <_printf_float+0x18a>
 80074f8:	3901      	subs	r1, #1
 80074fa:	465a      	mov	r2, fp
 80074fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007500:	9109      	str	r1, [sp, #36]	; 0x24
 8007502:	f7ff ff17 	bl	8007334 <__exponent>
 8007506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007508:	1813      	adds	r3, r2, r0
 800750a:	2a01      	cmp	r2, #1
 800750c:	4681      	mov	r9, r0
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	dc02      	bgt.n	8007518 <_printf_float+0x168>
 8007512:	6822      	ldr	r2, [r4, #0]
 8007514:	07d2      	lsls	r2, r2, #31
 8007516:	d501      	bpl.n	800751c <_printf_float+0x16c>
 8007518:	3301      	adds	r3, #1
 800751a:	6123      	str	r3, [r4, #16]
 800751c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007520:	2b00      	cmp	r3, #0
 8007522:	d09c      	beq.n	800745e <_printf_float+0xae>
 8007524:	232d      	movs	r3, #45	; 0x2d
 8007526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800752a:	e798      	b.n	800745e <_printf_float+0xae>
 800752c:	9a06      	ldr	r2, [sp, #24]
 800752e:	2a47      	cmp	r2, #71	; 0x47
 8007530:	d1be      	bne.n	80074b0 <_printf_float+0x100>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1bc      	bne.n	80074b0 <_printf_float+0x100>
 8007536:	2301      	movs	r3, #1
 8007538:	e7b9      	b.n	80074ae <_printf_float+0xfe>
 800753a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800753e:	d118      	bne.n	8007572 <_printf_float+0x1c2>
 8007540:	2900      	cmp	r1, #0
 8007542:	6863      	ldr	r3, [r4, #4]
 8007544:	dd0b      	ble.n	800755e <_printf_float+0x1ae>
 8007546:	6121      	str	r1, [r4, #16]
 8007548:	b913      	cbnz	r3, 8007550 <_printf_float+0x1a0>
 800754a:	6822      	ldr	r2, [r4, #0]
 800754c:	07d0      	lsls	r0, r2, #31
 800754e:	d502      	bpl.n	8007556 <_printf_float+0x1a6>
 8007550:	3301      	adds	r3, #1
 8007552:	440b      	add	r3, r1
 8007554:	6123      	str	r3, [r4, #16]
 8007556:	65a1      	str	r1, [r4, #88]	; 0x58
 8007558:	f04f 0900 	mov.w	r9, #0
 800755c:	e7de      	b.n	800751c <_printf_float+0x16c>
 800755e:	b913      	cbnz	r3, 8007566 <_printf_float+0x1b6>
 8007560:	6822      	ldr	r2, [r4, #0]
 8007562:	07d2      	lsls	r2, r2, #31
 8007564:	d501      	bpl.n	800756a <_printf_float+0x1ba>
 8007566:	3302      	adds	r3, #2
 8007568:	e7f4      	b.n	8007554 <_printf_float+0x1a4>
 800756a:	2301      	movs	r3, #1
 800756c:	e7f2      	b.n	8007554 <_printf_float+0x1a4>
 800756e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007574:	4299      	cmp	r1, r3
 8007576:	db05      	blt.n	8007584 <_printf_float+0x1d4>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	6121      	str	r1, [r4, #16]
 800757c:	07d8      	lsls	r0, r3, #31
 800757e:	d5ea      	bpl.n	8007556 <_printf_float+0x1a6>
 8007580:	1c4b      	adds	r3, r1, #1
 8007582:	e7e7      	b.n	8007554 <_printf_float+0x1a4>
 8007584:	2900      	cmp	r1, #0
 8007586:	bfd4      	ite	le
 8007588:	f1c1 0202 	rsble	r2, r1, #2
 800758c:	2201      	movgt	r2, #1
 800758e:	4413      	add	r3, r2
 8007590:	e7e0      	b.n	8007554 <_printf_float+0x1a4>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	055a      	lsls	r2, r3, #21
 8007596:	d407      	bmi.n	80075a8 <_printf_float+0x1f8>
 8007598:	6923      	ldr	r3, [r4, #16]
 800759a:	4642      	mov	r2, r8
 800759c:	4631      	mov	r1, r6
 800759e:	4628      	mov	r0, r5
 80075a0:	47b8      	blx	r7
 80075a2:	3001      	adds	r0, #1
 80075a4:	d12c      	bne.n	8007600 <_printf_float+0x250>
 80075a6:	e764      	b.n	8007472 <_printf_float+0xc2>
 80075a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075ac:	f240 80e0 	bls.w	8007770 <_printf_float+0x3c0>
 80075b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075b4:	2200      	movs	r2, #0
 80075b6:	2300      	movs	r3, #0
 80075b8:	f7f9 fa96 	bl	8000ae8 <__aeabi_dcmpeq>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d034      	beq.n	800762a <_printf_float+0x27a>
 80075c0:	4a37      	ldr	r2, [pc, #220]	; (80076a0 <_printf_float+0x2f0>)
 80075c2:	2301      	movs	r3, #1
 80075c4:	4631      	mov	r1, r6
 80075c6:	4628      	mov	r0, r5
 80075c8:	47b8      	blx	r7
 80075ca:	3001      	adds	r0, #1
 80075cc:	f43f af51 	beq.w	8007472 <_printf_float+0xc2>
 80075d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075d4:	429a      	cmp	r2, r3
 80075d6:	db02      	blt.n	80075de <_printf_float+0x22e>
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	07d8      	lsls	r0, r3, #31
 80075dc:	d510      	bpl.n	8007600 <_printf_float+0x250>
 80075de:	ee18 3a10 	vmov	r3, s16
 80075e2:	4652      	mov	r2, sl
 80075e4:	4631      	mov	r1, r6
 80075e6:	4628      	mov	r0, r5
 80075e8:	47b8      	blx	r7
 80075ea:	3001      	adds	r0, #1
 80075ec:	f43f af41 	beq.w	8007472 <_printf_float+0xc2>
 80075f0:	f04f 0800 	mov.w	r8, #0
 80075f4:	f104 091a 	add.w	r9, r4, #26
 80075f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075fa:	3b01      	subs	r3, #1
 80075fc:	4543      	cmp	r3, r8
 80075fe:	dc09      	bgt.n	8007614 <_printf_float+0x264>
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	079b      	lsls	r3, r3, #30
 8007604:	f100 8105 	bmi.w	8007812 <_printf_float+0x462>
 8007608:	68e0      	ldr	r0, [r4, #12]
 800760a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800760c:	4298      	cmp	r0, r3
 800760e:	bfb8      	it	lt
 8007610:	4618      	movlt	r0, r3
 8007612:	e730      	b.n	8007476 <_printf_float+0xc6>
 8007614:	2301      	movs	r3, #1
 8007616:	464a      	mov	r2, r9
 8007618:	4631      	mov	r1, r6
 800761a:	4628      	mov	r0, r5
 800761c:	47b8      	blx	r7
 800761e:	3001      	adds	r0, #1
 8007620:	f43f af27 	beq.w	8007472 <_printf_float+0xc2>
 8007624:	f108 0801 	add.w	r8, r8, #1
 8007628:	e7e6      	b.n	80075f8 <_printf_float+0x248>
 800762a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	dc39      	bgt.n	80076a4 <_printf_float+0x2f4>
 8007630:	4a1b      	ldr	r2, [pc, #108]	; (80076a0 <_printf_float+0x2f0>)
 8007632:	2301      	movs	r3, #1
 8007634:	4631      	mov	r1, r6
 8007636:	4628      	mov	r0, r5
 8007638:	47b8      	blx	r7
 800763a:	3001      	adds	r0, #1
 800763c:	f43f af19 	beq.w	8007472 <_printf_float+0xc2>
 8007640:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007644:	4313      	orrs	r3, r2
 8007646:	d102      	bne.n	800764e <_printf_float+0x29e>
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	07d9      	lsls	r1, r3, #31
 800764c:	d5d8      	bpl.n	8007600 <_printf_float+0x250>
 800764e:	ee18 3a10 	vmov	r3, s16
 8007652:	4652      	mov	r2, sl
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	f43f af09 	beq.w	8007472 <_printf_float+0xc2>
 8007660:	f04f 0900 	mov.w	r9, #0
 8007664:	f104 0a1a 	add.w	sl, r4, #26
 8007668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766a:	425b      	negs	r3, r3
 800766c:	454b      	cmp	r3, r9
 800766e:	dc01      	bgt.n	8007674 <_printf_float+0x2c4>
 8007670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007672:	e792      	b.n	800759a <_printf_float+0x1ea>
 8007674:	2301      	movs	r3, #1
 8007676:	4652      	mov	r2, sl
 8007678:	4631      	mov	r1, r6
 800767a:	4628      	mov	r0, r5
 800767c:	47b8      	blx	r7
 800767e:	3001      	adds	r0, #1
 8007680:	f43f aef7 	beq.w	8007472 <_printf_float+0xc2>
 8007684:	f109 0901 	add.w	r9, r9, #1
 8007688:	e7ee      	b.n	8007668 <_printf_float+0x2b8>
 800768a:	bf00      	nop
 800768c:	7fefffff 	.word	0x7fefffff
 8007690:	0800cba2 	.word	0x0800cba2
 8007694:	0800cba6 	.word	0x0800cba6
 8007698:	0800cbae 	.word	0x0800cbae
 800769c:	0800cbaa 	.word	0x0800cbaa
 80076a0:	0800cbb2 	.word	0x0800cbb2
 80076a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076a8:	429a      	cmp	r2, r3
 80076aa:	bfa8      	it	ge
 80076ac:	461a      	movge	r2, r3
 80076ae:	2a00      	cmp	r2, #0
 80076b0:	4691      	mov	r9, r2
 80076b2:	dc37      	bgt.n	8007724 <_printf_float+0x374>
 80076b4:	f04f 0b00 	mov.w	fp, #0
 80076b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076bc:	f104 021a 	add.w	r2, r4, #26
 80076c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076c2:	9305      	str	r3, [sp, #20]
 80076c4:	eba3 0309 	sub.w	r3, r3, r9
 80076c8:	455b      	cmp	r3, fp
 80076ca:	dc33      	bgt.n	8007734 <_printf_float+0x384>
 80076cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076d0:	429a      	cmp	r2, r3
 80076d2:	db3b      	blt.n	800774c <_printf_float+0x39c>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	07da      	lsls	r2, r3, #31
 80076d8:	d438      	bmi.n	800774c <_printf_float+0x39c>
 80076da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076dc:	9a05      	ldr	r2, [sp, #20]
 80076de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076e0:	1a9a      	subs	r2, r3, r2
 80076e2:	eba3 0901 	sub.w	r9, r3, r1
 80076e6:	4591      	cmp	r9, r2
 80076e8:	bfa8      	it	ge
 80076ea:	4691      	movge	r9, r2
 80076ec:	f1b9 0f00 	cmp.w	r9, #0
 80076f0:	dc35      	bgt.n	800775e <_printf_float+0x3ae>
 80076f2:	f04f 0800 	mov.w	r8, #0
 80076f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076fa:	f104 0a1a 	add.w	sl, r4, #26
 80076fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007702:	1a9b      	subs	r3, r3, r2
 8007704:	eba3 0309 	sub.w	r3, r3, r9
 8007708:	4543      	cmp	r3, r8
 800770a:	f77f af79 	ble.w	8007600 <_printf_float+0x250>
 800770e:	2301      	movs	r3, #1
 8007710:	4652      	mov	r2, sl
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	f43f aeaa 	beq.w	8007472 <_printf_float+0xc2>
 800771e:	f108 0801 	add.w	r8, r8, #1
 8007722:	e7ec      	b.n	80076fe <_printf_float+0x34e>
 8007724:	4613      	mov	r3, r2
 8007726:	4631      	mov	r1, r6
 8007728:	4642      	mov	r2, r8
 800772a:	4628      	mov	r0, r5
 800772c:	47b8      	blx	r7
 800772e:	3001      	adds	r0, #1
 8007730:	d1c0      	bne.n	80076b4 <_printf_float+0x304>
 8007732:	e69e      	b.n	8007472 <_printf_float+0xc2>
 8007734:	2301      	movs	r3, #1
 8007736:	4631      	mov	r1, r6
 8007738:	4628      	mov	r0, r5
 800773a:	9205      	str	r2, [sp, #20]
 800773c:	47b8      	blx	r7
 800773e:	3001      	adds	r0, #1
 8007740:	f43f ae97 	beq.w	8007472 <_printf_float+0xc2>
 8007744:	9a05      	ldr	r2, [sp, #20]
 8007746:	f10b 0b01 	add.w	fp, fp, #1
 800774a:	e7b9      	b.n	80076c0 <_printf_float+0x310>
 800774c:	ee18 3a10 	vmov	r3, s16
 8007750:	4652      	mov	r2, sl
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	d1be      	bne.n	80076da <_printf_float+0x32a>
 800775c:	e689      	b.n	8007472 <_printf_float+0xc2>
 800775e:	9a05      	ldr	r2, [sp, #20]
 8007760:	464b      	mov	r3, r9
 8007762:	4442      	add	r2, r8
 8007764:	4631      	mov	r1, r6
 8007766:	4628      	mov	r0, r5
 8007768:	47b8      	blx	r7
 800776a:	3001      	adds	r0, #1
 800776c:	d1c1      	bne.n	80076f2 <_printf_float+0x342>
 800776e:	e680      	b.n	8007472 <_printf_float+0xc2>
 8007770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007772:	2a01      	cmp	r2, #1
 8007774:	dc01      	bgt.n	800777a <_printf_float+0x3ca>
 8007776:	07db      	lsls	r3, r3, #31
 8007778:	d538      	bpl.n	80077ec <_printf_float+0x43c>
 800777a:	2301      	movs	r3, #1
 800777c:	4642      	mov	r2, r8
 800777e:	4631      	mov	r1, r6
 8007780:	4628      	mov	r0, r5
 8007782:	47b8      	blx	r7
 8007784:	3001      	adds	r0, #1
 8007786:	f43f ae74 	beq.w	8007472 <_printf_float+0xc2>
 800778a:	ee18 3a10 	vmov	r3, s16
 800778e:	4652      	mov	r2, sl
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	f43f ae6b 	beq.w	8007472 <_printf_float+0xc2>
 800779c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077a0:	2200      	movs	r2, #0
 80077a2:	2300      	movs	r3, #0
 80077a4:	f7f9 f9a0 	bl	8000ae8 <__aeabi_dcmpeq>
 80077a8:	b9d8      	cbnz	r0, 80077e2 <_printf_float+0x432>
 80077aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ac:	f108 0201 	add.w	r2, r8, #1
 80077b0:	3b01      	subs	r3, #1
 80077b2:	4631      	mov	r1, r6
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	d10e      	bne.n	80077da <_printf_float+0x42a>
 80077bc:	e659      	b.n	8007472 <_printf_float+0xc2>
 80077be:	2301      	movs	r3, #1
 80077c0:	4652      	mov	r2, sl
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	f43f ae52 	beq.w	8007472 <_printf_float+0xc2>
 80077ce:	f108 0801 	add.w	r8, r8, #1
 80077d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d4:	3b01      	subs	r3, #1
 80077d6:	4543      	cmp	r3, r8
 80077d8:	dcf1      	bgt.n	80077be <_printf_float+0x40e>
 80077da:	464b      	mov	r3, r9
 80077dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077e0:	e6dc      	b.n	800759c <_printf_float+0x1ec>
 80077e2:	f04f 0800 	mov.w	r8, #0
 80077e6:	f104 0a1a 	add.w	sl, r4, #26
 80077ea:	e7f2      	b.n	80077d2 <_printf_float+0x422>
 80077ec:	2301      	movs	r3, #1
 80077ee:	4642      	mov	r2, r8
 80077f0:	e7df      	b.n	80077b2 <_printf_float+0x402>
 80077f2:	2301      	movs	r3, #1
 80077f4:	464a      	mov	r2, r9
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	f43f ae38 	beq.w	8007472 <_printf_float+0xc2>
 8007802:	f108 0801 	add.w	r8, r8, #1
 8007806:	68e3      	ldr	r3, [r4, #12]
 8007808:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800780a:	1a5b      	subs	r3, r3, r1
 800780c:	4543      	cmp	r3, r8
 800780e:	dcf0      	bgt.n	80077f2 <_printf_float+0x442>
 8007810:	e6fa      	b.n	8007608 <_printf_float+0x258>
 8007812:	f04f 0800 	mov.w	r8, #0
 8007816:	f104 0919 	add.w	r9, r4, #25
 800781a:	e7f4      	b.n	8007806 <_printf_float+0x456>

0800781c <_printf_common>:
 800781c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	4616      	mov	r6, r2
 8007822:	4699      	mov	r9, r3
 8007824:	688a      	ldr	r2, [r1, #8]
 8007826:	690b      	ldr	r3, [r1, #16]
 8007828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800782c:	4293      	cmp	r3, r2
 800782e:	bfb8      	it	lt
 8007830:	4613      	movlt	r3, r2
 8007832:	6033      	str	r3, [r6, #0]
 8007834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007838:	4607      	mov	r7, r0
 800783a:	460c      	mov	r4, r1
 800783c:	b10a      	cbz	r2, 8007842 <_printf_common+0x26>
 800783e:	3301      	adds	r3, #1
 8007840:	6033      	str	r3, [r6, #0]
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	0699      	lsls	r1, r3, #26
 8007846:	bf42      	ittt	mi
 8007848:	6833      	ldrmi	r3, [r6, #0]
 800784a:	3302      	addmi	r3, #2
 800784c:	6033      	strmi	r3, [r6, #0]
 800784e:	6825      	ldr	r5, [r4, #0]
 8007850:	f015 0506 	ands.w	r5, r5, #6
 8007854:	d106      	bne.n	8007864 <_printf_common+0x48>
 8007856:	f104 0a19 	add.w	sl, r4, #25
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	6832      	ldr	r2, [r6, #0]
 800785e:	1a9b      	subs	r3, r3, r2
 8007860:	42ab      	cmp	r3, r5
 8007862:	dc26      	bgt.n	80078b2 <_printf_common+0x96>
 8007864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007868:	1e13      	subs	r3, r2, #0
 800786a:	6822      	ldr	r2, [r4, #0]
 800786c:	bf18      	it	ne
 800786e:	2301      	movne	r3, #1
 8007870:	0692      	lsls	r2, r2, #26
 8007872:	d42b      	bmi.n	80078cc <_printf_common+0xb0>
 8007874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007878:	4649      	mov	r1, r9
 800787a:	4638      	mov	r0, r7
 800787c:	47c0      	blx	r8
 800787e:	3001      	adds	r0, #1
 8007880:	d01e      	beq.n	80078c0 <_printf_common+0xa4>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	68e5      	ldr	r5, [r4, #12]
 8007886:	6832      	ldr	r2, [r6, #0]
 8007888:	f003 0306 	and.w	r3, r3, #6
 800788c:	2b04      	cmp	r3, #4
 800788e:	bf08      	it	eq
 8007890:	1aad      	subeq	r5, r5, r2
 8007892:	68a3      	ldr	r3, [r4, #8]
 8007894:	6922      	ldr	r2, [r4, #16]
 8007896:	bf0c      	ite	eq
 8007898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800789c:	2500      	movne	r5, #0
 800789e:	4293      	cmp	r3, r2
 80078a0:	bfc4      	itt	gt
 80078a2:	1a9b      	subgt	r3, r3, r2
 80078a4:	18ed      	addgt	r5, r5, r3
 80078a6:	2600      	movs	r6, #0
 80078a8:	341a      	adds	r4, #26
 80078aa:	42b5      	cmp	r5, r6
 80078ac:	d11a      	bne.n	80078e4 <_printf_common+0xc8>
 80078ae:	2000      	movs	r0, #0
 80078b0:	e008      	b.n	80078c4 <_printf_common+0xa8>
 80078b2:	2301      	movs	r3, #1
 80078b4:	4652      	mov	r2, sl
 80078b6:	4649      	mov	r1, r9
 80078b8:	4638      	mov	r0, r7
 80078ba:	47c0      	blx	r8
 80078bc:	3001      	adds	r0, #1
 80078be:	d103      	bne.n	80078c8 <_printf_common+0xac>
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295
 80078c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c8:	3501      	adds	r5, #1
 80078ca:	e7c6      	b.n	800785a <_printf_common+0x3e>
 80078cc:	18e1      	adds	r1, r4, r3
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	2030      	movs	r0, #48	; 0x30
 80078d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078d6:	4422      	add	r2, r4
 80078d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078e0:	3302      	adds	r3, #2
 80078e2:	e7c7      	b.n	8007874 <_printf_common+0x58>
 80078e4:	2301      	movs	r3, #1
 80078e6:	4622      	mov	r2, r4
 80078e8:	4649      	mov	r1, r9
 80078ea:	4638      	mov	r0, r7
 80078ec:	47c0      	blx	r8
 80078ee:	3001      	adds	r0, #1
 80078f0:	d0e6      	beq.n	80078c0 <_printf_common+0xa4>
 80078f2:	3601      	adds	r6, #1
 80078f4:	e7d9      	b.n	80078aa <_printf_common+0x8e>
	...

080078f8 <_printf_i>:
 80078f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078fc:	7e0f      	ldrb	r7, [r1, #24]
 80078fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007900:	2f78      	cmp	r7, #120	; 0x78
 8007902:	4691      	mov	r9, r2
 8007904:	4680      	mov	r8, r0
 8007906:	460c      	mov	r4, r1
 8007908:	469a      	mov	sl, r3
 800790a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800790e:	d807      	bhi.n	8007920 <_printf_i+0x28>
 8007910:	2f62      	cmp	r7, #98	; 0x62
 8007912:	d80a      	bhi.n	800792a <_printf_i+0x32>
 8007914:	2f00      	cmp	r7, #0
 8007916:	f000 80d8 	beq.w	8007aca <_printf_i+0x1d2>
 800791a:	2f58      	cmp	r7, #88	; 0x58
 800791c:	f000 80a3 	beq.w	8007a66 <_printf_i+0x16e>
 8007920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007928:	e03a      	b.n	80079a0 <_printf_i+0xa8>
 800792a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800792e:	2b15      	cmp	r3, #21
 8007930:	d8f6      	bhi.n	8007920 <_printf_i+0x28>
 8007932:	a101      	add	r1, pc, #4	; (adr r1, 8007938 <_printf_i+0x40>)
 8007934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007938:	08007991 	.word	0x08007991
 800793c:	080079a5 	.word	0x080079a5
 8007940:	08007921 	.word	0x08007921
 8007944:	08007921 	.word	0x08007921
 8007948:	08007921 	.word	0x08007921
 800794c:	08007921 	.word	0x08007921
 8007950:	080079a5 	.word	0x080079a5
 8007954:	08007921 	.word	0x08007921
 8007958:	08007921 	.word	0x08007921
 800795c:	08007921 	.word	0x08007921
 8007960:	08007921 	.word	0x08007921
 8007964:	08007ab1 	.word	0x08007ab1
 8007968:	080079d5 	.word	0x080079d5
 800796c:	08007a93 	.word	0x08007a93
 8007970:	08007921 	.word	0x08007921
 8007974:	08007921 	.word	0x08007921
 8007978:	08007ad3 	.word	0x08007ad3
 800797c:	08007921 	.word	0x08007921
 8007980:	080079d5 	.word	0x080079d5
 8007984:	08007921 	.word	0x08007921
 8007988:	08007921 	.word	0x08007921
 800798c:	08007a9b 	.word	0x08007a9b
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	1d1a      	adds	r2, r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	602a      	str	r2, [r5, #0]
 8007998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800799c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079a0:	2301      	movs	r3, #1
 80079a2:	e0a3      	b.n	8007aec <_printf_i+0x1f4>
 80079a4:	6820      	ldr	r0, [r4, #0]
 80079a6:	6829      	ldr	r1, [r5, #0]
 80079a8:	0606      	lsls	r6, r0, #24
 80079aa:	f101 0304 	add.w	r3, r1, #4
 80079ae:	d50a      	bpl.n	80079c6 <_printf_i+0xce>
 80079b0:	680e      	ldr	r6, [r1, #0]
 80079b2:	602b      	str	r3, [r5, #0]
 80079b4:	2e00      	cmp	r6, #0
 80079b6:	da03      	bge.n	80079c0 <_printf_i+0xc8>
 80079b8:	232d      	movs	r3, #45	; 0x2d
 80079ba:	4276      	negs	r6, r6
 80079bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079c0:	485e      	ldr	r0, [pc, #376]	; (8007b3c <_printf_i+0x244>)
 80079c2:	230a      	movs	r3, #10
 80079c4:	e019      	b.n	80079fa <_printf_i+0x102>
 80079c6:	680e      	ldr	r6, [r1, #0]
 80079c8:	602b      	str	r3, [r5, #0]
 80079ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079ce:	bf18      	it	ne
 80079d0:	b236      	sxthne	r6, r6
 80079d2:	e7ef      	b.n	80079b4 <_printf_i+0xbc>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	6820      	ldr	r0, [r4, #0]
 80079d8:	1d19      	adds	r1, r3, #4
 80079da:	6029      	str	r1, [r5, #0]
 80079dc:	0601      	lsls	r1, r0, #24
 80079de:	d501      	bpl.n	80079e4 <_printf_i+0xec>
 80079e0:	681e      	ldr	r6, [r3, #0]
 80079e2:	e002      	b.n	80079ea <_printf_i+0xf2>
 80079e4:	0646      	lsls	r6, r0, #25
 80079e6:	d5fb      	bpl.n	80079e0 <_printf_i+0xe8>
 80079e8:	881e      	ldrh	r6, [r3, #0]
 80079ea:	4854      	ldr	r0, [pc, #336]	; (8007b3c <_printf_i+0x244>)
 80079ec:	2f6f      	cmp	r7, #111	; 0x6f
 80079ee:	bf0c      	ite	eq
 80079f0:	2308      	moveq	r3, #8
 80079f2:	230a      	movne	r3, #10
 80079f4:	2100      	movs	r1, #0
 80079f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079fa:	6865      	ldr	r5, [r4, #4]
 80079fc:	60a5      	str	r5, [r4, #8]
 80079fe:	2d00      	cmp	r5, #0
 8007a00:	bfa2      	ittt	ge
 8007a02:	6821      	ldrge	r1, [r4, #0]
 8007a04:	f021 0104 	bicge.w	r1, r1, #4
 8007a08:	6021      	strge	r1, [r4, #0]
 8007a0a:	b90e      	cbnz	r6, 8007a10 <_printf_i+0x118>
 8007a0c:	2d00      	cmp	r5, #0
 8007a0e:	d04d      	beq.n	8007aac <_printf_i+0x1b4>
 8007a10:	4615      	mov	r5, r2
 8007a12:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a16:	fb03 6711 	mls	r7, r3, r1, r6
 8007a1a:	5dc7      	ldrb	r7, [r0, r7]
 8007a1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a20:	4637      	mov	r7, r6
 8007a22:	42bb      	cmp	r3, r7
 8007a24:	460e      	mov	r6, r1
 8007a26:	d9f4      	bls.n	8007a12 <_printf_i+0x11a>
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d10b      	bne.n	8007a44 <_printf_i+0x14c>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	07de      	lsls	r6, r3, #31
 8007a30:	d508      	bpl.n	8007a44 <_printf_i+0x14c>
 8007a32:	6923      	ldr	r3, [r4, #16]
 8007a34:	6861      	ldr	r1, [r4, #4]
 8007a36:	4299      	cmp	r1, r3
 8007a38:	bfde      	ittt	le
 8007a3a:	2330      	movle	r3, #48	; 0x30
 8007a3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a44:	1b52      	subs	r2, r2, r5
 8007a46:	6122      	str	r2, [r4, #16]
 8007a48:	f8cd a000 	str.w	sl, [sp]
 8007a4c:	464b      	mov	r3, r9
 8007a4e:	aa03      	add	r2, sp, #12
 8007a50:	4621      	mov	r1, r4
 8007a52:	4640      	mov	r0, r8
 8007a54:	f7ff fee2 	bl	800781c <_printf_common>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d14c      	bne.n	8007af6 <_printf_i+0x1fe>
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	b004      	add	sp, #16
 8007a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a66:	4835      	ldr	r0, [pc, #212]	; (8007b3c <_printf_i+0x244>)
 8007a68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a6c:	6829      	ldr	r1, [r5, #0]
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a74:	6029      	str	r1, [r5, #0]
 8007a76:	061d      	lsls	r5, r3, #24
 8007a78:	d514      	bpl.n	8007aa4 <_printf_i+0x1ac>
 8007a7a:	07df      	lsls	r7, r3, #31
 8007a7c:	bf44      	itt	mi
 8007a7e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a82:	6023      	strmi	r3, [r4, #0]
 8007a84:	b91e      	cbnz	r6, 8007a8e <_printf_i+0x196>
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	f023 0320 	bic.w	r3, r3, #32
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	2310      	movs	r3, #16
 8007a90:	e7b0      	b.n	80079f4 <_printf_i+0xfc>
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	f043 0320 	orr.w	r3, r3, #32
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	2378      	movs	r3, #120	; 0x78
 8007a9c:	4828      	ldr	r0, [pc, #160]	; (8007b40 <_printf_i+0x248>)
 8007a9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007aa2:	e7e3      	b.n	8007a6c <_printf_i+0x174>
 8007aa4:	0659      	lsls	r1, r3, #25
 8007aa6:	bf48      	it	mi
 8007aa8:	b2b6      	uxthmi	r6, r6
 8007aaa:	e7e6      	b.n	8007a7a <_printf_i+0x182>
 8007aac:	4615      	mov	r5, r2
 8007aae:	e7bb      	b.n	8007a28 <_printf_i+0x130>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	6826      	ldr	r6, [r4, #0]
 8007ab4:	6961      	ldr	r1, [r4, #20]
 8007ab6:	1d18      	adds	r0, r3, #4
 8007ab8:	6028      	str	r0, [r5, #0]
 8007aba:	0635      	lsls	r5, r6, #24
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	d501      	bpl.n	8007ac4 <_printf_i+0x1cc>
 8007ac0:	6019      	str	r1, [r3, #0]
 8007ac2:	e002      	b.n	8007aca <_printf_i+0x1d2>
 8007ac4:	0670      	lsls	r0, r6, #25
 8007ac6:	d5fb      	bpl.n	8007ac0 <_printf_i+0x1c8>
 8007ac8:	8019      	strh	r1, [r3, #0]
 8007aca:	2300      	movs	r3, #0
 8007acc:	6123      	str	r3, [r4, #16]
 8007ace:	4615      	mov	r5, r2
 8007ad0:	e7ba      	b.n	8007a48 <_printf_i+0x150>
 8007ad2:	682b      	ldr	r3, [r5, #0]
 8007ad4:	1d1a      	adds	r2, r3, #4
 8007ad6:	602a      	str	r2, [r5, #0]
 8007ad8:	681d      	ldr	r5, [r3, #0]
 8007ada:	6862      	ldr	r2, [r4, #4]
 8007adc:	2100      	movs	r1, #0
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f7f8 fb8e 	bl	8000200 <memchr>
 8007ae4:	b108      	cbz	r0, 8007aea <_printf_i+0x1f2>
 8007ae6:	1b40      	subs	r0, r0, r5
 8007ae8:	6060      	str	r0, [r4, #4]
 8007aea:	6863      	ldr	r3, [r4, #4]
 8007aec:	6123      	str	r3, [r4, #16]
 8007aee:	2300      	movs	r3, #0
 8007af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007af4:	e7a8      	b.n	8007a48 <_printf_i+0x150>
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	462a      	mov	r2, r5
 8007afa:	4649      	mov	r1, r9
 8007afc:	4640      	mov	r0, r8
 8007afe:	47d0      	blx	sl
 8007b00:	3001      	adds	r0, #1
 8007b02:	d0ab      	beq.n	8007a5c <_printf_i+0x164>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	079b      	lsls	r3, r3, #30
 8007b08:	d413      	bmi.n	8007b32 <_printf_i+0x23a>
 8007b0a:	68e0      	ldr	r0, [r4, #12]
 8007b0c:	9b03      	ldr	r3, [sp, #12]
 8007b0e:	4298      	cmp	r0, r3
 8007b10:	bfb8      	it	lt
 8007b12:	4618      	movlt	r0, r3
 8007b14:	e7a4      	b.n	8007a60 <_printf_i+0x168>
 8007b16:	2301      	movs	r3, #1
 8007b18:	4632      	mov	r2, r6
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	47d0      	blx	sl
 8007b20:	3001      	adds	r0, #1
 8007b22:	d09b      	beq.n	8007a5c <_printf_i+0x164>
 8007b24:	3501      	adds	r5, #1
 8007b26:	68e3      	ldr	r3, [r4, #12]
 8007b28:	9903      	ldr	r1, [sp, #12]
 8007b2a:	1a5b      	subs	r3, r3, r1
 8007b2c:	42ab      	cmp	r3, r5
 8007b2e:	dcf2      	bgt.n	8007b16 <_printf_i+0x21e>
 8007b30:	e7eb      	b.n	8007b0a <_printf_i+0x212>
 8007b32:	2500      	movs	r5, #0
 8007b34:	f104 0619 	add.w	r6, r4, #25
 8007b38:	e7f5      	b.n	8007b26 <_printf_i+0x22e>
 8007b3a:	bf00      	nop
 8007b3c:	0800cbb4 	.word	0x0800cbb4
 8007b40:	0800cbc5 	.word	0x0800cbc5

08007b44 <iprintf>:
 8007b44:	b40f      	push	{r0, r1, r2, r3}
 8007b46:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <iprintf+0x2c>)
 8007b48:	b513      	push	{r0, r1, r4, lr}
 8007b4a:	681c      	ldr	r4, [r3, #0]
 8007b4c:	b124      	cbz	r4, 8007b58 <iprintf+0x14>
 8007b4e:	69a3      	ldr	r3, [r4, #24]
 8007b50:	b913      	cbnz	r3, 8007b58 <iprintf+0x14>
 8007b52:	4620      	mov	r0, r4
 8007b54:	f7ff f924 	bl	8006da0 <__sinit>
 8007b58:	ab05      	add	r3, sp, #20
 8007b5a:	9a04      	ldr	r2, [sp, #16]
 8007b5c:	68a1      	ldr	r1, [r4, #8]
 8007b5e:	9301      	str	r3, [sp, #4]
 8007b60:	4620      	mov	r0, r4
 8007b62:	f001 fda3 	bl	80096ac <_vfiprintf_r>
 8007b66:	b002      	add	sp, #8
 8007b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b6c:	b004      	add	sp, #16
 8007b6e:	4770      	bx	lr
 8007b70:	20000014 	.word	0x20000014

08007b74 <_puts_r>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	460e      	mov	r6, r1
 8007b78:	4605      	mov	r5, r0
 8007b7a:	b118      	cbz	r0, 8007b84 <_puts_r+0x10>
 8007b7c:	6983      	ldr	r3, [r0, #24]
 8007b7e:	b90b      	cbnz	r3, 8007b84 <_puts_r+0x10>
 8007b80:	f7ff f90e 	bl	8006da0 <__sinit>
 8007b84:	69ab      	ldr	r3, [r5, #24]
 8007b86:	68ac      	ldr	r4, [r5, #8]
 8007b88:	b913      	cbnz	r3, 8007b90 <_puts_r+0x1c>
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f7ff f908 	bl	8006da0 <__sinit>
 8007b90:	4b2c      	ldr	r3, [pc, #176]	; (8007c44 <_puts_r+0xd0>)
 8007b92:	429c      	cmp	r4, r3
 8007b94:	d120      	bne.n	8007bd8 <_puts_r+0x64>
 8007b96:	686c      	ldr	r4, [r5, #4]
 8007b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b9a:	07db      	lsls	r3, r3, #31
 8007b9c:	d405      	bmi.n	8007baa <_puts_r+0x36>
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	0598      	lsls	r0, r3, #22
 8007ba2:	d402      	bmi.n	8007baa <_puts_r+0x36>
 8007ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ba6:	f7ff f9e6 	bl	8006f76 <__retarget_lock_acquire_recursive>
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	0719      	lsls	r1, r3, #28
 8007bae:	d51d      	bpl.n	8007bec <_puts_r+0x78>
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	b1db      	cbz	r3, 8007bec <_puts_r+0x78>
 8007bb4:	3e01      	subs	r6, #1
 8007bb6:	68a3      	ldr	r3, [r4, #8]
 8007bb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	60a3      	str	r3, [r4, #8]
 8007bc0:	bb39      	cbnz	r1, 8007c12 <_puts_r+0x9e>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da38      	bge.n	8007c38 <_puts_r+0xc4>
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	210a      	movs	r1, #10
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f000 f89c 	bl	8007d08 <__swbuf_r>
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d011      	beq.n	8007bf8 <_puts_r+0x84>
 8007bd4:	250a      	movs	r5, #10
 8007bd6:	e011      	b.n	8007bfc <_puts_r+0x88>
 8007bd8:	4b1b      	ldr	r3, [pc, #108]	; (8007c48 <_puts_r+0xd4>)
 8007bda:	429c      	cmp	r4, r3
 8007bdc:	d101      	bne.n	8007be2 <_puts_r+0x6e>
 8007bde:	68ac      	ldr	r4, [r5, #8]
 8007be0:	e7da      	b.n	8007b98 <_puts_r+0x24>
 8007be2:	4b1a      	ldr	r3, [pc, #104]	; (8007c4c <_puts_r+0xd8>)
 8007be4:	429c      	cmp	r4, r3
 8007be6:	bf08      	it	eq
 8007be8:	68ec      	ldreq	r4, [r5, #12]
 8007bea:	e7d5      	b.n	8007b98 <_puts_r+0x24>
 8007bec:	4621      	mov	r1, r4
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 f8fc 	bl	8007dec <__swsetup_r>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d0dd      	beq.n	8007bb4 <_puts_r+0x40>
 8007bf8:	f04f 35ff 	mov.w	r5, #4294967295
 8007bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bfe:	07da      	lsls	r2, r3, #31
 8007c00:	d405      	bmi.n	8007c0e <_puts_r+0x9a>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	059b      	lsls	r3, r3, #22
 8007c06:	d402      	bmi.n	8007c0e <_puts_r+0x9a>
 8007c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c0a:	f7ff f9b5 	bl	8006f78 <__retarget_lock_release_recursive>
 8007c0e:	4628      	mov	r0, r5
 8007c10:	bd70      	pop	{r4, r5, r6, pc}
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	da04      	bge.n	8007c20 <_puts_r+0xac>
 8007c16:	69a2      	ldr	r2, [r4, #24]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	dc06      	bgt.n	8007c2a <_puts_r+0xb6>
 8007c1c:	290a      	cmp	r1, #10
 8007c1e:	d004      	beq.n	8007c2a <_puts_r+0xb6>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	6022      	str	r2, [r4, #0]
 8007c26:	7019      	strb	r1, [r3, #0]
 8007c28:	e7c5      	b.n	8007bb6 <_puts_r+0x42>
 8007c2a:	4622      	mov	r2, r4
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	f000 f86b 	bl	8007d08 <__swbuf_r>
 8007c32:	3001      	adds	r0, #1
 8007c34:	d1bf      	bne.n	8007bb6 <_puts_r+0x42>
 8007c36:	e7df      	b.n	8007bf8 <_puts_r+0x84>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	250a      	movs	r5, #10
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	6022      	str	r2, [r4, #0]
 8007c40:	701d      	strb	r5, [r3, #0]
 8007c42:	e7db      	b.n	8007bfc <_puts_r+0x88>
 8007c44:	0800cb54 	.word	0x0800cb54
 8007c48:	0800cb74 	.word	0x0800cb74
 8007c4c:	0800cb34 	.word	0x0800cb34

08007c50 <puts>:
 8007c50:	4b02      	ldr	r3, [pc, #8]	; (8007c5c <puts+0xc>)
 8007c52:	4601      	mov	r1, r0
 8007c54:	6818      	ldr	r0, [r3, #0]
 8007c56:	f7ff bf8d 	b.w	8007b74 <_puts_r>
 8007c5a:	bf00      	nop
 8007c5c:	20000014 	.word	0x20000014

08007c60 <_sbrk_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d06      	ldr	r5, [pc, #24]	; (8007c7c <_sbrk_r+0x1c>)
 8007c64:	2300      	movs	r3, #0
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	f7f9 feb0 	bl	80019d0 <_sbrk>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_sbrk_r+0x1a>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_sbrk_r+0x1a>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	2000a398 	.word	0x2000a398

08007c80 <__sread>:
 8007c80:	b510      	push	{r4, lr}
 8007c82:	460c      	mov	r4, r1
 8007c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c88:	f001 fe40 	bl	800990c <_read_r>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	bfab      	itete	ge
 8007c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c92:	89a3      	ldrhlt	r3, [r4, #12]
 8007c94:	181b      	addge	r3, r3, r0
 8007c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c9a:	bfac      	ite	ge
 8007c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c9e:	81a3      	strhlt	r3, [r4, #12]
 8007ca0:	bd10      	pop	{r4, pc}

08007ca2 <__swrite>:
 8007ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca6:	461f      	mov	r7, r3
 8007ca8:	898b      	ldrh	r3, [r1, #12]
 8007caa:	05db      	lsls	r3, r3, #23
 8007cac:	4605      	mov	r5, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	4616      	mov	r6, r2
 8007cb2:	d505      	bpl.n	8007cc0 <__swrite+0x1e>
 8007cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb8:	2302      	movs	r3, #2
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f001 f8ee 	bl	8008e9c <_lseek_r>
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cca:	81a3      	strh	r3, [r4, #12]
 8007ccc:	4632      	mov	r2, r6
 8007cce:	463b      	mov	r3, r7
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd6:	f000 b877 	b.w	8007dc8 <_write_r>

08007cda <__sseek>:
 8007cda:	b510      	push	{r4, lr}
 8007cdc:	460c      	mov	r4, r1
 8007cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce2:	f001 f8db 	bl	8008e9c <_lseek_r>
 8007ce6:	1c43      	adds	r3, r0, #1
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	bf15      	itete	ne
 8007cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cf6:	81a3      	strheq	r3, [r4, #12]
 8007cf8:	bf18      	it	ne
 8007cfa:	81a3      	strhne	r3, [r4, #12]
 8007cfc:	bd10      	pop	{r4, pc}

08007cfe <__sclose>:
 8007cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d02:	f000 b8e1 	b.w	8007ec8 <_close_r>
	...

08007d08 <__swbuf_r>:
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	460e      	mov	r6, r1
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	4605      	mov	r5, r0
 8007d10:	b118      	cbz	r0, 8007d1a <__swbuf_r+0x12>
 8007d12:	6983      	ldr	r3, [r0, #24]
 8007d14:	b90b      	cbnz	r3, 8007d1a <__swbuf_r+0x12>
 8007d16:	f7ff f843 	bl	8006da0 <__sinit>
 8007d1a:	4b21      	ldr	r3, [pc, #132]	; (8007da0 <__swbuf_r+0x98>)
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	d12b      	bne.n	8007d78 <__swbuf_r+0x70>
 8007d20:	686c      	ldr	r4, [r5, #4]
 8007d22:	69a3      	ldr	r3, [r4, #24]
 8007d24:	60a3      	str	r3, [r4, #8]
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	071a      	lsls	r2, r3, #28
 8007d2a:	d52f      	bpl.n	8007d8c <__swbuf_r+0x84>
 8007d2c:	6923      	ldr	r3, [r4, #16]
 8007d2e:	b36b      	cbz	r3, 8007d8c <__swbuf_r+0x84>
 8007d30:	6923      	ldr	r3, [r4, #16]
 8007d32:	6820      	ldr	r0, [r4, #0]
 8007d34:	1ac0      	subs	r0, r0, r3
 8007d36:	6963      	ldr	r3, [r4, #20]
 8007d38:	b2f6      	uxtb	r6, r6
 8007d3a:	4283      	cmp	r3, r0
 8007d3c:	4637      	mov	r7, r6
 8007d3e:	dc04      	bgt.n	8007d4a <__swbuf_r+0x42>
 8007d40:	4621      	mov	r1, r4
 8007d42:	4628      	mov	r0, r5
 8007d44:	f7fe ff98 	bl	8006c78 <_fflush_r>
 8007d48:	bb30      	cbnz	r0, 8007d98 <__swbuf_r+0x90>
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	60a3      	str	r3, [r4, #8]
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	6022      	str	r2, [r4, #0]
 8007d56:	701e      	strb	r6, [r3, #0]
 8007d58:	6963      	ldr	r3, [r4, #20]
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	4283      	cmp	r3, r0
 8007d5e:	d004      	beq.n	8007d6a <__swbuf_r+0x62>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	07db      	lsls	r3, r3, #31
 8007d64:	d506      	bpl.n	8007d74 <__swbuf_r+0x6c>
 8007d66:	2e0a      	cmp	r6, #10
 8007d68:	d104      	bne.n	8007d74 <__swbuf_r+0x6c>
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	f7fe ff83 	bl	8006c78 <_fflush_r>
 8007d72:	b988      	cbnz	r0, 8007d98 <__swbuf_r+0x90>
 8007d74:	4638      	mov	r0, r7
 8007d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d78:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <__swbuf_r+0x9c>)
 8007d7a:	429c      	cmp	r4, r3
 8007d7c:	d101      	bne.n	8007d82 <__swbuf_r+0x7a>
 8007d7e:	68ac      	ldr	r4, [r5, #8]
 8007d80:	e7cf      	b.n	8007d22 <__swbuf_r+0x1a>
 8007d82:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <__swbuf_r+0xa0>)
 8007d84:	429c      	cmp	r4, r3
 8007d86:	bf08      	it	eq
 8007d88:	68ec      	ldreq	r4, [r5, #12]
 8007d8a:	e7ca      	b.n	8007d22 <__swbuf_r+0x1a>
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f000 f82c 	bl	8007dec <__swsetup_r>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d0cb      	beq.n	8007d30 <__swbuf_r+0x28>
 8007d98:	f04f 37ff 	mov.w	r7, #4294967295
 8007d9c:	e7ea      	b.n	8007d74 <__swbuf_r+0x6c>
 8007d9e:	bf00      	nop
 8007da0:	0800cb54 	.word	0x0800cb54
 8007da4:	0800cb74 	.word	0x0800cb74
 8007da8:	0800cb34 	.word	0x0800cb34

08007dac <__ascii_wctomb>:
 8007dac:	b149      	cbz	r1, 8007dc2 <__ascii_wctomb+0x16>
 8007dae:	2aff      	cmp	r2, #255	; 0xff
 8007db0:	bf85      	ittet	hi
 8007db2:	238a      	movhi	r3, #138	; 0x8a
 8007db4:	6003      	strhi	r3, [r0, #0]
 8007db6:	700a      	strbls	r2, [r1, #0]
 8007db8:	f04f 30ff 	movhi.w	r0, #4294967295
 8007dbc:	bf98      	it	ls
 8007dbe:	2001      	movls	r0, #1
 8007dc0:	4770      	bx	lr
 8007dc2:	4608      	mov	r0, r1
 8007dc4:	4770      	bx	lr
	...

08007dc8 <_write_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d07      	ldr	r5, [pc, #28]	; (8007de8 <_write_r+0x20>)
 8007dcc:	4604      	mov	r4, r0
 8007dce:	4608      	mov	r0, r1
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	602a      	str	r2, [r5, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f7f9 fda9 	bl	800192e <_write>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_write_r+0x1e>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_write_r+0x1e>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	2000a398 	.word	0x2000a398

08007dec <__swsetup_r>:
 8007dec:	4b32      	ldr	r3, [pc, #200]	; (8007eb8 <__swsetup_r+0xcc>)
 8007dee:	b570      	push	{r4, r5, r6, lr}
 8007df0:	681d      	ldr	r5, [r3, #0]
 8007df2:	4606      	mov	r6, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	b125      	cbz	r5, 8007e02 <__swsetup_r+0x16>
 8007df8:	69ab      	ldr	r3, [r5, #24]
 8007dfa:	b913      	cbnz	r3, 8007e02 <__swsetup_r+0x16>
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f7fe ffcf 	bl	8006da0 <__sinit>
 8007e02:	4b2e      	ldr	r3, [pc, #184]	; (8007ebc <__swsetup_r+0xd0>)
 8007e04:	429c      	cmp	r4, r3
 8007e06:	d10f      	bne.n	8007e28 <__swsetup_r+0x3c>
 8007e08:	686c      	ldr	r4, [r5, #4]
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e10:	0719      	lsls	r1, r3, #28
 8007e12:	d42c      	bmi.n	8007e6e <__swsetup_r+0x82>
 8007e14:	06dd      	lsls	r5, r3, #27
 8007e16:	d411      	bmi.n	8007e3c <__swsetup_r+0x50>
 8007e18:	2309      	movs	r3, #9
 8007e1a:	6033      	str	r3, [r6, #0]
 8007e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e20:	81a3      	strh	r3, [r4, #12]
 8007e22:	f04f 30ff 	mov.w	r0, #4294967295
 8007e26:	e03e      	b.n	8007ea6 <__swsetup_r+0xba>
 8007e28:	4b25      	ldr	r3, [pc, #148]	; (8007ec0 <__swsetup_r+0xd4>)
 8007e2a:	429c      	cmp	r4, r3
 8007e2c:	d101      	bne.n	8007e32 <__swsetup_r+0x46>
 8007e2e:	68ac      	ldr	r4, [r5, #8]
 8007e30:	e7eb      	b.n	8007e0a <__swsetup_r+0x1e>
 8007e32:	4b24      	ldr	r3, [pc, #144]	; (8007ec4 <__swsetup_r+0xd8>)
 8007e34:	429c      	cmp	r4, r3
 8007e36:	bf08      	it	eq
 8007e38:	68ec      	ldreq	r4, [r5, #12]
 8007e3a:	e7e6      	b.n	8007e0a <__swsetup_r+0x1e>
 8007e3c:	0758      	lsls	r0, r3, #29
 8007e3e:	d512      	bpl.n	8007e66 <__swsetup_r+0x7a>
 8007e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e42:	b141      	cbz	r1, 8007e56 <__swsetup_r+0x6a>
 8007e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	d002      	beq.n	8007e52 <__swsetup_r+0x66>
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f7ff f92f 	bl	80070b0 <_free_r>
 8007e52:	2300      	movs	r3, #0
 8007e54:	6363      	str	r3, [r4, #52]	; 0x34
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	6063      	str	r3, [r4, #4]
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	f043 0308 	orr.w	r3, r3, #8
 8007e6c:	81a3      	strh	r3, [r4, #12]
 8007e6e:	6923      	ldr	r3, [r4, #16]
 8007e70:	b94b      	cbnz	r3, 8007e86 <__swsetup_r+0x9a>
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e7c:	d003      	beq.n	8007e86 <__swsetup_r+0x9a>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4630      	mov	r0, r6
 8007e82:	f7ff f89f 	bl	8006fc4 <__smakebuf_r>
 8007e86:	89a0      	ldrh	r0, [r4, #12]
 8007e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e8c:	f010 0301 	ands.w	r3, r0, #1
 8007e90:	d00a      	beq.n	8007ea8 <__swsetup_r+0xbc>
 8007e92:	2300      	movs	r3, #0
 8007e94:	60a3      	str	r3, [r4, #8]
 8007e96:	6963      	ldr	r3, [r4, #20]
 8007e98:	425b      	negs	r3, r3
 8007e9a:	61a3      	str	r3, [r4, #24]
 8007e9c:	6923      	ldr	r3, [r4, #16]
 8007e9e:	b943      	cbnz	r3, 8007eb2 <__swsetup_r+0xc6>
 8007ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ea4:	d1ba      	bne.n	8007e1c <__swsetup_r+0x30>
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
 8007ea8:	0781      	lsls	r1, r0, #30
 8007eaa:	bf58      	it	pl
 8007eac:	6963      	ldrpl	r3, [r4, #20]
 8007eae:	60a3      	str	r3, [r4, #8]
 8007eb0:	e7f4      	b.n	8007e9c <__swsetup_r+0xb0>
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	e7f7      	b.n	8007ea6 <__swsetup_r+0xba>
 8007eb6:	bf00      	nop
 8007eb8:	20000014 	.word	0x20000014
 8007ebc:	0800cb54 	.word	0x0800cb54
 8007ec0:	0800cb74 	.word	0x0800cb74
 8007ec4:	0800cb34 	.word	0x0800cb34

08007ec8 <_close_r>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	4d06      	ldr	r5, [pc, #24]	; (8007ee4 <_close_r+0x1c>)
 8007ecc:	2300      	movs	r3, #0
 8007ece:	4604      	mov	r4, r0
 8007ed0:	4608      	mov	r0, r1
 8007ed2:	602b      	str	r3, [r5, #0]
 8007ed4:	f7f9 fd47 	bl	8001966 <_close>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d102      	bne.n	8007ee2 <_close_r+0x1a>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	b103      	cbz	r3, 8007ee2 <_close_r+0x1a>
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
 8007ee4:	2000a398 	.word	0x2000a398

08007ee8 <quorem>:
 8007ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	6903      	ldr	r3, [r0, #16]
 8007eee:	690c      	ldr	r4, [r1, #16]
 8007ef0:	42a3      	cmp	r3, r4
 8007ef2:	4607      	mov	r7, r0
 8007ef4:	f2c0 8081 	blt.w	8007ffa <quorem+0x112>
 8007ef8:	3c01      	subs	r4, #1
 8007efa:	f101 0814 	add.w	r8, r1, #20
 8007efe:	f100 0514 	add.w	r5, r0, #20
 8007f02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f06:	9301      	str	r3, [sp, #4]
 8007f08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f10:	3301      	adds	r3, #1
 8007f12:	429a      	cmp	r2, r3
 8007f14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f20:	d331      	bcc.n	8007f86 <quorem+0x9e>
 8007f22:	f04f 0e00 	mov.w	lr, #0
 8007f26:	4640      	mov	r0, r8
 8007f28:	46ac      	mov	ip, r5
 8007f2a:	46f2      	mov	sl, lr
 8007f2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f30:	b293      	uxth	r3, r2
 8007f32:	fb06 e303 	mla	r3, r6, r3, lr
 8007f36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	ebaa 0303 	sub.w	r3, sl, r3
 8007f40:	f8dc a000 	ldr.w	sl, [ip]
 8007f44:	0c12      	lsrs	r2, r2, #16
 8007f46:	fa13 f38a 	uxtah	r3, r3, sl
 8007f4a:	fb06 e202 	mla	r2, r6, r2, lr
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	9b00      	ldr	r3, [sp, #0]
 8007f52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f56:	b292      	uxth	r2, r2
 8007f58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f60:	f8bd 3000 	ldrh.w	r3, [sp]
 8007f64:	4581      	cmp	r9, r0
 8007f66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f6a:	f84c 3b04 	str.w	r3, [ip], #4
 8007f6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f72:	d2db      	bcs.n	8007f2c <quorem+0x44>
 8007f74:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f78:	b92b      	cbnz	r3, 8007f86 <quorem+0x9e>
 8007f7a:	9b01      	ldr	r3, [sp, #4]
 8007f7c:	3b04      	subs	r3, #4
 8007f7e:	429d      	cmp	r5, r3
 8007f80:	461a      	mov	r2, r3
 8007f82:	d32e      	bcc.n	8007fe2 <quorem+0xfa>
 8007f84:	613c      	str	r4, [r7, #16]
 8007f86:	4638      	mov	r0, r7
 8007f88:	f001 fa30 	bl	80093ec <__mcmp>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	db24      	blt.n	8007fda <quorem+0xf2>
 8007f90:	3601      	adds	r6, #1
 8007f92:	4628      	mov	r0, r5
 8007f94:	f04f 0c00 	mov.w	ip, #0
 8007f98:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f9c:	f8d0 e000 	ldr.w	lr, [r0]
 8007fa0:	b293      	uxth	r3, r2
 8007fa2:	ebac 0303 	sub.w	r3, ip, r3
 8007fa6:	0c12      	lsrs	r2, r2, #16
 8007fa8:	fa13 f38e 	uxtah	r3, r3, lr
 8007fac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007fb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fba:	45c1      	cmp	r9, r8
 8007fbc:	f840 3b04 	str.w	r3, [r0], #4
 8007fc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007fc4:	d2e8      	bcs.n	8007f98 <quorem+0xb0>
 8007fc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fce:	b922      	cbnz	r2, 8007fda <quorem+0xf2>
 8007fd0:	3b04      	subs	r3, #4
 8007fd2:	429d      	cmp	r5, r3
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	d30a      	bcc.n	8007fee <quorem+0x106>
 8007fd8:	613c      	str	r4, [r7, #16]
 8007fda:	4630      	mov	r0, r6
 8007fdc:	b003      	add	sp, #12
 8007fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe2:	6812      	ldr	r2, [r2, #0]
 8007fe4:	3b04      	subs	r3, #4
 8007fe6:	2a00      	cmp	r2, #0
 8007fe8:	d1cc      	bne.n	8007f84 <quorem+0x9c>
 8007fea:	3c01      	subs	r4, #1
 8007fec:	e7c7      	b.n	8007f7e <quorem+0x96>
 8007fee:	6812      	ldr	r2, [r2, #0]
 8007ff0:	3b04      	subs	r3, #4
 8007ff2:	2a00      	cmp	r2, #0
 8007ff4:	d1f0      	bne.n	8007fd8 <quorem+0xf0>
 8007ff6:	3c01      	subs	r4, #1
 8007ff8:	e7eb      	b.n	8007fd2 <quorem+0xea>
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	e7ee      	b.n	8007fdc <quorem+0xf4>
	...

08008000 <_dtoa_r>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	ed2d 8b04 	vpush	{d8-d9}
 8008008:	ec57 6b10 	vmov	r6, r7, d0
 800800c:	b093      	sub	sp, #76	; 0x4c
 800800e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008010:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008014:	9106      	str	r1, [sp, #24]
 8008016:	ee10 aa10 	vmov	sl, s0
 800801a:	4604      	mov	r4, r0
 800801c:	9209      	str	r2, [sp, #36]	; 0x24
 800801e:	930c      	str	r3, [sp, #48]	; 0x30
 8008020:	46bb      	mov	fp, r7
 8008022:	b975      	cbnz	r5, 8008042 <_dtoa_r+0x42>
 8008024:	2010      	movs	r0, #16
 8008026:	f000 ff4b 	bl	8008ec0 <malloc>
 800802a:	4602      	mov	r2, r0
 800802c:	6260      	str	r0, [r4, #36]	; 0x24
 800802e:	b920      	cbnz	r0, 800803a <_dtoa_r+0x3a>
 8008030:	4ba7      	ldr	r3, [pc, #668]	; (80082d0 <_dtoa_r+0x2d0>)
 8008032:	21ea      	movs	r1, #234	; 0xea
 8008034:	48a7      	ldr	r0, [pc, #668]	; (80082d4 <_dtoa_r+0x2d4>)
 8008036:	f001 fc83 	bl	8009940 <__assert_func>
 800803a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800803e:	6005      	str	r5, [r0, #0]
 8008040:	60c5      	str	r5, [r0, #12]
 8008042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008044:	6819      	ldr	r1, [r3, #0]
 8008046:	b151      	cbz	r1, 800805e <_dtoa_r+0x5e>
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	604a      	str	r2, [r1, #4]
 800804c:	2301      	movs	r3, #1
 800804e:	4093      	lsls	r3, r2
 8008050:	608b      	str	r3, [r1, #8]
 8008052:	4620      	mov	r0, r4
 8008054:	f000 ff88 	bl	8008f68 <_Bfree>
 8008058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	1e3b      	subs	r3, r7, #0
 8008060:	bfaa      	itet	ge
 8008062:	2300      	movge	r3, #0
 8008064:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008068:	f8c8 3000 	strge.w	r3, [r8]
 800806c:	4b9a      	ldr	r3, [pc, #616]	; (80082d8 <_dtoa_r+0x2d8>)
 800806e:	bfbc      	itt	lt
 8008070:	2201      	movlt	r2, #1
 8008072:	f8c8 2000 	strlt.w	r2, [r8]
 8008076:	ea33 030b 	bics.w	r3, r3, fp
 800807a:	d11b      	bne.n	80080b4 <_dtoa_r+0xb4>
 800807c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800807e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008082:	6013      	str	r3, [r2, #0]
 8008084:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008088:	4333      	orrs	r3, r6
 800808a:	f000 8592 	beq.w	8008bb2 <_dtoa_r+0xbb2>
 800808e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008090:	b963      	cbnz	r3, 80080ac <_dtoa_r+0xac>
 8008092:	4b92      	ldr	r3, [pc, #584]	; (80082dc <_dtoa_r+0x2dc>)
 8008094:	e022      	b.n	80080dc <_dtoa_r+0xdc>
 8008096:	4b92      	ldr	r3, [pc, #584]	; (80082e0 <_dtoa_r+0x2e0>)
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	3308      	adds	r3, #8
 800809c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800809e:	6013      	str	r3, [r2, #0]
 80080a0:	9801      	ldr	r0, [sp, #4]
 80080a2:	b013      	add	sp, #76	; 0x4c
 80080a4:	ecbd 8b04 	vpop	{d8-d9}
 80080a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ac:	4b8b      	ldr	r3, [pc, #556]	; (80082dc <_dtoa_r+0x2dc>)
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	3303      	adds	r3, #3
 80080b2:	e7f3      	b.n	800809c <_dtoa_r+0x9c>
 80080b4:	2200      	movs	r2, #0
 80080b6:	2300      	movs	r3, #0
 80080b8:	4650      	mov	r0, sl
 80080ba:	4659      	mov	r1, fp
 80080bc:	f7f8 fd14 	bl	8000ae8 <__aeabi_dcmpeq>
 80080c0:	ec4b ab19 	vmov	d9, sl, fp
 80080c4:	4680      	mov	r8, r0
 80080c6:	b158      	cbz	r0, 80080e0 <_dtoa_r+0xe0>
 80080c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080ca:	2301      	movs	r3, #1
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 856b 	beq.w	8008bac <_dtoa_r+0xbac>
 80080d6:	4883      	ldr	r0, [pc, #524]	; (80082e4 <_dtoa_r+0x2e4>)
 80080d8:	6018      	str	r0, [r3, #0]
 80080da:	1e43      	subs	r3, r0, #1
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	e7df      	b.n	80080a0 <_dtoa_r+0xa0>
 80080e0:	ec4b ab10 	vmov	d0, sl, fp
 80080e4:	aa10      	add	r2, sp, #64	; 0x40
 80080e6:	a911      	add	r1, sp, #68	; 0x44
 80080e8:	4620      	mov	r0, r4
 80080ea:	f001 fa25 	bl	8009538 <__d2b>
 80080ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80080f2:	ee08 0a10 	vmov	s16, r0
 80080f6:	2d00      	cmp	r5, #0
 80080f8:	f000 8084 	beq.w	8008204 <_dtoa_r+0x204>
 80080fc:	ee19 3a90 	vmov	r3, s19
 8008100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008104:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008108:	4656      	mov	r6, sl
 800810a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800810e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008112:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008116:	4b74      	ldr	r3, [pc, #464]	; (80082e8 <_dtoa_r+0x2e8>)
 8008118:	2200      	movs	r2, #0
 800811a:	4630      	mov	r0, r6
 800811c:	4639      	mov	r1, r7
 800811e:	f7f8 f8c3 	bl	80002a8 <__aeabi_dsub>
 8008122:	a365      	add	r3, pc, #404	; (adr r3, 80082b8 <_dtoa_r+0x2b8>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f7f8 fa76 	bl	8000618 <__aeabi_dmul>
 800812c:	a364      	add	r3, pc, #400	; (adr r3, 80082c0 <_dtoa_r+0x2c0>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	f7f8 f8bb 	bl	80002ac <__adddf3>
 8008136:	4606      	mov	r6, r0
 8008138:	4628      	mov	r0, r5
 800813a:	460f      	mov	r7, r1
 800813c:	f7f8 fa02 	bl	8000544 <__aeabi_i2d>
 8008140:	a361      	add	r3, pc, #388	; (adr r3, 80082c8 <_dtoa_r+0x2c8>)
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	f7f8 fa67 	bl	8000618 <__aeabi_dmul>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	4630      	mov	r0, r6
 8008150:	4639      	mov	r1, r7
 8008152:	f7f8 f8ab 	bl	80002ac <__adddf3>
 8008156:	4606      	mov	r6, r0
 8008158:	460f      	mov	r7, r1
 800815a:	f7f8 fd0d 	bl	8000b78 <__aeabi_d2iz>
 800815e:	2200      	movs	r2, #0
 8008160:	9000      	str	r0, [sp, #0]
 8008162:	2300      	movs	r3, #0
 8008164:	4630      	mov	r0, r6
 8008166:	4639      	mov	r1, r7
 8008168:	f7f8 fcc8 	bl	8000afc <__aeabi_dcmplt>
 800816c:	b150      	cbz	r0, 8008184 <_dtoa_r+0x184>
 800816e:	9800      	ldr	r0, [sp, #0]
 8008170:	f7f8 f9e8 	bl	8000544 <__aeabi_i2d>
 8008174:	4632      	mov	r2, r6
 8008176:	463b      	mov	r3, r7
 8008178:	f7f8 fcb6 	bl	8000ae8 <__aeabi_dcmpeq>
 800817c:	b910      	cbnz	r0, 8008184 <_dtoa_r+0x184>
 800817e:	9b00      	ldr	r3, [sp, #0]
 8008180:	3b01      	subs	r3, #1
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	9b00      	ldr	r3, [sp, #0]
 8008186:	2b16      	cmp	r3, #22
 8008188:	d85a      	bhi.n	8008240 <_dtoa_r+0x240>
 800818a:	9a00      	ldr	r2, [sp, #0]
 800818c:	4b57      	ldr	r3, [pc, #348]	; (80082ec <_dtoa_r+0x2ec>)
 800818e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	ec51 0b19 	vmov	r0, r1, d9
 800819a:	f7f8 fcaf 	bl	8000afc <__aeabi_dcmplt>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d050      	beq.n	8008244 <_dtoa_r+0x244>
 80081a2:	9b00      	ldr	r3, [sp, #0]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	2300      	movs	r3, #0
 80081aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80081ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081ae:	1b5d      	subs	r5, r3, r5
 80081b0:	1e6b      	subs	r3, r5, #1
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	bf45      	ittet	mi
 80081b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80081ba:	9304      	strmi	r3, [sp, #16]
 80081bc:	2300      	movpl	r3, #0
 80081be:	2300      	movmi	r3, #0
 80081c0:	bf4c      	ite	mi
 80081c2:	9305      	strmi	r3, [sp, #20]
 80081c4:	9304      	strpl	r3, [sp, #16]
 80081c6:	9b00      	ldr	r3, [sp, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	db3d      	blt.n	8008248 <_dtoa_r+0x248>
 80081cc:	9b05      	ldr	r3, [sp, #20]
 80081ce:	9a00      	ldr	r2, [sp, #0]
 80081d0:	920a      	str	r2, [sp, #40]	; 0x28
 80081d2:	4413      	add	r3, r2
 80081d4:	9305      	str	r3, [sp, #20]
 80081d6:	2300      	movs	r3, #0
 80081d8:	9307      	str	r3, [sp, #28]
 80081da:	9b06      	ldr	r3, [sp, #24]
 80081dc:	2b09      	cmp	r3, #9
 80081de:	f200 8089 	bhi.w	80082f4 <_dtoa_r+0x2f4>
 80081e2:	2b05      	cmp	r3, #5
 80081e4:	bfc4      	itt	gt
 80081e6:	3b04      	subgt	r3, #4
 80081e8:	9306      	strgt	r3, [sp, #24]
 80081ea:	9b06      	ldr	r3, [sp, #24]
 80081ec:	f1a3 0302 	sub.w	r3, r3, #2
 80081f0:	bfcc      	ite	gt
 80081f2:	2500      	movgt	r5, #0
 80081f4:	2501      	movle	r5, #1
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	f200 8087 	bhi.w	800830a <_dtoa_r+0x30a>
 80081fc:	e8df f003 	tbb	[pc, r3]
 8008200:	59383a2d 	.word	0x59383a2d
 8008204:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008208:	441d      	add	r5, r3
 800820a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800820e:	2b20      	cmp	r3, #32
 8008210:	bfc1      	itttt	gt
 8008212:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008216:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800821a:	fa0b f303 	lslgt.w	r3, fp, r3
 800821e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008222:	bfda      	itte	le
 8008224:	f1c3 0320 	rsble	r3, r3, #32
 8008228:	fa06 f003 	lslle.w	r0, r6, r3
 800822c:	4318      	orrgt	r0, r3
 800822e:	f7f8 f979 	bl	8000524 <__aeabi_ui2d>
 8008232:	2301      	movs	r3, #1
 8008234:	4606      	mov	r6, r0
 8008236:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800823a:	3d01      	subs	r5, #1
 800823c:	930e      	str	r3, [sp, #56]	; 0x38
 800823e:	e76a      	b.n	8008116 <_dtoa_r+0x116>
 8008240:	2301      	movs	r3, #1
 8008242:	e7b2      	b.n	80081aa <_dtoa_r+0x1aa>
 8008244:	900b      	str	r0, [sp, #44]	; 0x2c
 8008246:	e7b1      	b.n	80081ac <_dtoa_r+0x1ac>
 8008248:	9b04      	ldr	r3, [sp, #16]
 800824a:	9a00      	ldr	r2, [sp, #0]
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	9304      	str	r3, [sp, #16]
 8008250:	4253      	negs	r3, r2
 8008252:	9307      	str	r3, [sp, #28]
 8008254:	2300      	movs	r3, #0
 8008256:	930a      	str	r3, [sp, #40]	; 0x28
 8008258:	e7bf      	b.n	80081da <_dtoa_r+0x1da>
 800825a:	2300      	movs	r3, #0
 800825c:	9308      	str	r3, [sp, #32]
 800825e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008260:	2b00      	cmp	r3, #0
 8008262:	dc55      	bgt.n	8008310 <_dtoa_r+0x310>
 8008264:	2301      	movs	r3, #1
 8008266:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800826a:	461a      	mov	r2, r3
 800826c:	9209      	str	r2, [sp, #36]	; 0x24
 800826e:	e00c      	b.n	800828a <_dtoa_r+0x28a>
 8008270:	2301      	movs	r3, #1
 8008272:	e7f3      	b.n	800825c <_dtoa_r+0x25c>
 8008274:	2300      	movs	r3, #0
 8008276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008278:	9308      	str	r3, [sp, #32]
 800827a:	9b00      	ldr	r3, [sp, #0]
 800827c:	4413      	add	r3, r2
 800827e:	9302      	str	r3, [sp, #8]
 8008280:	3301      	adds	r3, #1
 8008282:	2b01      	cmp	r3, #1
 8008284:	9303      	str	r3, [sp, #12]
 8008286:	bfb8      	it	lt
 8008288:	2301      	movlt	r3, #1
 800828a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800828c:	2200      	movs	r2, #0
 800828e:	6042      	str	r2, [r0, #4]
 8008290:	2204      	movs	r2, #4
 8008292:	f102 0614 	add.w	r6, r2, #20
 8008296:	429e      	cmp	r6, r3
 8008298:	6841      	ldr	r1, [r0, #4]
 800829a:	d93d      	bls.n	8008318 <_dtoa_r+0x318>
 800829c:	4620      	mov	r0, r4
 800829e:	f000 fe23 	bl	8008ee8 <_Balloc>
 80082a2:	9001      	str	r0, [sp, #4]
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d13b      	bne.n	8008320 <_dtoa_r+0x320>
 80082a8:	4b11      	ldr	r3, [pc, #68]	; (80082f0 <_dtoa_r+0x2f0>)
 80082aa:	4602      	mov	r2, r0
 80082ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80082b0:	e6c0      	b.n	8008034 <_dtoa_r+0x34>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e7df      	b.n	8008276 <_dtoa_r+0x276>
 80082b6:	bf00      	nop
 80082b8:	636f4361 	.word	0x636f4361
 80082bc:	3fd287a7 	.word	0x3fd287a7
 80082c0:	8b60c8b3 	.word	0x8b60c8b3
 80082c4:	3fc68a28 	.word	0x3fc68a28
 80082c8:	509f79fb 	.word	0x509f79fb
 80082cc:	3fd34413 	.word	0x3fd34413
 80082d0:	0800cce4 	.word	0x0800cce4
 80082d4:	0800ccfb 	.word	0x0800ccfb
 80082d8:	7ff00000 	.word	0x7ff00000
 80082dc:	0800cce0 	.word	0x0800cce0
 80082e0:	0800ccd7 	.word	0x0800ccd7
 80082e4:	0800cbb3 	.word	0x0800cbb3
 80082e8:	3ff80000 	.word	0x3ff80000
 80082ec:	0800cdf0 	.word	0x0800cdf0
 80082f0:	0800cd56 	.word	0x0800cd56
 80082f4:	2501      	movs	r5, #1
 80082f6:	2300      	movs	r3, #0
 80082f8:	9306      	str	r3, [sp, #24]
 80082fa:	9508      	str	r5, [sp, #32]
 80082fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008300:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008304:	2200      	movs	r2, #0
 8008306:	2312      	movs	r3, #18
 8008308:	e7b0      	b.n	800826c <_dtoa_r+0x26c>
 800830a:	2301      	movs	r3, #1
 800830c:	9308      	str	r3, [sp, #32]
 800830e:	e7f5      	b.n	80082fc <_dtoa_r+0x2fc>
 8008310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008312:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008316:	e7b8      	b.n	800828a <_dtoa_r+0x28a>
 8008318:	3101      	adds	r1, #1
 800831a:	6041      	str	r1, [r0, #4]
 800831c:	0052      	lsls	r2, r2, #1
 800831e:	e7b8      	b.n	8008292 <_dtoa_r+0x292>
 8008320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008322:	9a01      	ldr	r2, [sp, #4]
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	9b03      	ldr	r3, [sp, #12]
 8008328:	2b0e      	cmp	r3, #14
 800832a:	f200 809d 	bhi.w	8008468 <_dtoa_r+0x468>
 800832e:	2d00      	cmp	r5, #0
 8008330:	f000 809a 	beq.w	8008468 <_dtoa_r+0x468>
 8008334:	9b00      	ldr	r3, [sp, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	dd32      	ble.n	80083a0 <_dtoa_r+0x3a0>
 800833a:	4ab7      	ldr	r2, [pc, #732]	; (8008618 <_dtoa_r+0x618>)
 800833c:	f003 030f 	and.w	r3, r3, #15
 8008340:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008344:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008348:	9b00      	ldr	r3, [sp, #0]
 800834a:	05d8      	lsls	r0, r3, #23
 800834c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008350:	d516      	bpl.n	8008380 <_dtoa_r+0x380>
 8008352:	4bb2      	ldr	r3, [pc, #712]	; (800861c <_dtoa_r+0x61c>)
 8008354:	ec51 0b19 	vmov	r0, r1, d9
 8008358:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800835c:	f7f8 fa86 	bl	800086c <__aeabi_ddiv>
 8008360:	f007 070f 	and.w	r7, r7, #15
 8008364:	4682      	mov	sl, r0
 8008366:	468b      	mov	fp, r1
 8008368:	2503      	movs	r5, #3
 800836a:	4eac      	ldr	r6, [pc, #688]	; (800861c <_dtoa_r+0x61c>)
 800836c:	b957      	cbnz	r7, 8008384 <_dtoa_r+0x384>
 800836e:	4642      	mov	r2, r8
 8008370:	464b      	mov	r3, r9
 8008372:	4650      	mov	r0, sl
 8008374:	4659      	mov	r1, fp
 8008376:	f7f8 fa79 	bl	800086c <__aeabi_ddiv>
 800837a:	4682      	mov	sl, r0
 800837c:	468b      	mov	fp, r1
 800837e:	e028      	b.n	80083d2 <_dtoa_r+0x3d2>
 8008380:	2502      	movs	r5, #2
 8008382:	e7f2      	b.n	800836a <_dtoa_r+0x36a>
 8008384:	07f9      	lsls	r1, r7, #31
 8008386:	d508      	bpl.n	800839a <_dtoa_r+0x39a>
 8008388:	4640      	mov	r0, r8
 800838a:	4649      	mov	r1, r9
 800838c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008390:	f7f8 f942 	bl	8000618 <__aeabi_dmul>
 8008394:	3501      	adds	r5, #1
 8008396:	4680      	mov	r8, r0
 8008398:	4689      	mov	r9, r1
 800839a:	107f      	asrs	r7, r7, #1
 800839c:	3608      	adds	r6, #8
 800839e:	e7e5      	b.n	800836c <_dtoa_r+0x36c>
 80083a0:	f000 809b 	beq.w	80084da <_dtoa_r+0x4da>
 80083a4:	9b00      	ldr	r3, [sp, #0]
 80083a6:	4f9d      	ldr	r7, [pc, #628]	; (800861c <_dtoa_r+0x61c>)
 80083a8:	425e      	negs	r6, r3
 80083aa:	4b9b      	ldr	r3, [pc, #620]	; (8008618 <_dtoa_r+0x618>)
 80083ac:	f006 020f 	and.w	r2, r6, #15
 80083b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	ec51 0b19 	vmov	r0, r1, d9
 80083bc:	f7f8 f92c 	bl	8000618 <__aeabi_dmul>
 80083c0:	1136      	asrs	r6, r6, #4
 80083c2:	4682      	mov	sl, r0
 80083c4:	468b      	mov	fp, r1
 80083c6:	2300      	movs	r3, #0
 80083c8:	2502      	movs	r5, #2
 80083ca:	2e00      	cmp	r6, #0
 80083cc:	d17a      	bne.n	80084c4 <_dtoa_r+0x4c4>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1d3      	bne.n	800837a <_dtoa_r+0x37a>
 80083d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 8082 	beq.w	80084de <_dtoa_r+0x4de>
 80083da:	4b91      	ldr	r3, [pc, #580]	; (8008620 <_dtoa_r+0x620>)
 80083dc:	2200      	movs	r2, #0
 80083de:	4650      	mov	r0, sl
 80083e0:	4659      	mov	r1, fp
 80083e2:	f7f8 fb8b 	bl	8000afc <__aeabi_dcmplt>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d079      	beq.n	80084de <_dtoa_r+0x4de>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d076      	beq.n	80084de <_dtoa_r+0x4de>
 80083f0:	9b02      	ldr	r3, [sp, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	dd36      	ble.n	8008464 <_dtoa_r+0x464>
 80083f6:	9b00      	ldr	r3, [sp, #0]
 80083f8:	4650      	mov	r0, sl
 80083fa:	4659      	mov	r1, fp
 80083fc:	1e5f      	subs	r7, r3, #1
 80083fe:	2200      	movs	r2, #0
 8008400:	4b88      	ldr	r3, [pc, #544]	; (8008624 <_dtoa_r+0x624>)
 8008402:	f7f8 f909 	bl	8000618 <__aeabi_dmul>
 8008406:	9e02      	ldr	r6, [sp, #8]
 8008408:	4682      	mov	sl, r0
 800840a:	468b      	mov	fp, r1
 800840c:	3501      	adds	r5, #1
 800840e:	4628      	mov	r0, r5
 8008410:	f7f8 f898 	bl	8000544 <__aeabi_i2d>
 8008414:	4652      	mov	r2, sl
 8008416:	465b      	mov	r3, fp
 8008418:	f7f8 f8fe 	bl	8000618 <__aeabi_dmul>
 800841c:	4b82      	ldr	r3, [pc, #520]	; (8008628 <_dtoa_r+0x628>)
 800841e:	2200      	movs	r2, #0
 8008420:	f7f7 ff44 	bl	80002ac <__adddf3>
 8008424:	46d0      	mov	r8, sl
 8008426:	46d9      	mov	r9, fp
 8008428:	4682      	mov	sl, r0
 800842a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800842e:	2e00      	cmp	r6, #0
 8008430:	d158      	bne.n	80084e4 <_dtoa_r+0x4e4>
 8008432:	4b7e      	ldr	r3, [pc, #504]	; (800862c <_dtoa_r+0x62c>)
 8008434:	2200      	movs	r2, #0
 8008436:	4640      	mov	r0, r8
 8008438:	4649      	mov	r1, r9
 800843a:	f7f7 ff35 	bl	80002a8 <__aeabi_dsub>
 800843e:	4652      	mov	r2, sl
 8008440:	465b      	mov	r3, fp
 8008442:	4680      	mov	r8, r0
 8008444:	4689      	mov	r9, r1
 8008446:	f7f8 fb77 	bl	8000b38 <__aeabi_dcmpgt>
 800844a:	2800      	cmp	r0, #0
 800844c:	f040 8295 	bne.w	800897a <_dtoa_r+0x97a>
 8008450:	4652      	mov	r2, sl
 8008452:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008456:	4640      	mov	r0, r8
 8008458:	4649      	mov	r1, r9
 800845a:	f7f8 fb4f 	bl	8000afc <__aeabi_dcmplt>
 800845e:	2800      	cmp	r0, #0
 8008460:	f040 8289 	bne.w	8008976 <_dtoa_r+0x976>
 8008464:	ec5b ab19 	vmov	sl, fp, d9
 8008468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800846a:	2b00      	cmp	r3, #0
 800846c:	f2c0 8148 	blt.w	8008700 <_dtoa_r+0x700>
 8008470:	9a00      	ldr	r2, [sp, #0]
 8008472:	2a0e      	cmp	r2, #14
 8008474:	f300 8144 	bgt.w	8008700 <_dtoa_r+0x700>
 8008478:	4b67      	ldr	r3, [pc, #412]	; (8008618 <_dtoa_r+0x618>)
 800847a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800847e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008484:	2b00      	cmp	r3, #0
 8008486:	f280 80d5 	bge.w	8008634 <_dtoa_r+0x634>
 800848a:	9b03      	ldr	r3, [sp, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f300 80d1 	bgt.w	8008634 <_dtoa_r+0x634>
 8008492:	f040 826f 	bne.w	8008974 <_dtoa_r+0x974>
 8008496:	4b65      	ldr	r3, [pc, #404]	; (800862c <_dtoa_r+0x62c>)
 8008498:	2200      	movs	r2, #0
 800849a:	4640      	mov	r0, r8
 800849c:	4649      	mov	r1, r9
 800849e:	f7f8 f8bb 	bl	8000618 <__aeabi_dmul>
 80084a2:	4652      	mov	r2, sl
 80084a4:	465b      	mov	r3, fp
 80084a6:	f7f8 fb3d 	bl	8000b24 <__aeabi_dcmpge>
 80084aa:	9e03      	ldr	r6, [sp, #12]
 80084ac:	4637      	mov	r7, r6
 80084ae:	2800      	cmp	r0, #0
 80084b0:	f040 8245 	bne.w	800893e <_dtoa_r+0x93e>
 80084b4:	9d01      	ldr	r5, [sp, #4]
 80084b6:	2331      	movs	r3, #49	; 0x31
 80084b8:	f805 3b01 	strb.w	r3, [r5], #1
 80084bc:	9b00      	ldr	r3, [sp, #0]
 80084be:	3301      	adds	r3, #1
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	e240      	b.n	8008946 <_dtoa_r+0x946>
 80084c4:	07f2      	lsls	r2, r6, #31
 80084c6:	d505      	bpl.n	80084d4 <_dtoa_r+0x4d4>
 80084c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084cc:	f7f8 f8a4 	bl	8000618 <__aeabi_dmul>
 80084d0:	3501      	adds	r5, #1
 80084d2:	2301      	movs	r3, #1
 80084d4:	1076      	asrs	r6, r6, #1
 80084d6:	3708      	adds	r7, #8
 80084d8:	e777      	b.n	80083ca <_dtoa_r+0x3ca>
 80084da:	2502      	movs	r5, #2
 80084dc:	e779      	b.n	80083d2 <_dtoa_r+0x3d2>
 80084de:	9f00      	ldr	r7, [sp, #0]
 80084e0:	9e03      	ldr	r6, [sp, #12]
 80084e2:	e794      	b.n	800840e <_dtoa_r+0x40e>
 80084e4:	9901      	ldr	r1, [sp, #4]
 80084e6:	4b4c      	ldr	r3, [pc, #304]	; (8008618 <_dtoa_r+0x618>)
 80084e8:	4431      	add	r1, r6
 80084ea:	910d      	str	r1, [sp, #52]	; 0x34
 80084ec:	9908      	ldr	r1, [sp, #32]
 80084ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80084f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084f6:	2900      	cmp	r1, #0
 80084f8:	d043      	beq.n	8008582 <_dtoa_r+0x582>
 80084fa:	494d      	ldr	r1, [pc, #308]	; (8008630 <_dtoa_r+0x630>)
 80084fc:	2000      	movs	r0, #0
 80084fe:	f7f8 f9b5 	bl	800086c <__aeabi_ddiv>
 8008502:	4652      	mov	r2, sl
 8008504:	465b      	mov	r3, fp
 8008506:	f7f7 fecf 	bl	80002a8 <__aeabi_dsub>
 800850a:	9d01      	ldr	r5, [sp, #4]
 800850c:	4682      	mov	sl, r0
 800850e:	468b      	mov	fp, r1
 8008510:	4649      	mov	r1, r9
 8008512:	4640      	mov	r0, r8
 8008514:	f7f8 fb30 	bl	8000b78 <__aeabi_d2iz>
 8008518:	4606      	mov	r6, r0
 800851a:	f7f8 f813 	bl	8000544 <__aeabi_i2d>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	4640      	mov	r0, r8
 8008524:	4649      	mov	r1, r9
 8008526:	f7f7 febf 	bl	80002a8 <__aeabi_dsub>
 800852a:	3630      	adds	r6, #48	; 0x30
 800852c:	f805 6b01 	strb.w	r6, [r5], #1
 8008530:	4652      	mov	r2, sl
 8008532:	465b      	mov	r3, fp
 8008534:	4680      	mov	r8, r0
 8008536:	4689      	mov	r9, r1
 8008538:	f7f8 fae0 	bl	8000afc <__aeabi_dcmplt>
 800853c:	2800      	cmp	r0, #0
 800853e:	d163      	bne.n	8008608 <_dtoa_r+0x608>
 8008540:	4642      	mov	r2, r8
 8008542:	464b      	mov	r3, r9
 8008544:	4936      	ldr	r1, [pc, #216]	; (8008620 <_dtoa_r+0x620>)
 8008546:	2000      	movs	r0, #0
 8008548:	f7f7 feae 	bl	80002a8 <__aeabi_dsub>
 800854c:	4652      	mov	r2, sl
 800854e:	465b      	mov	r3, fp
 8008550:	f7f8 fad4 	bl	8000afc <__aeabi_dcmplt>
 8008554:	2800      	cmp	r0, #0
 8008556:	f040 80b5 	bne.w	80086c4 <_dtoa_r+0x6c4>
 800855a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800855c:	429d      	cmp	r5, r3
 800855e:	d081      	beq.n	8008464 <_dtoa_r+0x464>
 8008560:	4b30      	ldr	r3, [pc, #192]	; (8008624 <_dtoa_r+0x624>)
 8008562:	2200      	movs	r2, #0
 8008564:	4650      	mov	r0, sl
 8008566:	4659      	mov	r1, fp
 8008568:	f7f8 f856 	bl	8000618 <__aeabi_dmul>
 800856c:	4b2d      	ldr	r3, [pc, #180]	; (8008624 <_dtoa_r+0x624>)
 800856e:	4682      	mov	sl, r0
 8008570:	468b      	mov	fp, r1
 8008572:	4640      	mov	r0, r8
 8008574:	4649      	mov	r1, r9
 8008576:	2200      	movs	r2, #0
 8008578:	f7f8 f84e 	bl	8000618 <__aeabi_dmul>
 800857c:	4680      	mov	r8, r0
 800857e:	4689      	mov	r9, r1
 8008580:	e7c6      	b.n	8008510 <_dtoa_r+0x510>
 8008582:	4650      	mov	r0, sl
 8008584:	4659      	mov	r1, fp
 8008586:	f7f8 f847 	bl	8000618 <__aeabi_dmul>
 800858a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800858c:	9d01      	ldr	r5, [sp, #4]
 800858e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008590:	4682      	mov	sl, r0
 8008592:	468b      	mov	fp, r1
 8008594:	4649      	mov	r1, r9
 8008596:	4640      	mov	r0, r8
 8008598:	f7f8 faee 	bl	8000b78 <__aeabi_d2iz>
 800859c:	4606      	mov	r6, r0
 800859e:	f7f7 ffd1 	bl	8000544 <__aeabi_i2d>
 80085a2:	3630      	adds	r6, #48	; 0x30
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4640      	mov	r0, r8
 80085aa:	4649      	mov	r1, r9
 80085ac:	f7f7 fe7c 	bl	80002a8 <__aeabi_dsub>
 80085b0:	f805 6b01 	strb.w	r6, [r5], #1
 80085b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b6:	429d      	cmp	r5, r3
 80085b8:	4680      	mov	r8, r0
 80085ba:	4689      	mov	r9, r1
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	d124      	bne.n	800860c <_dtoa_r+0x60c>
 80085c2:	4b1b      	ldr	r3, [pc, #108]	; (8008630 <_dtoa_r+0x630>)
 80085c4:	4650      	mov	r0, sl
 80085c6:	4659      	mov	r1, fp
 80085c8:	f7f7 fe70 	bl	80002ac <__adddf3>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4640      	mov	r0, r8
 80085d2:	4649      	mov	r1, r9
 80085d4:	f7f8 fab0 	bl	8000b38 <__aeabi_dcmpgt>
 80085d8:	2800      	cmp	r0, #0
 80085da:	d173      	bne.n	80086c4 <_dtoa_r+0x6c4>
 80085dc:	4652      	mov	r2, sl
 80085de:	465b      	mov	r3, fp
 80085e0:	4913      	ldr	r1, [pc, #76]	; (8008630 <_dtoa_r+0x630>)
 80085e2:	2000      	movs	r0, #0
 80085e4:	f7f7 fe60 	bl	80002a8 <__aeabi_dsub>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4640      	mov	r0, r8
 80085ee:	4649      	mov	r1, r9
 80085f0:	f7f8 fa84 	bl	8000afc <__aeabi_dcmplt>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	f43f af35 	beq.w	8008464 <_dtoa_r+0x464>
 80085fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80085fc:	1e6b      	subs	r3, r5, #1
 80085fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008600:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008604:	2b30      	cmp	r3, #48	; 0x30
 8008606:	d0f8      	beq.n	80085fa <_dtoa_r+0x5fa>
 8008608:	9700      	str	r7, [sp, #0]
 800860a:	e049      	b.n	80086a0 <_dtoa_r+0x6a0>
 800860c:	4b05      	ldr	r3, [pc, #20]	; (8008624 <_dtoa_r+0x624>)
 800860e:	f7f8 f803 	bl	8000618 <__aeabi_dmul>
 8008612:	4680      	mov	r8, r0
 8008614:	4689      	mov	r9, r1
 8008616:	e7bd      	b.n	8008594 <_dtoa_r+0x594>
 8008618:	0800cdf0 	.word	0x0800cdf0
 800861c:	0800cdc8 	.word	0x0800cdc8
 8008620:	3ff00000 	.word	0x3ff00000
 8008624:	40240000 	.word	0x40240000
 8008628:	401c0000 	.word	0x401c0000
 800862c:	40140000 	.word	0x40140000
 8008630:	3fe00000 	.word	0x3fe00000
 8008634:	9d01      	ldr	r5, [sp, #4]
 8008636:	4656      	mov	r6, sl
 8008638:	465f      	mov	r7, fp
 800863a:	4642      	mov	r2, r8
 800863c:	464b      	mov	r3, r9
 800863e:	4630      	mov	r0, r6
 8008640:	4639      	mov	r1, r7
 8008642:	f7f8 f913 	bl	800086c <__aeabi_ddiv>
 8008646:	f7f8 fa97 	bl	8000b78 <__aeabi_d2iz>
 800864a:	4682      	mov	sl, r0
 800864c:	f7f7 ff7a 	bl	8000544 <__aeabi_i2d>
 8008650:	4642      	mov	r2, r8
 8008652:	464b      	mov	r3, r9
 8008654:	f7f7 ffe0 	bl	8000618 <__aeabi_dmul>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4630      	mov	r0, r6
 800865e:	4639      	mov	r1, r7
 8008660:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008664:	f7f7 fe20 	bl	80002a8 <__aeabi_dsub>
 8008668:	f805 6b01 	strb.w	r6, [r5], #1
 800866c:	9e01      	ldr	r6, [sp, #4]
 800866e:	9f03      	ldr	r7, [sp, #12]
 8008670:	1bae      	subs	r6, r5, r6
 8008672:	42b7      	cmp	r7, r6
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	d135      	bne.n	80086e6 <_dtoa_r+0x6e6>
 800867a:	f7f7 fe17 	bl	80002ac <__adddf3>
 800867e:	4642      	mov	r2, r8
 8008680:	464b      	mov	r3, r9
 8008682:	4606      	mov	r6, r0
 8008684:	460f      	mov	r7, r1
 8008686:	f7f8 fa57 	bl	8000b38 <__aeabi_dcmpgt>
 800868a:	b9d0      	cbnz	r0, 80086c2 <_dtoa_r+0x6c2>
 800868c:	4642      	mov	r2, r8
 800868e:	464b      	mov	r3, r9
 8008690:	4630      	mov	r0, r6
 8008692:	4639      	mov	r1, r7
 8008694:	f7f8 fa28 	bl	8000ae8 <__aeabi_dcmpeq>
 8008698:	b110      	cbz	r0, 80086a0 <_dtoa_r+0x6a0>
 800869a:	f01a 0f01 	tst.w	sl, #1
 800869e:	d110      	bne.n	80086c2 <_dtoa_r+0x6c2>
 80086a0:	4620      	mov	r0, r4
 80086a2:	ee18 1a10 	vmov	r1, s16
 80086a6:	f000 fc5f 	bl	8008f68 <_Bfree>
 80086aa:	2300      	movs	r3, #0
 80086ac:	9800      	ldr	r0, [sp, #0]
 80086ae:	702b      	strb	r3, [r5, #0]
 80086b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086b2:	3001      	adds	r0, #1
 80086b4:	6018      	str	r0, [r3, #0]
 80086b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f43f acf1 	beq.w	80080a0 <_dtoa_r+0xa0>
 80086be:	601d      	str	r5, [r3, #0]
 80086c0:	e4ee      	b.n	80080a0 <_dtoa_r+0xa0>
 80086c2:	9f00      	ldr	r7, [sp, #0]
 80086c4:	462b      	mov	r3, r5
 80086c6:	461d      	mov	r5, r3
 80086c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086cc:	2a39      	cmp	r2, #57	; 0x39
 80086ce:	d106      	bne.n	80086de <_dtoa_r+0x6de>
 80086d0:	9a01      	ldr	r2, [sp, #4]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d1f7      	bne.n	80086c6 <_dtoa_r+0x6c6>
 80086d6:	9901      	ldr	r1, [sp, #4]
 80086d8:	2230      	movs	r2, #48	; 0x30
 80086da:	3701      	adds	r7, #1
 80086dc:	700a      	strb	r2, [r1, #0]
 80086de:	781a      	ldrb	r2, [r3, #0]
 80086e0:	3201      	adds	r2, #1
 80086e2:	701a      	strb	r2, [r3, #0]
 80086e4:	e790      	b.n	8008608 <_dtoa_r+0x608>
 80086e6:	4ba6      	ldr	r3, [pc, #664]	; (8008980 <_dtoa_r+0x980>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	f7f7 ff95 	bl	8000618 <__aeabi_dmul>
 80086ee:	2200      	movs	r2, #0
 80086f0:	2300      	movs	r3, #0
 80086f2:	4606      	mov	r6, r0
 80086f4:	460f      	mov	r7, r1
 80086f6:	f7f8 f9f7 	bl	8000ae8 <__aeabi_dcmpeq>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d09d      	beq.n	800863a <_dtoa_r+0x63a>
 80086fe:	e7cf      	b.n	80086a0 <_dtoa_r+0x6a0>
 8008700:	9a08      	ldr	r2, [sp, #32]
 8008702:	2a00      	cmp	r2, #0
 8008704:	f000 80d7 	beq.w	80088b6 <_dtoa_r+0x8b6>
 8008708:	9a06      	ldr	r2, [sp, #24]
 800870a:	2a01      	cmp	r2, #1
 800870c:	f300 80ba 	bgt.w	8008884 <_dtoa_r+0x884>
 8008710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008712:	2a00      	cmp	r2, #0
 8008714:	f000 80b2 	beq.w	800887c <_dtoa_r+0x87c>
 8008718:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800871c:	9e07      	ldr	r6, [sp, #28]
 800871e:	9d04      	ldr	r5, [sp, #16]
 8008720:	9a04      	ldr	r2, [sp, #16]
 8008722:	441a      	add	r2, r3
 8008724:	9204      	str	r2, [sp, #16]
 8008726:	9a05      	ldr	r2, [sp, #20]
 8008728:	2101      	movs	r1, #1
 800872a:	441a      	add	r2, r3
 800872c:	4620      	mov	r0, r4
 800872e:	9205      	str	r2, [sp, #20]
 8008730:	f000 fcd2 	bl	80090d8 <__i2b>
 8008734:	4607      	mov	r7, r0
 8008736:	2d00      	cmp	r5, #0
 8008738:	dd0c      	ble.n	8008754 <_dtoa_r+0x754>
 800873a:	9b05      	ldr	r3, [sp, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	dd09      	ble.n	8008754 <_dtoa_r+0x754>
 8008740:	42ab      	cmp	r3, r5
 8008742:	9a04      	ldr	r2, [sp, #16]
 8008744:	bfa8      	it	ge
 8008746:	462b      	movge	r3, r5
 8008748:	1ad2      	subs	r2, r2, r3
 800874a:	9204      	str	r2, [sp, #16]
 800874c:	9a05      	ldr	r2, [sp, #20]
 800874e:	1aed      	subs	r5, r5, r3
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	9305      	str	r3, [sp, #20]
 8008754:	9b07      	ldr	r3, [sp, #28]
 8008756:	b31b      	cbz	r3, 80087a0 <_dtoa_r+0x7a0>
 8008758:	9b08      	ldr	r3, [sp, #32]
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 80af 	beq.w	80088be <_dtoa_r+0x8be>
 8008760:	2e00      	cmp	r6, #0
 8008762:	dd13      	ble.n	800878c <_dtoa_r+0x78c>
 8008764:	4639      	mov	r1, r7
 8008766:	4632      	mov	r2, r6
 8008768:	4620      	mov	r0, r4
 800876a:	f000 fd75 	bl	8009258 <__pow5mult>
 800876e:	ee18 2a10 	vmov	r2, s16
 8008772:	4601      	mov	r1, r0
 8008774:	4607      	mov	r7, r0
 8008776:	4620      	mov	r0, r4
 8008778:	f000 fcc4 	bl	8009104 <__multiply>
 800877c:	ee18 1a10 	vmov	r1, s16
 8008780:	4680      	mov	r8, r0
 8008782:	4620      	mov	r0, r4
 8008784:	f000 fbf0 	bl	8008f68 <_Bfree>
 8008788:	ee08 8a10 	vmov	s16, r8
 800878c:	9b07      	ldr	r3, [sp, #28]
 800878e:	1b9a      	subs	r2, r3, r6
 8008790:	d006      	beq.n	80087a0 <_dtoa_r+0x7a0>
 8008792:	ee18 1a10 	vmov	r1, s16
 8008796:	4620      	mov	r0, r4
 8008798:	f000 fd5e 	bl	8009258 <__pow5mult>
 800879c:	ee08 0a10 	vmov	s16, r0
 80087a0:	2101      	movs	r1, #1
 80087a2:	4620      	mov	r0, r4
 80087a4:	f000 fc98 	bl	80090d8 <__i2b>
 80087a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	4606      	mov	r6, r0
 80087ae:	f340 8088 	ble.w	80088c2 <_dtoa_r+0x8c2>
 80087b2:	461a      	mov	r2, r3
 80087b4:	4601      	mov	r1, r0
 80087b6:	4620      	mov	r0, r4
 80087b8:	f000 fd4e 	bl	8009258 <__pow5mult>
 80087bc:	9b06      	ldr	r3, [sp, #24]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	4606      	mov	r6, r0
 80087c2:	f340 8081 	ble.w	80088c8 <_dtoa_r+0x8c8>
 80087c6:	f04f 0800 	mov.w	r8, #0
 80087ca:	6933      	ldr	r3, [r6, #16]
 80087cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80087d0:	6918      	ldr	r0, [r3, #16]
 80087d2:	f000 fc31 	bl	8009038 <__hi0bits>
 80087d6:	f1c0 0020 	rsb	r0, r0, #32
 80087da:	9b05      	ldr	r3, [sp, #20]
 80087dc:	4418      	add	r0, r3
 80087de:	f010 001f 	ands.w	r0, r0, #31
 80087e2:	f000 8092 	beq.w	800890a <_dtoa_r+0x90a>
 80087e6:	f1c0 0320 	rsb	r3, r0, #32
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	f340 808a 	ble.w	8008904 <_dtoa_r+0x904>
 80087f0:	f1c0 001c 	rsb	r0, r0, #28
 80087f4:	9b04      	ldr	r3, [sp, #16]
 80087f6:	4403      	add	r3, r0
 80087f8:	9304      	str	r3, [sp, #16]
 80087fa:	9b05      	ldr	r3, [sp, #20]
 80087fc:	4403      	add	r3, r0
 80087fe:	4405      	add	r5, r0
 8008800:	9305      	str	r3, [sp, #20]
 8008802:	9b04      	ldr	r3, [sp, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	dd07      	ble.n	8008818 <_dtoa_r+0x818>
 8008808:	ee18 1a10 	vmov	r1, s16
 800880c:	461a      	mov	r2, r3
 800880e:	4620      	mov	r0, r4
 8008810:	f000 fd7c 	bl	800930c <__lshift>
 8008814:	ee08 0a10 	vmov	s16, r0
 8008818:	9b05      	ldr	r3, [sp, #20]
 800881a:	2b00      	cmp	r3, #0
 800881c:	dd05      	ble.n	800882a <_dtoa_r+0x82a>
 800881e:	4631      	mov	r1, r6
 8008820:	461a      	mov	r2, r3
 8008822:	4620      	mov	r0, r4
 8008824:	f000 fd72 	bl	800930c <__lshift>
 8008828:	4606      	mov	r6, r0
 800882a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800882c:	2b00      	cmp	r3, #0
 800882e:	d06e      	beq.n	800890e <_dtoa_r+0x90e>
 8008830:	ee18 0a10 	vmov	r0, s16
 8008834:	4631      	mov	r1, r6
 8008836:	f000 fdd9 	bl	80093ec <__mcmp>
 800883a:	2800      	cmp	r0, #0
 800883c:	da67      	bge.n	800890e <_dtoa_r+0x90e>
 800883e:	9b00      	ldr	r3, [sp, #0]
 8008840:	3b01      	subs	r3, #1
 8008842:	ee18 1a10 	vmov	r1, s16
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	220a      	movs	r2, #10
 800884a:	2300      	movs	r3, #0
 800884c:	4620      	mov	r0, r4
 800884e:	f000 fbad 	bl	8008fac <__multadd>
 8008852:	9b08      	ldr	r3, [sp, #32]
 8008854:	ee08 0a10 	vmov	s16, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 81b1 	beq.w	8008bc0 <_dtoa_r+0xbc0>
 800885e:	2300      	movs	r3, #0
 8008860:	4639      	mov	r1, r7
 8008862:	220a      	movs	r2, #10
 8008864:	4620      	mov	r0, r4
 8008866:	f000 fba1 	bl	8008fac <__multadd>
 800886a:	9b02      	ldr	r3, [sp, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	4607      	mov	r7, r0
 8008870:	f300 808e 	bgt.w	8008990 <_dtoa_r+0x990>
 8008874:	9b06      	ldr	r3, [sp, #24]
 8008876:	2b02      	cmp	r3, #2
 8008878:	dc51      	bgt.n	800891e <_dtoa_r+0x91e>
 800887a:	e089      	b.n	8008990 <_dtoa_r+0x990>
 800887c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800887e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008882:	e74b      	b.n	800871c <_dtoa_r+0x71c>
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	1e5e      	subs	r6, r3, #1
 8008888:	9b07      	ldr	r3, [sp, #28]
 800888a:	42b3      	cmp	r3, r6
 800888c:	bfbf      	itttt	lt
 800888e:	9b07      	ldrlt	r3, [sp, #28]
 8008890:	9607      	strlt	r6, [sp, #28]
 8008892:	1af2      	sublt	r2, r6, r3
 8008894:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008896:	bfb6      	itet	lt
 8008898:	189b      	addlt	r3, r3, r2
 800889a:	1b9e      	subge	r6, r3, r6
 800889c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	bfb8      	it	lt
 80088a2:	2600      	movlt	r6, #0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	bfb7      	itett	lt
 80088a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80088ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80088b0:	1a9d      	sublt	r5, r3, r2
 80088b2:	2300      	movlt	r3, #0
 80088b4:	e734      	b.n	8008720 <_dtoa_r+0x720>
 80088b6:	9e07      	ldr	r6, [sp, #28]
 80088b8:	9d04      	ldr	r5, [sp, #16]
 80088ba:	9f08      	ldr	r7, [sp, #32]
 80088bc:	e73b      	b.n	8008736 <_dtoa_r+0x736>
 80088be:	9a07      	ldr	r2, [sp, #28]
 80088c0:	e767      	b.n	8008792 <_dtoa_r+0x792>
 80088c2:	9b06      	ldr	r3, [sp, #24]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	dc18      	bgt.n	80088fa <_dtoa_r+0x8fa>
 80088c8:	f1ba 0f00 	cmp.w	sl, #0
 80088cc:	d115      	bne.n	80088fa <_dtoa_r+0x8fa>
 80088ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088d2:	b993      	cbnz	r3, 80088fa <_dtoa_r+0x8fa>
 80088d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088d8:	0d1b      	lsrs	r3, r3, #20
 80088da:	051b      	lsls	r3, r3, #20
 80088dc:	b183      	cbz	r3, 8008900 <_dtoa_r+0x900>
 80088de:	9b04      	ldr	r3, [sp, #16]
 80088e0:	3301      	adds	r3, #1
 80088e2:	9304      	str	r3, [sp, #16]
 80088e4:	9b05      	ldr	r3, [sp, #20]
 80088e6:	3301      	adds	r3, #1
 80088e8:	9305      	str	r3, [sp, #20]
 80088ea:	f04f 0801 	mov.w	r8, #1
 80088ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f47f af6a 	bne.w	80087ca <_dtoa_r+0x7ca>
 80088f6:	2001      	movs	r0, #1
 80088f8:	e76f      	b.n	80087da <_dtoa_r+0x7da>
 80088fa:	f04f 0800 	mov.w	r8, #0
 80088fe:	e7f6      	b.n	80088ee <_dtoa_r+0x8ee>
 8008900:	4698      	mov	r8, r3
 8008902:	e7f4      	b.n	80088ee <_dtoa_r+0x8ee>
 8008904:	f43f af7d 	beq.w	8008802 <_dtoa_r+0x802>
 8008908:	4618      	mov	r0, r3
 800890a:	301c      	adds	r0, #28
 800890c:	e772      	b.n	80087f4 <_dtoa_r+0x7f4>
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	dc37      	bgt.n	8008984 <_dtoa_r+0x984>
 8008914:	9b06      	ldr	r3, [sp, #24]
 8008916:	2b02      	cmp	r3, #2
 8008918:	dd34      	ble.n	8008984 <_dtoa_r+0x984>
 800891a:	9b03      	ldr	r3, [sp, #12]
 800891c:	9302      	str	r3, [sp, #8]
 800891e:	9b02      	ldr	r3, [sp, #8]
 8008920:	b96b      	cbnz	r3, 800893e <_dtoa_r+0x93e>
 8008922:	4631      	mov	r1, r6
 8008924:	2205      	movs	r2, #5
 8008926:	4620      	mov	r0, r4
 8008928:	f000 fb40 	bl	8008fac <__multadd>
 800892c:	4601      	mov	r1, r0
 800892e:	4606      	mov	r6, r0
 8008930:	ee18 0a10 	vmov	r0, s16
 8008934:	f000 fd5a 	bl	80093ec <__mcmp>
 8008938:	2800      	cmp	r0, #0
 800893a:	f73f adbb 	bgt.w	80084b4 <_dtoa_r+0x4b4>
 800893e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008940:	9d01      	ldr	r5, [sp, #4]
 8008942:	43db      	mvns	r3, r3
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	f04f 0800 	mov.w	r8, #0
 800894a:	4631      	mov	r1, r6
 800894c:	4620      	mov	r0, r4
 800894e:	f000 fb0b 	bl	8008f68 <_Bfree>
 8008952:	2f00      	cmp	r7, #0
 8008954:	f43f aea4 	beq.w	80086a0 <_dtoa_r+0x6a0>
 8008958:	f1b8 0f00 	cmp.w	r8, #0
 800895c:	d005      	beq.n	800896a <_dtoa_r+0x96a>
 800895e:	45b8      	cmp	r8, r7
 8008960:	d003      	beq.n	800896a <_dtoa_r+0x96a>
 8008962:	4641      	mov	r1, r8
 8008964:	4620      	mov	r0, r4
 8008966:	f000 faff 	bl	8008f68 <_Bfree>
 800896a:	4639      	mov	r1, r7
 800896c:	4620      	mov	r0, r4
 800896e:	f000 fafb 	bl	8008f68 <_Bfree>
 8008972:	e695      	b.n	80086a0 <_dtoa_r+0x6a0>
 8008974:	2600      	movs	r6, #0
 8008976:	4637      	mov	r7, r6
 8008978:	e7e1      	b.n	800893e <_dtoa_r+0x93e>
 800897a:	9700      	str	r7, [sp, #0]
 800897c:	4637      	mov	r7, r6
 800897e:	e599      	b.n	80084b4 <_dtoa_r+0x4b4>
 8008980:	40240000 	.word	0x40240000
 8008984:	9b08      	ldr	r3, [sp, #32]
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 80ca 	beq.w	8008b20 <_dtoa_r+0xb20>
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	9302      	str	r3, [sp, #8]
 8008990:	2d00      	cmp	r5, #0
 8008992:	dd05      	ble.n	80089a0 <_dtoa_r+0x9a0>
 8008994:	4639      	mov	r1, r7
 8008996:	462a      	mov	r2, r5
 8008998:	4620      	mov	r0, r4
 800899a:	f000 fcb7 	bl	800930c <__lshift>
 800899e:	4607      	mov	r7, r0
 80089a0:	f1b8 0f00 	cmp.w	r8, #0
 80089a4:	d05b      	beq.n	8008a5e <_dtoa_r+0xa5e>
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 fa9d 	bl	8008ee8 <_Balloc>
 80089ae:	4605      	mov	r5, r0
 80089b0:	b928      	cbnz	r0, 80089be <_dtoa_r+0x9be>
 80089b2:	4b87      	ldr	r3, [pc, #540]	; (8008bd0 <_dtoa_r+0xbd0>)
 80089b4:	4602      	mov	r2, r0
 80089b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80089ba:	f7ff bb3b 	b.w	8008034 <_dtoa_r+0x34>
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	3202      	adds	r2, #2
 80089c2:	0092      	lsls	r2, r2, #2
 80089c4:	f107 010c 	add.w	r1, r7, #12
 80089c8:	300c      	adds	r0, #12
 80089ca:	f7fe fb5b 	bl	8007084 <memcpy>
 80089ce:	2201      	movs	r2, #1
 80089d0:	4629      	mov	r1, r5
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 fc9a 	bl	800930c <__lshift>
 80089d8:	9b01      	ldr	r3, [sp, #4]
 80089da:	f103 0901 	add.w	r9, r3, #1
 80089de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80089e2:	4413      	add	r3, r2
 80089e4:	9305      	str	r3, [sp, #20]
 80089e6:	f00a 0301 	and.w	r3, sl, #1
 80089ea:	46b8      	mov	r8, r7
 80089ec:	9304      	str	r3, [sp, #16]
 80089ee:	4607      	mov	r7, r0
 80089f0:	4631      	mov	r1, r6
 80089f2:	ee18 0a10 	vmov	r0, s16
 80089f6:	f7ff fa77 	bl	8007ee8 <quorem>
 80089fa:	4641      	mov	r1, r8
 80089fc:	9002      	str	r0, [sp, #8]
 80089fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a02:	ee18 0a10 	vmov	r0, s16
 8008a06:	f000 fcf1 	bl	80093ec <__mcmp>
 8008a0a:	463a      	mov	r2, r7
 8008a0c:	9003      	str	r0, [sp, #12]
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4620      	mov	r0, r4
 8008a12:	f000 fd07 	bl	8009424 <__mdiff>
 8008a16:	68c2      	ldr	r2, [r0, #12]
 8008a18:	f109 3bff 	add.w	fp, r9, #4294967295
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	bb02      	cbnz	r2, 8008a62 <_dtoa_r+0xa62>
 8008a20:	4601      	mov	r1, r0
 8008a22:	ee18 0a10 	vmov	r0, s16
 8008a26:	f000 fce1 	bl	80093ec <__mcmp>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4620      	mov	r0, r4
 8008a30:	9207      	str	r2, [sp, #28]
 8008a32:	f000 fa99 	bl	8008f68 <_Bfree>
 8008a36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008a3a:	ea43 0102 	orr.w	r1, r3, r2
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	430b      	orrs	r3, r1
 8008a42:	464d      	mov	r5, r9
 8008a44:	d10f      	bne.n	8008a66 <_dtoa_r+0xa66>
 8008a46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a4a:	d02a      	beq.n	8008aa2 <_dtoa_r+0xaa2>
 8008a4c:	9b03      	ldr	r3, [sp, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	dd02      	ble.n	8008a58 <_dtoa_r+0xa58>
 8008a52:	9b02      	ldr	r3, [sp, #8]
 8008a54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008a58:	f88b a000 	strb.w	sl, [fp]
 8008a5c:	e775      	b.n	800894a <_dtoa_r+0x94a>
 8008a5e:	4638      	mov	r0, r7
 8008a60:	e7ba      	b.n	80089d8 <_dtoa_r+0x9d8>
 8008a62:	2201      	movs	r2, #1
 8008a64:	e7e2      	b.n	8008a2c <_dtoa_r+0xa2c>
 8008a66:	9b03      	ldr	r3, [sp, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	db04      	blt.n	8008a76 <_dtoa_r+0xa76>
 8008a6c:	9906      	ldr	r1, [sp, #24]
 8008a6e:	430b      	orrs	r3, r1
 8008a70:	9904      	ldr	r1, [sp, #16]
 8008a72:	430b      	orrs	r3, r1
 8008a74:	d122      	bne.n	8008abc <_dtoa_r+0xabc>
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	ddee      	ble.n	8008a58 <_dtoa_r+0xa58>
 8008a7a:	ee18 1a10 	vmov	r1, s16
 8008a7e:	2201      	movs	r2, #1
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fc43 	bl	800930c <__lshift>
 8008a86:	4631      	mov	r1, r6
 8008a88:	ee08 0a10 	vmov	s16, r0
 8008a8c:	f000 fcae 	bl	80093ec <__mcmp>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	dc03      	bgt.n	8008a9c <_dtoa_r+0xa9c>
 8008a94:	d1e0      	bne.n	8008a58 <_dtoa_r+0xa58>
 8008a96:	f01a 0f01 	tst.w	sl, #1
 8008a9a:	d0dd      	beq.n	8008a58 <_dtoa_r+0xa58>
 8008a9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008aa0:	d1d7      	bne.n	8008a52 <_dtoa_r+0xa52>
 8008aa2:	2339      	movs	r3, #57	; 0x39
 8008aa4:	f88b 3000 	strb.w	r3, [fp]
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	461d      	mov	r5, r3
 8008aac:	3b01      	subs	r3, #1
 8008aae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008ab2:	2a39      	cmp	r2, #57	; 0x39
 8008ab4:	d071      	beq.n	8008b9a <_dtoa_r+0xb9a>
 8008ab6:	3201      	adds	r2, #1
 8008ab8:	701a      	strb	r2, [r3, #0]
 8008aba:	e746      	b.n	800894a <_dtoa_r+0x94a>
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	dd07      	ble.n	8008ad0 <_dtoa_r+0xad0>
 8008ac0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ac4:	d0ed      	beq.n	8008aa2 <_dtoa_r+0xaa2>
 8008ac6:	f10a 0301 	add.w	r3, sl, #1
 8008aca:	f88b 3000 	strb.w	r3, [fp]
 8008ace:	e73c      	b.n	800894a <_dtoa_r+0x94a>
 8008ad0:	9b05      	ldr	r3, [sp, #20]
 8008ad2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008ad6:	4599      	cmp	r9, r3
 8008ad8:	d047      	beq.n	8008b6a <_dtoa_r+0xb6a>
 8008ada:	ee18 1a10 	vmov	r1, s16
 8008ade:	2300      	movs	r3, #0
 8008ae0:	220a      	movs	r2, #10
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 fa62 	bl	8008fac <__multadd>
 8008ae8:	45b8      	cmp	r8, r7
 8008aea:	ee08 0a10 	vmov	s16, r0
 8008aee:	f04f 0300 	mov.w	r3, #0
 8008af2:	f04f 020a 	mov.w	r2, #10
 8008af6:	4641      	mov	r1, r8
 8008af8:	4620      	mov	r0, r4
 8008afa:	d106      	bne.n	8008b0a <_dtoa_r+0xb0a>
 8008afc:	f000 fa56 	bl	8008fac <__multadd>
 8008b00:	4680      	mov	r8, r0
 8008b02:	4607      	mov	r7, r0
 8008b04:	f109 0901 	add.w	r9, r9, #1
 8008b08:	e772      	b.n	80089f0 <_dtoa_r+0x9f0>
 8008b0a:	f000 fa4f 	bl	8008fac <__multadd>
 8008b0e:	4639      	mov	r1, r7
 8008b10:	4680      	mov	r8, r0
 8008b12:	2300      	movs	r3, #0
 8008b14:	220a      	movs	r2, #10
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 fa48 	bl	8008fac <__multadd>
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	e7f1      	b.n	8008b04 <_dtoa_r+0xb04>
 8008b20:	9b03      	ldr	r3, [sp, #12]
 8008b22:	9302      	str	r3, [sp, #8]
 8008b24:	9d01      	ldr	r5, [sp, #4]
 8008b26:	ee18 0a10 	vmov	r0, s16
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	f7ff f9dc 	bl	8007ee8 <quorem>
 8008b30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b34:	9b01      	ldr	r3, [sp, #4]
 8008b36:	f805 ab01 	strb.w	sl, [r5], #1
 8008b3a:	1aea      	subs	r2, r5, r3
 8008b3c:	9b02      	ldr	r3, [sp, #8]
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	dd09      	ble.n	8008b56 <_dtoa_r+0xb56>
 8008b42:	ee18 1a10 	vmov	r1, s16
 8008b46:	2300      	movs	r3, #0
 8008b48:	220a      	movs	r2, #10
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 fa2e 	bl	8008fac <__multadd>
 8008b50:	ee08 0a10 	vmov	s16, r0
 8008b54:	e7e7      	b.n	8008b26 <_dtoa_r+0xb26>
 8008b56:	9b02      	ldr	r3, [sp, #8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bfc8      	it	gt
 8008b5c:	461d      	movgt	r5, r3
 8008b5e:	9b01      	ldr	r3, [sp, #4]
 8008b60:	bfd8      	it	le
 8008b62:	2501      	movle	r5, #1
 8008b64:	441d      	add	r5, r3
 8008b66:	f04f 0800 	mov.w	r8, #0
 8008b6a:	ee18 1a10 	vmov	r1, s16
 8008b6e:	2201      	movs	r2, #1
 8008b70:	4620      	mov	r0, r4
 8008b72:	f000 fbcb 	bl	800930c <__lshift>
 8008b76:	4631      	mov	r1, r6
 8008b78:	ee08 0a10 	vmov	s16, r0
 8008b7c:	f000 fc36 	bl	80093ec <__mcmp>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	dc91      	bgt.n	8008aa8 <_dtoa_r+0xaa8>
 8008b84:	d102      	bne.n	8008b8c <_dtoa_r+0xb8c>
 8008b86:	f01a 0f01 	tst.w	sl, #1
 8008b8a:	d18d      	bne.n	8008aa8 <_dtoa_r+0xaa8>
 8008b8c:	462b      	mov	r3, r5
 8008b8e:	461d      	mov	r5, r3
 8008b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b94:	2a30      	cmp	r2, #48	; 0x30
 8008b96:	d0fa      	beq.n	8008b8e <_dtoa_r+0xb8e>
 8008b98:	e6d7      	b.n	800894a <_dtoa_r+0x94a>
 8008b9a:	9a01      	ldr	r2, [sp, #4]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d184      	bne.n	8008aaa <_dtoa_r+0xaaa>
 8008ba0:	9b00      	ldr	r3, [sp, #0]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	2331      	movs	r3, #49	; 0x31
 8008ba8:	7013      	strb	r3, [r2, #0]
 8008baa:	e6ce      	b.n	800894a <_dtoa_r+0x94a>
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <_dtoa_r+0xbd4>)
 8008bae:	f7ff ba95 	b.w	80080dc <_dtoa_r+0xdc>
 8008bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f47f aa6e 	bne.w	8008096 <_dtoa_r+0x96>
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <_dtoa_r+0xbd8>)
 8008bbc:	f7ff ba8e 	b.w	80080dc <_dtoa_r+0xdc>
 8008bc0:	9b02      	ldr	r3, [sp, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	dcae      	bgt.n	8008b24 <_dtoa_r+0xb24>
 8008bc6:	9b06      	ldr	r3, [sp, #24]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	f73f aea8 	bgt.w	800891e <_dtoa_r+0x91e>
 8008bce:	e7a9      	b.n	8008b24 <_dtoa_r+0xb24>
 8008bd0:	0800cd56 	.word	0x0800cd56
 8008bd4:	0800cbb2 	.word	0x0800cbb2
 8008bd8:	0800ccd7 	.word	0x0800ccd7

08008bdc <print_e>:
 8008bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bde:	b087      	sub	sp, #28
 8008be0:	ec43 2b10 	vmov	d0, r2, r3
 8008be4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008be6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8008bea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008bec:	ab04      	add	r3, sp, #16
 8008bee:	9301      	str	r3, [sp, #4]
 8008bf0:	ab03      	add	r3, sp, #12
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	1c62      	adds	r2, r4, #1
 8008bf6:	ab05      	add	r3, sp, #20
 8008bf8:	460f      	mov	r7, r1
 8008bfa:	2102      	movs	r1, #2
 8008bfc:	f7ff fa00 	bl	8008000 <_dtoa_r>
 8008c00:	9a05      	ldr	r2, [sp, #20]
 8008c02:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d105      	bne.n	8008c16 <print_e+0x3a>
 8008c0a:	4601      	mov	r1, r0
 8008c0c:	4638      	mov	r0, r7
 8008c0e:	f000 fe8f 	bl	8009930 <strcpy>
 8008c12:	b007      	add	sp, #28
 8008c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c16:	463b      	mov	r3, r7
 8008c18:	7801      	ldrb	r1, [r0, #0]
 8008c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c1e:	2c00      	cmp	r4, #0
 8008c20:	bfc8      	it	gt
 8008c22:	2501      	movgt	r5, #1
 8008c24:	212e      	movs	r1, #46	; 0x2e
 8008c26:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8008c2a:	b10f      	cbz	r7, 8008c30 <print_e+0x54>
 8008c2c:	2c00      	cmp	r4, #0
 8008c2e:	dc37      	bgt.n	8008ca0 <print_e+0xc4>
 8008c30:	2e67      	cmp	r6, #103	; 0x67
 8008c32:	d046      	beq.n	8008cc2 <print_e+0xe6>
 8008c34:	2e47      	cmp	r6, #71	; 0x47
 8008c36:	d046      	beq.n	8008cc6 <print_e+0xea>
 8008c38:	212e      	movs	r1, #46	; 0x2e
 8008c3a:	2030      	movs	r0, #48	; 0x30
 8008c3c:	2c00      	cmp	r4, #0
 8008c3e:	dc38      	bgt.n	8008cb2 <print_e+0xd6>
 8008c40:	1e51      	subs	r1, r2, #1
 8008c42:	2900      	cmp	r1, #0
 8008c44:	bfb8      	it	lt
 8008c46:	f1c2 0201 	rsblt	r2, r2, #1
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	9105      	str	r1, [sp, #20]
 8008c4e:	bfac      	ite	ge
 8008c50:	222b      	movge	r2, #43	; 0x2b
 8008c52:	9205      	strlt	r2, [sp, #20]
 8008c54:	f800 6b02 	strb.w	r6, [r0], #2
 8008c58:	bfa8      	it	ge
 8008c5a:	705a      	strbge	r2, [r3, #1]
 8008c5c:	9a05      	ldr	r2, [sp, #20]
 8008c5e:	bfbc      	itt	lt
 8008c60:	212d      	movlt	r1, #45	; 0x2d
 8008c62:	7059      	strblt	r1, [r3, #1]
 8008c64:	2a63      	cmp	r2, #99	; 0x63
 8008c66:	dd0b      	ble.n	8008c80 <print_e+0xa4>
 8008c68:	2164      	movs	r1, #100	; 0x64
 8008c6a:	fb92 f1f1 	sdiv	r1, r2, r1
 8008c6e:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8008c72:	1cd8      	adds	r0, r3, #3
 8008c74:	709c      	strb	r4, [r3, #2]
 8008c76:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008c7a:	fb03 2201 	mla	r2, r3, r1, r2
 8008c7e:	9205      	str	r2, [sp, #20]
 8008c80:	9b05      	ldr	r3, [sp, #20]
 8008c82:	220a      	movs	r2, #10
 8008c84:	fb93 f2f2 	sdiv	r2, r3, r2
 8008c88:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8008c8c:	7001      	strb	r1, [r0, #0]
 8008c8e:	f06f 0109 	mvn.w	r1, #9
 8008c92:	fb01 3302 	mla	r3, r1, r2, r3
 8008c96:	3330      	adds	r3, #48	; 0x30
 8008c98:	7043      	strb	r3, [r0, #1]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	7083      	strb	r3, [r0, #2]
 8008c9e:	e7b8      	b.n	8008c12 <print_e+0x36>
 8008ca0:	b10d      	cbz	r5, 8008ca6 <print_e+0xca>
 8008ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ca6:	7805      	ldrb	r5, [r0, #0]
 8008ca8:	f803 5b01 	strb.w	r5, [r3], #1
 8008cac:	3c01      	subs	r4, #1
 8008cae:	2500      	movs	r5, #0
 8008cb0:	e7b9      	b.n	8008c26 <print_e+0x4a>
 8008cb2:	b10d      	cbz	r5, 8008cb8 <print_e+0xdc>
 8008cb4:	f803 1b01 	strb.w	r1, [r3], #1
 8008cb8:	f803 0b01 	strb.w	r0, [r3], #1
 8008cbc:	3c01      	subs	r4, #1
 8008cbe:	2500      	movs	r5, #0
 8008cc0:	e7bc      	b.n	8008c3c <print_e+0x60>
 8008cc2:	2665      	movs	r6, #101	; 0x65
 8008cc4:	e7bc      	b.n	8008c40 <print_e+0x64>
 8008cc6:	2645      	movs	r6, #69	; 0x45
 8008cc8:	e7ba      	b.n	8008c40 <print_e+0x64>
 8008cca:	0000      	movs	r0, r0
 8008ccc:	0000      	movs	r0, r0
	...

08008cd0 <_gcvt>:
 8008cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd4:	ec55 4b10 	vmov	r4, r5, d0
 8008cd8:	b088      	sub	sp, #32
 8008cda:	4681      	mov	r9, r0
 8008cdc:	4688      	mov	r8, r1
 8008cde:	4616      	mov	r6, r2
 8008ce0:	469a      	mov	sl, r3
 8008ce2:	ee10 0a10 	vmov	r0, s0
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4629      	mov	r1, r5
 8008cec:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008cee:	f7f7 ff05 	bl	8000afc <__aeabi_dcmplt>
 8008cf2:	b110      	cbz	r0, 8008cfa <_gcvt+0x2a>
 8008cf4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008cf8:	461d      	mov	r5, r3
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7f7 fef1 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d06:	b138      	cbz	r0, 8008d18 <_gcvt+0x48>
 8008d08:	2330      	movs	r3, #48	; 0x30
 8008d0a:	7033      	strb	r3, [r6, #0]
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	7073      	strb	r3, [r6, #1]
 8008d10:	4630      	mov	r0, r6
 8008d12:	b008      	add	sp, #32
 8008d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d18:	a34b      	add	r3, pc, #300	; (adr r3, 8008e48 <_gcvt+0x178>)
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	4620      	mov	r0, r4
 8008d20:	4629      	mov	r1, r5
 8008d22:	f7f7 fef5 	bl	8000b10 <__aeabi_dcmple>
 8008d26:	b158      	cbz	r0, 8008d40 <_gcvt+0x70>
 8008d28:	f108 31ff 	add.w	r1, r8, #4294967295
 8008d2c:	9100      	str	r1, [sp, #0]
 8008d2e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8008d32:	4622      	mov	r2, r4
 8008d34:	462b      	mov	r3, r5
 8008d36:	4631      	mov	r1, r6
 8008d38:	4648      	mov	r0, r9
 8008d3a:	f7ff ff4f 	bl	8008bdc <print_e>
 8008d3e:	e7e7      	b.n	8008d10 <_gcvt+0x40>
 8008d40:	4640      	mov	r0, r8
 8008d42:	f000 fc55 	bl	80095f0 <_mprec_log10>
 8008d46:	4622      	mov	r2, r4
 8008d48:	ec51 0b10 	vmov	r0, r1, d0
 8008d4c:	462b      	mov	r3, r5
 8008d4e:	f7f7 fedf 	bl	8000b10 <__aeabi_dcmple>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d1e8      	bne.n	8008d28 <_gcvt+0x58>
 8008d56:	ab07      	add	r3, sp, #28
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	ab06      	add	r3, sp, #24
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	4642      	mov	r2, r8
 8008d60:	ab05      	add	r3, sp, #20
 8008d62:	ec45 4b10 	vmov	d0, r4, r5
 8008d66:	2102      	movs	r1, #2
 8008d68:	4648      	mov	r0, r9
 8008d6a:	f7ff f949 	bl	8008000 <_dtoa_r>
 8008d6e:	9a05      	ldr	r2, [sp, #20]
 8008d70:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d00e      	beq.n	8008d96 <_gcvt+0xc6>
 8008d78:	4633      	mov	r3, r6
 8008d7a:	44b0      	add	r8, r6
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008d82:	9c05      	ldr	r4, [sp, #20]
 8008d84:	eba8 0203 	sub.w	r2, r8, r3
 8008d88:	b109      	cbz	r1, 8008d8e <_gcvt+0xbe>
 8008d8a:	2c00      	cmp	r4, #0
 8008d8c:	dc08      	bgt.n	8008da0 <_gcvt+0xd0>
 8008d8e:	2100      	movs	r1, #0
 8008d90:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008d94:	e00d      	b.n	8008db2 <_gcvt+0xe2>
 8008d96:	4601      	mov	r1, r0
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f000 fdc9 	bl	8009930 <strcpy>
 8008d9e:	e7b7      	b.n	8008d10 <_gcvt+0x40>
 8008da0:	3c01      	subs	r4, #1
 8008da2:	f803 1b01 	strb.w	r1, [r3], #1
 8008da6:	9405      	str	r4, [sp, #20]
 8008da8:	e7e8      	b.n	8008d7c <_gcvt+0xac>
 8008daa:	f803 cb01 	strb.w	ip, [r3], #1
 8008dae:	3a01      	subs	r2, #1
 8008db0:	2101      	movs	r1, #1
 8008db2:	2c00      	cmp	r4, #0
 8008db4:	4620      	mov	r0, r4
 8008db6:	dc2a      	bgt.n	8008e0e <_gcvt+0x13e>
 8008db8:	b101      	cbz	r1, 8008dbc <_gcvt+0xec>
 8008dba:	9405      	str	r4, [sp, #20]
 8008dbc:	b90f      	cbnz	r7, 8008dc2 <_gcvt+0xf2>
 8008dbe:	7829      	ldrb	r1, [r5, #0]
 8008dc0:	b311      	cbz	r1, 8008e08 <_gcvt+0x138>
 8008dc2:	42b3      	cmp	r3, r6
 8008dc4:	bf04      	itt	eq
 8008dc6:	2130      	moveq	r1, #48	; 0x30
 8008dc8:	f803 1b01 	strbeq.w	r1, [r3], #1
 8008dcc:	212e      	movs	r1, #46	; 0x2e
 8008dce:	7019      	strb	r1, [r3, #0]
 8008dd0:	9905      	ldr	r1, [sp, #20]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	2400      	movs	r4, #0
 8008dd6:	eba1 0c03 	sub.w	ip, r1, r3
 8008dda:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008dde:	eb1c 0f00 	cmn.w	ip, r0
 8008de2:	d41c      	bmi.n	8008e1e <_gcvt+0x14e>
 8008de4:	2900      	cmp	r1, #0
 8008de6:	f1c1 0000 	rsb	r0, r1, #0
 8008dea:	bfc8      	it	gt
 8008dec:	2000      	movgt	r0, #0
 8008dee:	f100 0c01 	add.w	ip, r0, #1
 8008df2:	4463      	add	r3, ip
 8008df4:	4401      	add	r1, r0
 8008df6:	b104      	cbz	r4, 8008dfa <_gcvt+0x12a>
 8008df8:	9105      	str	r1, [sp, #20]
 8008dfa:	1e69      	subs	r1, r5, #1
 8008dfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e00:	b108      	cbz	r0, 8008e06 <_gcvt+0x136>
 8008e02:	2a00      	cmp	r2, #0
 8008e04:	dc0f      	bgt.n	8008e26 <_gcvt+0x156>
 8008e06:	b9df      	cbnz	r7, 8008e40 <_gcvt+0x170>
 8008e08:	2200      	movs	r2, #0
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	e780      	b.n	8008d10 <_gcvt+0x40>
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e14:	dcc9      	bgt.n	8008daa <_gcvt+0xda>
 8008e16:	2900      	cmp	r1, #0
 8008e18:	d0d0      	beq.n	8008dbc <_gcvt+0xec>
 8008e1a:	9005      	str	r0, [sp, #20]
 8008e1c:	e7ce      	b.n	8008dbc <_gcvt+0xec>
 8008e1e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8008e22:	2401      	movs	r4, #1
 8008e24:	e7db      	b.n	8008dde <_gcvt+0x10e>
 8008e26:	f803 0b01 	strb.w	r0, [r3], #1
 8008e2a:	3a01      	subs	r2, #1
 8008e2c:	e7e6      	b.n	8008dfc <_gcvt+0x12c>
 8008e2e:	f801 5b01 	strb.w	r5, [r1], #1
 8008e32:	1a60      	subs	r0, r4, r1
 8008e34:	2800      	cmp	r0, #0
 8008e36:	dcfa      	bgt.n	8008e2e <_gcvt+0x15e>
 8008e38:	2a00      	cmp	r2, #0
 8008e3a:	bfa8      	it	ge
 8008e3c:	189b      	addge	r3, r3, r2
 8008e3e:	e7e3      	b.n	8008e08 <_gcvt+0x138>
 8008e40:	4619      	mov	r1, r3
 8008e42:	189c      	adds	r4, r3, r2
 8008e44:	2530      	movs	r5, #48	; 0x30
 8008e46:	e7f4      	b.n	8008e32 <_gcvt+0x162>
 8008e48:	eb1c432d 	.word	0xeb1c432d
 8008e4c:	3f1a36e2 	.word	0x3f1a36e2

08008e50 <_fstat_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4d07      	ldr	r5, [pc, #28]	; (8008e70 <_fstat_r+0x20>)
 8008e54:	2300      	movs	r3, #0
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	602b      	str	r3, [r5, #0]
 8008e5e:	f7f8 fd8e 	bl	800197e <_fstat>
 8008e62:	1c43      	adds	r3, r0, #1
 8008e64:	d102      	bne.n	8008e6c <_fstat_r+0x1c>
 8008e66:	682b      	ldr	r3, [r5, #0]
 8008e68:	b103      	cbz	r3, 8008e6c <_fstat_r+0x1c>
 8008e6a:	6023      	str	r3, [r4, #0]
 8008e6c:	bd38      	pop	{r3, r4, r5, pc}
 8008e6e:	bf00      	nop
 8008e70:	2000a398 	.word	0x2000a398

08008e74 <_isatty_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4d06      	ldr	r5, [pc, #24]	; (8008e90 <_isatty_r+0x1c>)
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	602b      	str	r3, [r5, #0]
 8008e80:	f7f8 fd8d 	bl	800199e <_isatty>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_isatty_r+0x1a>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_isatty_r+0x1a>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	2000a398 	.word	0x2000a398

08008e94 <_localeconv_r>:
 8008e94:	4800      	ldr	r0, [pc, #0]	; (8008e98 <_localeconv_r+0x4>)
 8008e96:	4770      	bx	lr
 8008e98:	20000168 	.word	0x20000168

08008e9c <_lseek_r>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4d07      	ldr	r5, [pc, #28]	; (8008ebc <_lseek_r+0x20>)
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	4608      	mov	r0, r1
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	602a      	str	r2, [r5, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f7f8 fd82 	bl	80019b4 <_lseek>
 8008eb0:	1c43      	adds	r3, r0, #1
 8008eb2:	d102      	bne.n	8008eba <_lseek_r+0x1e>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	b103      	cbz	r3, 8008eba <_lseek_r+0x1e>
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	bd38      	pop	{r3, r4, r5, pc}
 8008ebc:	2000a398 	.word	0x2000a398

08008ec0 <malloc>:
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <malloc+0xc>)
 8008ec2:	4601      	mov	r1, r0
 8008ec4:	6818      	ldr	r0, [r3, #0]
 8008ec6:	f7fe b95f 	b.w	8007188 <_malloc_r>
 8008eca:	bf00      	nop
 8008ecc:	20000014 	.word	0x20000014

08008ed0 <__malloc_lock>:
 8008ed0:	4801      	ldr	r0, [pc, #4]	; (8008ed8 <__malloc_lock+0x8>)
 8008ed2:	f7fe b850 	b.w	8006f76 <__retarget_lock_acquire_recursive>
 8008ed6:	bf00      	nop
 8008ed8:	2000a38c 	.word	0x2000a38c

08008edc <__malloc_unlock>:
 8008edc:	4801      	ldr	r0, [pc, #4]	; (8008ee4 <__malloc_unlock+0x8>)
 8008ede:	f7fe b84b 	b.w	8006f78 <__retarget_lock_release_recursive>
 8008ee2:	bf00      	nop
 8008ee4:	2000a38c 	.word	0x2000a38c

08008ee8 <_Balloc>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008eec:	4604      	mov	r4, r0
 8008eee:	460d      	mov	r5, r1
 8008ef0:	b976      	cbnz	r6, 8008f10 <_Balloc+0x28>
 8008ef2:	2010      	movs	r0, #16
 8008ef4:	f7ff ffe4 	bl	8008ec0 <malloc>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	6260      	str	r0, [r4, #36]	; 0x24
 8008efc:	b920      	cbnz	r0, 8008f08 <_Balloc+0x20>
 8008efe:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <_Balloc+0x78>)
 8008f00:	4818      	ldr	r0, [pc, #96]	; (8008f64 <_Balloc+0x7c>)
 8008f02:	2166      	movs	r1, #102	; 0x66
 8008f04:	f000 fd1c 	bl	8009940 <__assert_func>
 8008f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f0c:	6006      	str	r6, [r0, #0]
 8008f0e:	60c6      	str	r6, [r0, #12]
 8008f10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f12:	68f3      	ldr	r3, [r6, #12]
 8008f14:	b183      	cbz	r3, 8008f38 <_Balloc+0x50>
 8008f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f1e:	b9b8      	cbnz	r0, 8008f50 <_Balloc+0x68>
 8008f20:	2101      	movs	r1, #1
 8008f22:	fa01 f605 	lsl.w	r6, r1, r5
 8008f26:	1d72      	adds	r2, r6, #5
 8008f28:	0092      	lsls	r2, r2, #2
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fb7e 	bl	800962c <_calloc_r>
 8008f30:	b160      	cbz	r0, 8008f4c <_Balloc+0x64>
 8008f32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f36:	e00e      	b.n	8008f56 <_Balloc+0x6e>
 8008f38:	2221      	movs	r2, #33	; 0x21
 8008f3a:	2104      	movs	r1, #4
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 fb75 	bl	800962c <_calloc_r>
 8008f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f44:	60f0      	str	r0, [r6, #12]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e4      	bne.n	8008f16 <_Balloc+0x2e>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	6802      	ldr	r2, [r0, #0]
 8008f52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f56:	2300      	movs	r3, #0
 8008f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f5c:	e7f7      	b.n	8008f4e <_Balloc+0x66>
 8008f5e:	bf00      	nop
 8008f60:	0800cce4 	.word	0x0800cce4
 8008f64:	0800cd67 	.word	0x0800cd67

08008f68 <_Bfree>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	460c      	mov	r4, r1
 8008f70:	b976      	cbnz	r6, 8008f90 <_Bfree+0x28>
 8008f72:	2010      	movs	r0, #16
 8008f74:	f7ff ffa4 	bl	8008ec0 <malloc>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	6268      	str	r0, [r5, #36]	; 0x24
 8008f7c:	b920      	cbnz	r0, 8008f88 <_Bfree+0x20>
 8008f7e:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <_Bfree+0x3c>)
 8008f80:	4809      	ldr	r0, [pc, #36]	; (8008fa8 <_Bfree+0x40>)
 8008f82:	218a      	movs	r1, #138	; 0x8a
 8008f84:	f000 fcdc 	bl	8009940 <__assert_func>
 8008f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f8c:	6006      	str	r6, [r0, #0]
 8008f8e:	60c6      	str	r6, [r0, #12]
 8008f90:	b13c      	cbz	r4, 8008fa2 <_Bfree+0x3a>
 8008f92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f94:	6862      	ldr	r2, [r4, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f9c:	6021      	str	r1, [r4, #0]
 8008f9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	0800cce4 	.word	0x0800cce4
 8008fa8:	0800cd67 	.word	0x0800cd67

08008fac <__multadd>:
 8008fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb0:	690d      	ldr	r5, [r1, #16]
 8008fb2:	4607      	mov	r7, r0
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	461e      	mov	r6, r3
 8008fb8:	f101 0c14 	add.w	ip, r1, #20
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	f8dc 3000 	ldr.w	r3, [ip]
 8008fc2:	b299      	uxth	r1, r3
 8008fc4:	fb02 6101 	mla	r1, r2, r1, r6
 8008fc8:	0c1e      	lsrs	r6, r3, #16
 8008fca:	0c0b      	lsrs	r3, r1, #16
 8008fcc:	fb02 3306 	mla	r3, r2, r6, r3
 8008fd0:	b289      	uxth	r1, r1
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fd8:	4285      	cmp	r5, r0
 8008fda:	f84c 1b04 	str.w	r1, [ip], #4
 8008fde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fe2:	dcec      	bgt.n	8008fbe <__multadd+0x12>
 8008fe4:	b30e      	cbz	r6, 800902a <__multadd+0x7e>
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	42ab      	cmp	r3, r5
 8008fea:	dc19      	bgt.n	8009020 <__multadd+0x74>
 8008fec:	6861      	ldr	r1, [r4, #4]
 8008fee:	4638      	mov	r0, r7
 8008ff0:	3101      	adds	r1, #1
 8008ff2:	f7ff ff79 	bl	8008ee8 <_Balloc>
 8008ff6:	4680      	mov	r8, r0
 8008ff8:	b928      	cbnz	r0, 8009006 <__multadd+0x5a>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	4b0c      	ldr	r3, [pc, #48]	; (8009030 <__multadd+0x84>)
 8008ffe:	480d      	ldr	r0, [pc, #52]	; (8009034 <__multadd+0x88>)
 8009000:	21b5      	movs	r1, #181	; 0xb5
 8009002:	f000 fc9d 	bl	8009940 <__assert_func>
 8009006:	6922      	ldr	r2, [r4, #16]
 8009008:	3202      	adds	r2, #2
 800900a:	f104 010c 	add.w	r1, r4, #12
 800900e:	0092      	lsls	r2, r2, #2
 8009010:	300c      	adds	r0, #12
 8009012:	f7fe f837 	bl	8007084 <memcpy>
 8009016:	4621      	mov	r1, r4
 8009018:	4638      	mov	r0, r7
 800901a:	f7ff ffa5 	bl	8008f68 <_Bfree>
 800901e:	4644      	mov	r4, r8
 8009020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009024:	3501      	adds	r5, #1
 8009026:	615e      	str	r6, [r3, #20]
 8009028:	6125      	str	r5, [r4, #16]
 800902a:	4620      	mov	r0, r4
 800902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009030:	0800cd56 	.word	0x0800cd56
 8009034:	0800cd67 	.word	0x0800cd67

08009038 <__hi0bits>:
 8009038:	0c03      	lsrs	r3, r0, #16
 800903a:	041b      	lsls	r3, r3, #16
 800903c:	b9d3      	cbnz	r3, 8009074 <__hi0bits+0x3c>
 800903e:	0400      	lsls	r0, r0, #16
 8009040:	2310      	movs	r3, #16
 8009042:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009046:	bf04      	itt	eq
 8009048:	0200      	lsleq	r0, r0, #8
 800904a:	3308      	addeq	r3, #8
 800904c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009050:	bf04      	itt	eq
 8009052:	0100      	lsleq	r0, r0, #4
 8009054:	3304      	addeq	r3, #4
 8009056:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800905a:	bf04      	itt	eq
 800905c:	0080      	lsleq	r0, r0, #2
 800905e:	3302      	addeq	r3, #2
 8009060:	2800      	cmp	r0, #0
 8009062:	db05      	blt.n	8009070 <__hi0bits+0x38>
 8009064:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009068:	f103 0301 	add.w	r3, r3, #1
 800906c:	bf08      	it	eq
 800906e:	2320      	moveq	r3, #32
 8009070:	4618      	mov	r0, r3
 8009072:	4770      	bx	lr
 8009074:	2300      	movs	r3, #0
 8009076:	e7e4      	b.n	8009042 <__hi0bits+0xa>

08009078 <__lo0bits>:
 8009078:	6803      	ldr	r3, [r0, #0]
 800907a:	f013 0207 	ands.w	r2, r3, #7
 800907e:	4601      	mov	r1, r0
 8009080:	d00b      	beq.n	800909a <__lo0bits+0x22>
 8009082:	07da      	lsls	r2, r3, #31
 8009084:	d423      	bmi.n	80090ce <__lo0bits+0x56>
 8009086:	0798      	lsls	r0, r3, #30
 8009088:	bf49      	itett	mi
 800908a:	085b      	lsrmi	r3, r3, #1
 800908c:	089b      	lsrpl	r3, r3, #2
 800908e:	2001      	movmi	r0, #1
 8009090:	600b      	strmi	r3, [r1, #0]
 8009092:	bf5c      	itt	pl
 8009094:	600b      	strpl	r3, [r1, #0]
 8009096:	2002      	movpl	r0, #2
 8009098:	4770      	bx	lr
 800909a:	b298      	uxth	r0, r3
 800909c:	b9a8      	cbnz	r0, 80090ca <__lo0bits+0x52>
 800909e:	0c1b      	lsrs	r3, r3, #16
 80090a0:	2010      	movs	r0, #16
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	b90a      	cbnz	r2, 80090aa <__lo0bits+0x32>
 80090a6:	3008      	adds	r0, #8
 80090a8:	0a1b      	lsrs	r3, r3, #8
 80090aa:	071a      	lsls	r2, r3, #28
 80090ac:	bf04      	itt	eq
 80090ae:	091b      	lsreq	r3, r3, #4
 80090b0:	3004      	addeq	r0, #4
 80090b2:	079a      	lsls	r2, r3, #30
 80090b4:	bf04      	itt	eq
 80090b6:	089b      	lsreq	r3, r3, #2
 80090b8:	3002      	addeq	r0, #2
 80090ba:	07da      	lsls	r2, r3, #31
 80090bc:	d403      	bmi.n	80090c6 <__lo0bits+0x4e>
 80090be:	085b      	lsrs	r3, r3, #1
 80090c0:	f100 0001 	add.w	r0, r0, #1
 80090c4:	d005      	beq.n	80090d2 <__lo0bits+0x5a>
 80090c6:	600b      	str	r3, [r1, #0]
 80090c8:	4770      	bx	lr
 80090ca:	4610      	mov	r0, r2
 80090cc:	e7e9      	b.n	80090a2 <__lo0bits+0x2a>
 80090ce:	2000      	movs	r0, #0
 80090d0:	4770      	bx	lr
 80090d2:	2020      	movs	r0, #32
 80090d4:	4770      	bx	lr
	...

080090d8 <__i2b>:
 80090d8:	b510      	push	{r4, lr}
 80090da:	460c      	mov	r4, r1
 80090dc:	2101      	movs	r1, #1
 80090de:	f7ff ff03 	bl	8008ee8 <_Balloc>
 80090e2:	4602      	mov	r2, r0
 80090e4:	b928      	cbnz	r0, 80090f2 <__i2b+0x1a>
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <__i2b+0x24>)
 80090e8:	4805      	ldr	r0, [pc, #20]	; (8009100 <__i2b+0x28>)
 80090ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090ee:	f000 fc27 	bl	8009940 <__assert_func>
 80090f2:	2301      	movs	r3, #1
 80090f4:	6144      	str	r4, [r0, #20]
 80090f6:	6103      	str	r3, [r0, #16]
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	bf00      	nop
 80090fc:	0800cd56 	.word	0x0800cd56
 8009100:	0800cd67 	.word	0x0800cd67

08009104 <__multiply>:
 8009104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009108:	4691      	mov	r9, r2
 800910a:	690a      	ldr	r2, [r1, #16]
 800910c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009110:	429a      	cmp	r2, r3
 8009112:	bfb8      	it	lt
 8009114:	460b      	movlt	r3, r1
 8009116:	460c      	mov	r4, r1
 8009118:	bfbc      	itt	lt
 800911a:	464c      	movlt	r4, r9
 800911c:	4699      	movlt	r9, r3
 800911e:	6927      	ldr	r7, [r4, #16]
 8009120:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009124:	68a3      	ldr	r3, [r4, #8]
 8009126:	6861      	ldr	r1, [r4, #4]
 8009128:	eb07 060a 	add.w	r6, r7, sl
 800912c:	42b3      	cmp	r3, r6
 800912e:	b085      	sub	sp, #20
 8009130:	bfb8      	it	lt
 8009132:	3101      	addlt	r1, #1
 8009134:	f7ff fed8 	bl	8008ee8 <_Balloc>
 8009138:	b930      	cbnz	r0, 8009148 <__multiply+0x44>
 800913a:	4602      	mov	r2, r0
 800913c:	4b44      	ldr	r3, [pc, #272]	; (8009250 <__multiply+0x14c>)
 800913e:	4845      	ldr	r0, [pc, #276]	; (8009254 <__multiply+0x150>)
 8009140:	f240 115d 	movw	r1, #349	; 0x15d
 8009144:	f000 fbfc 	bl	8009940 <__assert_func>
 8009148:	f100 0514 	add.w	r5, r0, #20
 800914c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009150:	462b      	mov	r3, r5
 8009152:	2200      	movs	r2, #0
 8009154:	4543      	cmp	r3, r8
 8009156:	d321      	bcc.n	800919c <__multiply+0x98>
 8009158:	f104 0314 	add.w	r3, r4, #20
 800915c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009160:	f109 0314 	add.w	r3, r9, #20
 8009164:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009168:	9202      	str	r2, [sp, #8]
 800916a:	1b3a      	subs	r2, r7, r4
 800916c:	3a15      	subs	r2, #21
 800916e:	f022 0203 	bic.w	r2, r2, #3
 8009172:	3204      	adds	r2, #4
 8009174:	f104 0115 	add.w	r1, r4, #21
 8009178:	428f      	cmp	r7, r1
 800917a:	bf38      	it	cc
 800917c:	2204      	movcc	r2, #4
 800917e:	9201      	str	r2, [sp, #4]
 8009180:	9a02      	ldr	r2, [sp, #8]
 8009182:	9303      	str	r3, [sp, #12]
 8009184:	429a      	cmp	r2, r3
 8009186:	d80c      	bhi.n	80091a2 <__multiply+0x9e>
 8009188:	2e00      	cmp	r6, #0
 800918a:	dd03      	ble.n	8009194 <__multiply+0x90>
 800918c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009190:	2b00      	cmp	r3, #0
 8009192:	d05a      	beq.n	800924a <__multiply+0x146>
 8009194:	6106      	str	r6, [r0, #16]
 8009196:	b005      	add	sp, #20
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	f843 2b04 	str.w	r2, [r3], #4
 80091a0:	e7d8      	b.n	8009154 <__multiply+0x50>
 80091a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80091a6:	f1ba 0f00 	cmp.w	sl, #0
 80091aa:	d024      	beq.n	80091f6 <__multiply+0xf2>
 80091ac:	f104 0e14 	add.w	lr, r4, #20
 80091b0:	46a9      	mov	r9, r5
 80091b2:	f04f 0c00 	mov.w	ip, #0
 80091b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091ba:	f8d9 1000 	ldr.w	r1, [r9]
 80091be:	fa1f fb82 	uxth.w	fp, r2
 80091c2:	b289      	uxth	r1, r1
 80091c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80091c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091cc:	f8d9 2000 	ldr.w	r2, [r9]
 80091d0:	4461      	add	r1, ip
 80091d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80091da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091de:	b289      	uxth	r1, r1
 80091e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091e4:	4577      	cmp	r7, lr
 80091e6:	f849 1b04 	str.w	r1, [r9], #4
 80091ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091ee:	d8e2      	bhi.n	80091b6 <__multiply+0xb2>
 80091f0:	9a01      	ldr	r2, [sp, #4]
 80091f2:	f845 c002 	str.w	ip, [r5, r2]
 80091f6:	9a03      	ldr	r2, [sp, #12]
 80091f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091fc:	3304      	adds	r3, #4
 80091fe:	f1b9 0f00 	cmp.w	r9, #0
 8009202:	d020      	beq.n	8009246 <__multiply+0x142>
 8009204:	6829      	ldr	r1, [r5, #0]
 8009206:	f104 0c14 	add.w	ip, r4, #20
 800920a:	46ae      	mov	lr, r5
 800920c:	f04f 0a00 	mov.w	sl, #0
 8009210:	f8bc b000 	ldrh.w	fp, [ip]
 8009214:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009218:	fb09 220b 	mla	r2, r9, fp, r2
 800921c:	4492      	add	sl, r2
 800921e:	b289      	uxth	r1, r1
 8009220:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009224:	f84e 1b04 	str.w	r1, [lr], #4
 8009228:	f85c 2b04 	ldr.w	r2, [ip], #4
 800922c:	f8be 1000 	ldrh.w	r1, [lr]
 8009230:	0c12      	lsrs	r2, r2, #16
 8009232:	fb09 1102 	mla	r1, r9, r2, r1
 8009236:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800923a:	4567      	cmp	r7, ip
 800923c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009240:	d8e6      	bhi.n	8009210 <__multiply+0x10c>
 8009242:	9a01      	ldr	r2, [sp, #4]
 8009244:	50a9      	str	r1, [r5, r2]
 8009246:	3504      	adds	r5, #4
 8009248:	e79a      	b.n	8009180 <__multiply+0x7c>
 800924a:	3e01      	subs	r6, #1
 800924c:	e79c      	b.n	8009188 <__multiply+0x84>
 800924e:	bf00      	nop
 8009250:	0800cd56 	.word	0x0800cd56
 8009254:	0800cd67 	.word	0x0800cd67

08009258 <__pow5mult>:
 8009258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800925c:	4615      	mov	r5, r2
 800925e:	f012 0203 	ands.w	r2, r2, #3
 8009262:	4606      	mov	r6, r0
 8009264:	460f      	mov	r7, r1
 8009266:	d007      	beq.n	8009278 <__pow5mult+0x20>
 8009268:	4c25      	ldr	r4, [pc, #148]	; (8009300 <__pow5mult+0xa8>)
 800926a:	3a01      	subs	r2, #1
 800926c:	2300      	movs	r3, #0
 800926e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009272:	f7ff fe9b 	bl	8008fac <__multadd>
 8009276:	4607      	mov	r7, r0
 8009278:	10ad      	asrs	r5, r5, #2
 800927a:	d03d      	beq.n	80092f8 <__pow5mult+0xa0>
 800927c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800927e:	b97c      	cbnz	r4, 80092a0 <__pow5mult+0x48>
 8009280:	2010      	movs	r0, #16
 8009282:	f7ff fe1d 	bl	8008ec0 <malloc>
 8009286:	4602      	mov	r2, r0
 8009288:	6270      	str	r0, [r6, #36]	; 0x24
 800928a:	b928      	cbnz	r0, 8009298 <__pow5mult+0x40>
 800928c:	4b1d      	ldr	r3, [pc, #116]	; (8009304 <__pow5mult+0xac>)
 800928e:	481e      	ldr	r0, [pc, #120]	; (8009308 <__pow5mult+0xb0>)
 8009290:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009294:	f000 fb54 	bl	8009940 <__assert_func>
 8009298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800929c:	6004      	str	r4, [r0, #0]
 800929e:	60c4      	str	r4, [r0, #12]
 80092a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092a8:	b94c      	cbnz	r4, 80092be <__pow5mult+0x66>
 80092aa:	f240 2171 	movw	r1, #625	; 0x271
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7ff ff12 	bl	80090d8 <__i2b>
 80092b4:	2300      	movs	r3, #0
 80092b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80092ba:	4604      	mov	r4, r0
 80092bc:	6003      	str	r3, [r0, #0]
 80092be:	f04f 0900 	mov.w	r9, #0
 80092c2:	07eb      	lsls	r3, r5, #31
 80092c4:	d50a      	bpl.n	80092dc <__pow5mult+0x84>
 80092c6:	4639      	mov	r1, r7
 80092c8:	4622      	mov	r2, r4
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7ff ff1a 	bl	8009104 <__multiply>
 80092d0:	4639      	mov	r1, r7
 80092d2:	4680      	mov	r8, r0
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7ff fe47 	bl	8008f68 <_Bfree>
 80092da:	4647      	mov	r7, r8
 80092dc:	106d      	asrs	r5, r5, #1
 80092de:	d00b      	beq.n	80092f8 <__pow5mult+0xa0>
 80092e0:	6820      	ldr	r0, [r4, #0]
 80092e2:	b938      	cbnz	r0, 80092f4 <__pow5mult+0x9c>
 80092e4:	4622      	mov	r2, r4
 80092e6:	4621      	mov	r1, r4
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff ff0b 	bl	8009104 <__multiply>
 80092ee:	6020      	str	r0, [r4, #0]
 80092f0:	f8c0 9000 	str.w	r9, [r0]
 80092f4:	4604      	mov	r4, r0
 80092f6:	e7e4      	b.n	80092c2 <__pow5mult+0x6a>
 80092f8:	4638      	mov	r0, r7
 80092fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fe:	bf00      	nop
 8009300:	0800ceb8 	.word	0x0800ceb8
 8009304:	0800cce4 	.word	0x0800cce4
 8009308:	0800cd67 	.word	0x0800cd67

0800930c <__lshift>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	460c      	mov	r4, r1
 8009312:	6849      	ldr	r1, [r1, #4]
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800931a:	68a3      	ldr	r3, [r4, #8]
 800931c:	4607      	mov	r7, r0
 800931e:	4691      	mov	r9, r2
 8009320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009324:	f108 0601 	add.w	r6, r8, #1
 8009328:	42b3      	cmp	r3, r6
 800932a:	db0b      	blt.n	8009344 <__lshift+0x38>
 800932c:	4638      	mov	r0, r7
 800932e:	f7ff fddb 	bl	8008ee8 <_Balloc>
 8009332:	4605      	mov	r5, r0
 8009334:	b948      	cbnz	r0, 800934a <__lshift+0x3e>
 8009336:	4602      	mov	r2, r0
 8009338:	4b2a      	ldr	r3, [pc, #168]	; (80093e4 <__lshift+0xd8>)
 800933a:	482b      	ldr	r0, [pc, #172]	; (80093e8 <__lshift+0xdc>)
 800933c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009340:	f000 fafe 	bl	8009940 <__assert_func>
 8009344:	3101      	adds	r1, #1
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	e7ee      	b.n	8009328 <__lshift+0x1c>
 800934a:	2300      	movs	r3, #0
 800934c:	f100 0114 	add.w	r1, r0, #20
 8009350:	f100 0210 	add.w	r2, r0, #16
 8009354:	4618      	mov	r0, r3
 8009356:	4553      	cmp	r3, sl
 8009358:	db37      	blt.n	80093ca <__lshift+0xbe>
 800935a:	6920      	ldr	r0, [r4, #16]
 800935c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009360:	f104 0314 	add.w	r3, r4, #20
 8009364:	f019 091f 	ands.w	r9, r9, #31
 8009368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800936c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009370:	d02f      	beq.n	80093d2 <__lshift+0xc6>
 8009372:	f1c9 0e20 	rsb	lr, r9, #32
 8009376:	468a      	mov	sl, r1
 8009378:	f04f 0c00 	mov.w	ip, #0
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	fa02 f209 	lsl.w	r2, r2, r9
 8009382:	ea42 020c 	orr.w	r2, r2, ip
 8009386:	f84a 2b04 	str.w	r2, [sl], #4
 800938a:	f853 2b04 	ldr.w	r2, [r3], #4
 800938e:	4298      	cmp	r0, r3
 8009390:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009394:	d8f2      	bhi.n	800937c <__lshift+0x70>
 8009396:	1b03      	subs	r3, r0, r4
 8009398:	3b15      	subs	r3, #21
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	3304      	adds	r3, #4
 80093a0:	f104 0215 	add.w	r2, r4, #21
 80093a4:	4290      	cmp	r0, r2
 80093a6:	bf38      	it	cc
 80093a8:	2304      	movcc	r3, #4
 80093aa:	f841 c003 	str.w	ip, [r1, r3]
 80093ae:	f1bc 0f00 	cmp.w	ip, #0
 80093b2:	d001      	beq.n	80093b8 <__lshift+0xac>
 80093b4:	f108 0602 	add.w	r6, r8, #2
 80093b8:	3e01      	subs	r6, #1
 80093ba:	4638      	mov	r0, r7
 80093bc:	612e      	str	r6, [r5, #16]
 80093be:	4621      	mov	r1, r4
 80093c0:	f7ff fdd2 	bl	8008f68 <_Bfree>
 80093c4:	4628      	mov	r0, r5
 80093c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80093ce:	3301      	adds	r3, #1
 80093d0:	e7c1      	b.n	8009356 <__lshift+0x4a>
 80093d2:	3904      	subs	r1, #4
 80093d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80093dc:	4298      	cmp	r0, r3
 80093de:	d8f9      	bhi.n	80093d4 <__lshift+0xc8>
 80093e0:	e7ea      	b.n	80093b8 <__lshift+0xac>
 80093e2:	bf00      	nop
 80093e4:	0800cd56 	.word	0x0800cd56
 80093e8:	0800cd67 	.word	0x0800cd67

080093ec <__mcmp>:
 80093ec:	b530      	push	{r4, r5, lr}
 80093ee:	6902      	ldr	r2, [r0, #16]
 80093f0:	690c      	ldr	r4, [r1, #16]
 80093f2:	1b12      	subs	r2, r2, r4
 80093f4:	d10e      	bne.n	8009414 <__mcmp+0x28>
 80093f6:	f100 0314 	add.w	r3, r0, #20
 80093fa:	3114      	adds	r1, #20
 80093fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009400:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009404:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009408:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800940c:	42a5      	cmp	r5, r4
 800940e:	d003      	beq.n	8009418 <__mcmp+0x2c>
 8009410:	d305      	bcc.n	800941e <__mcmp+0x32>
 8009412:	2201      	movs	r2, #1
 8009414:	4610      	mov	r0, r2
 8009416:	bd30      	pop	{r4, r5, pc}
 8009418:	4283      	cmp	r3, r0
 800941a:	d3f3      	bcc.n	8009404 <__mcmp+0x18>
 800941c:	e7fa      	b.n	8009414 <__mcmp+0x28>
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	e7f7      	b.n	8009414 <__mcmp+0x28>

08009424 <__mdiff>:
 8009424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009428:	460c      	mov	r4, r1
 800942a:	4606      	mov	r6, r0
 800942c:	4611      	mov	r1, r2
 800942e:	4620      	mov	r0, r4
 8009430:	4690      	mov	r8, r2
 8009432:	f7ff ffdb 	bl	80093ec <__mcmp>
 8009436:	1e05      	subs	r5, r0, #0
 8009438:	d110      	bne.n	800945c <__mdiff+0x38>
 800943a:	4629      	mov	r1, r5
 800943c:	4630      	mov	r0, r6
 800943e:	f7ff fd53 	bl	8008ee8 <_Balloc>
 8009442:	b930      	cbnz	r0, 8009452 <__mdiff+0x2e>
 8009444:	4b3a      	ldr	r3, [pc, #232]	; (8009530 <__mdiff+0x10c>)
 8009446:	4602      	mov	r2, r0
 8009448:	f240 2132 	movw	r1, #562	; 0x232
 800944c:	4839      	ldr	r0, [pc, #228]	; (8009534 <__mdiff+0x110>)
 800944e:	f000 fa77 	bl	8009940 <__assert_func>
 8009452:	2301      	movs	r3, #1
 8009454:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945c:	bfa4      	itt	ge
 800945e:	4643      	movge	r3, r8
 8009460:	46a0      	movge	r8, r4
 8009462:	4630      	mov	r0, r6
 8009464:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009468:	bfa6      	itte	ge
 800946a:	461c      	movge	r4, r3
 800946c:	2500      	movge	r5, #0
 800946e:	2501      	movlt	r5, #1
 8009470:	f7ff fd3a 	bl	8008ee8 <_Balloc>
 8009474:	b920      	cbnz	r0, 8009480 <__mdiff+0x5c>
 8009476:	4b2e      	ldr	r3, [pc, #184]	; (8009530 <__mdiff+0x10c>)
 8009478:	4602      	mov	r2, r0
 800947a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800947e:	e7e5      	b.n	800944c <__mdiff+0x28>
 8009480:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009484:	6926      	ldr	r6, [r4, #16]
 8009486:	60c5      	str	r5, [r0, #12]
 8009488:	f104 0914 	add.w	r9, r4, #20
 800948c:	f108 0514 	add.w	r5, r8, #20
 8009490:	f100 0e14 	add.w	lr, r0, #20
 8009494:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800949c:	f108 0210 	add.w	r2, r8, #16
 80094a0:	46f2      	mov	sl, lr
 80094a2:	2100      	movs	r1, #0
 80094a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80094a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094ac:	fa1f f883 	uxth.w	r8, r3
 80094b0:	fa11 f18b 	uxtah	r1, r1, fp
 80094b4:	0c1b      	lsrs	r3, r3, #16
 80094b6:	eba1 0808 	sub.w	r8, r1, r8
 80094ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094c2:	fa1f f888 	uxth.w	r8, r8
 80094c6:	1419      	asrs	r1, r3, #16
 80094c8:	454e      	cmp	r6, r9
 80094ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094ce:	f84a 3b04 	str.w	r3, [sl], #4
 80094d2:	d8e7      	bhi.n	80094a4 <__mdiff+0x80>
 80094d4:	1b33      	subs	r3, r6, r4
 80094d6:	3b15      	subs	r3, #21
 80094d8:	f023 0303 	bic.w	r3, r3, #3
 80094dc:	3304      	adds	r3, #4
 80094de:	3415      	adds	r4, #21
 80094e0:	42a6      	cmp	r6, r4
 80094e2:	bf38      	it	cc
 80094e4:	2304      	movcc	r3, #4
 80094e6:	441d      	add	r5, r3
 80094e8:	4473      	add	r3, lr
 80094ea:	469e      	mov	lr, r3
 80094ec:	462e      	mov	r6, r5
 80094ee:	4566      	cmp	r6, ip
 80094f0:	d30e      	bcc.n	8009510 <__mdiff+0xec>
 80094f2:	f10c 0203 	add.w	r2, ip, #3
 80094f6:	1b52      	subs	r2, r2, r5
 80094f8:	f022 0203 	bic.w	r2, r2, #3
 80094fc:	3d03      	subs	r5, #3
 80094fe:	45ac      	cmp	ip, r5
 8009500:	bf38      	it	cc
 8009502:	2200      	movcc	r2, #0
 8009504:	441a      	add	r2, r3
 8009506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800950a:	b17b      	cbz	r3, 800952c <__mdiff+0x108>
 800950c:	6107      	str	r7, [r0, #16]
 800950e:	e7a3      	b.n	8009458 <__mdiff+0x34>
 8009510:	f856 8b04 	ldr.w	r8, [r6], #4
 8009514:	fa11 f288 	uxtah	r2, r1, r8
 8009518:	1414      	asrs	r4, r2, #16
 800951a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800951e:	b292      	uxth	r2, r2
 8009520:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009524:	f84e 2b04 	str.w	r2, [lr], #4
 8009528:	1421      	asrs	r1, r4, #16
 800952a:	e7e0      	b.n	80094ee <__mdiff+0xca>
 800952c:	3f01      	subs	r7, #1
 800952e:	e7ea      	b.n	8009506 <__mdiff+0xe2>
 8009530:	0800cd56 	.word	0x0800cd56
 8009534:	0800cd67 	.word	0x0800cd67

08009538 <__d2b>:
 8009538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800953c:	4689      	mov	r9, r1
 800953e:	2101      	movs	r1, #1
 8009540:	ec57 6b10 	vmov	r6, r7, d0
 8009544:	4690      	mov	r8, r2
 8009546:	f7ff fccf 	bl	8008ee8 <_Balloc>
 800954a:	4604      	mov	r4, r0
 800954c:	b930      	cbnz	r0, 800955c <__d2b+0x24>
 800954e:	4602      	mov	r2, r0
 8009550:	4b25      	ldr	r3, [pc, #148]	; (80095e8 <__d2b+0xb0>)
 8009552:	4826      	ldr	r0, [pc, #152]	; (80095ec <__d2b+0xb4>)
 8009554:	f240 310a 	movw	r1, #778	; 0x30a
 8009558:	f000 f9f2 	bl	8009940 <__assert_func>
 800955c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009564:	bb35      	cbnz	r5, 80095b4 <__d2b+0x7c>
 8009566:	2e00      	cmp	r6, #0
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	d028      	beq.n	80095be <__d2b+0x86>
 800956c:	4668      	mov	r0, sp
 800956e:	9600      	str	r6, [sp, #0]
 8009570:	f7ff fd82 	bl	8009078 <__lo0bits>
 8009574:	9900      	ldr	r1, [sp, #0]
 8009576:	b300      	cbz	r0, 80095ba <__d2b+0x82>
 8009578:	9a01      	ldr	r2, [sp, #4]
 800957a:	f1c0 0320 	rsb	r3, r0, #32
 800957e:	fa02 f303 	lsl.w	r3, r2, r3
 8009582:	430b      	orrs	r3, r1
 8009584:	40c2      	lsrs	r2, r0
 8009586:	6163      	str	r3, [r4, #20]
 8009588:	9201      	str	r2, [sp, #4]
 800958a:	9b01      	ldr	r3, [sp, #4]
 800958c:	61a3      	str	r3, [r4, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	bf14      	ite	ne
 8009592:	2202      	movne	r2, #2
 8009594:	2201      	moveq	r2, #1
 8009596:	6122      	str	r2, [r4, #16]
 8009598:	b1d5      	cbz	r5, 80095d0 <__d2b+0x98>
 800959a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800959e:	4405      	add	r5, r0
 80095a0:	f8c9 5000 	str.w	r5, [r9]
 80095a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095a8:	f8c8 0000 	str.w	r0, [r8]
 80095ac:	4620      	mov	r0, r4
 80095ae:	b003      	add	sp, #12
 80095b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095b8:	e7d5      	b.n	8009566 <__d2b+0x2e>
 80095ba:	6161      	str	r1, [r4, #20]
 80095bc:	e7e5      	b.n	800958a <__d2b+0x52>
 80095be:	a801      	add	r0, sp, #4
 80095c0:	f7ff fd5a 	bl	8009078 <__lo0bits>
 80095c4:	9b01      	ldr	r3, [sp, #4]
 80095c6:	6163      	str	r3, [r4, #20]
 80095c8:	2201      	movs	r2, #1
 80095ca:	6122      	str	r2, [r4, #16]
 80095cc:	3020      	adds	r0, #32
 80095ce:	e7e3      	b.n	8009598 <__d2b+0x60>
 80095d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095d8:	f8c9 0000 	str.w	r0, [r9]
 80095dc:	6918      	ldr	r0, [r3, #16]
 80095de:	f7ff fd2b 	bl	8009038 <__hi0bits>
 80095e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095e6:	e7df      	b.n	80095a8 <__d2b+0x70>
 80095e8:	0800cd56 	.word	0x0800cd56
 80095ec:	0800cd67 	.word	0x0800cd67

080095f0 <_mprec_log10>:
 80095f0:	2817      	cmp	r0, #23
 80095f2:	b5d0      	push	{r4, r6, r7, lr}
 80095f4:	4604      	mov	r4, r0
 80095f6:	dc07      	bgt.n	8009608 <_mprec_log10+0x18>
 80095f8:	4809      	ldr	r0, [pc, #36]	; (8009620 <_mprec_log10+0x30>)
 80095fa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80095fe:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009602:	ec41 0b10 	vmov	d0, r0, r1
 8009606:	bdd0      	pop	{r4, r6, r7, pc}
 8009608:	4906      	ldr	r1, [pc, #24]	; (8009624 <_mprec_log10+0x34>)
 800960a:	4f07      	ldr	r7, [pc, #28]	; (8009628 <_mprec_log10+0x38>)
 800960c:	2000      	movs	r0, #0
 800960e:	2600      	movs	r6, #0
 8009610:	4632      	mov	r2, r6
 8009612:	463b      	mov	r3, r7
 8009614:	f7f7 f800 	bl	8000618 <__aeabi_dmul>
 8009618:	3c01      	subs	r4, #1
 800961a:	d1f9      	bne.n	8009610 <_mprec_log10+0x20>
 800961c:	e7f1      	b.n	8009602 <_mprec_log10+0x12>
 800961e:	bf00      	nop
 8009620:	0800cdf0 	.word	0x0800cdf0
 8009624:	3ff00000 	.word	0x3ff00000
 8009628:	40240000 	.word	0x40240000

0800962c <_calloc_r>:
 800962c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800962e:	fba1 2402 	umull	r2, r4, r1, r2
 8009632:	b94c      	cbnz	r4, 8009648 <_calloc_r+0x1c>
 8009634:	4611      	mov	r1, r2
 8009636:	9201      	str	r2, [sp, #4]
 8009638:	f7fd fda6 	bl	8007188 <_malloc_r>
 800963c:	9a01      	ldr	r2, [sp, #4]
 800963e:	4605      	mov	r5, r0
 8009640:	b930      	cbnz	r0, 8009650 <_calloc_r+0x24>
 8009642:	4628      	mov	r0, r5
 8009644:	b003      	add	sp, #12
 8009646:	bd30      	pop	{r4, r5, pc}
 8009648:	220c      	movs	r2, #12
 800964a:	6002      	str	r2, [r0, #0]
 800964c:	2500      	movs	r5, #0
 800964e:	e7f8      	b.n	8009642 <_calloc_r+0x16>
 8009650:	4621      	mov	r1, r4
 8009652:	f7fd fd25 	bl	80070a0 <memset>
 8009656:	e7f4      	b.n	8009642 <_calloc_r+0x16>

08009658 <__sfputc_r>:
 8009658:	6893      	ldr	r3, [r2, #8]
 800965a:	3b01      	subs	r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	b410      	push	{r4}
 8009660:	6093      	str	r3, [r2, #8]
 8009662:	da08      	bge.n	8009676 <__sfputc_r+0x1e>
 8009664:	6994      	ldr	r4, [r2, #24]
 8009666:	42a3      	cmp	r3, r4
 8009668:	db01      	blt.n	800966e <__sfputc_r+0x16>
 800966a:	290a      	cmp	r1, #10
 800966c:	d103      	bne.n	8009676 <__sfputc_r+0x1e>
 800966e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009672:	f7fe bb49 	b.w	8007d08 <__swbuf_r>
 8009676:	6813      	ldr	r3, [r2, #0]
 8009678:	1c58      	adds	r0, r3, #1
 800967a:	6010      	str	r0, [r2, #0]
 800967c:	7019      	strb	r1, [r3, #0]
 800967e:	4608      	mov	r0, r1
 8009680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009684:	4770      	bx	lr

08009686 <__sfputs_r>:
 8009686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009688:	4606      	mov	r6, r0
 800968a:	460f      	mov	r7, r1
 800968c:	4614      	mov	r4, r2
 800968e:	18d5      	adds	r5, r2, r3
 8009690:	42ac      	cmp	r4, r5
 8009692:	d101      	bne.n	8009698 <__sfputs_r+0x12>
 8009694:	2000      	movs	r0, #0
 8009696:	e007      	b.n	80096a8 <__sfputs_r+0x22>
 8009698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969c:	463a      	mov	r2, r7
 800969e:	4630      	mov	r0, r6
 80096a0:	f7ff ffda 	bl	8009658 <__sfputc_r>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d1f3      	bne.n	8009690 <__sfputs_r+0xa>
 80096a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096ac <_vfiprintf_r>:
 80096ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	460d      	mov	r5, r1
 80096b2:	b09d      	sub	sp, #116	; 0x74
 80096b4:	4614      	mov	r4, r2
 80096b6:	4698      	mov	r8, r3
 80096b8:	4606      	mov	r6, r0
 80096ba:	b118      	cbz	r0, 80096c4 <_vfiprintf_r+0x18>
 80096bc:	6983      	ldr	r3, [r0, #24]
 80096be:	b90b      	cbnz	r3, 80096c4 <_vfiprintf_r+0x18>
 80096c0:	f7fd fb6e 	bl	8006da0 <__sinit>
 80096c4:	4b89      	ldr	r3, [pc, #548]	; (80098ec <_vfiprintf_r+0x240>)
 80096c6:	429d      	cmp	r5, r3
 80096c8:	d11b      	bne.n	8009702 <_vfiprintf_r+0x56>
 80096ca:	6875      	ldr	r5, [r6, #4]
 80096cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096ce:	07d9      	lsls	r1, r3, #31
 80096d0:	d405      	bmi.n	80096de <_vfiprintf_r+0x32>
 80096d2:	89ab      	ldrh	r3, [r5, #12]
 80096d4:	059a      	lsls	r2, r3, #22
 80096d6:	d402      	bmi.n	80096de <_vfiprintf_r+0x32>
 80096d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096da:	f7fd fc4c 	bl	8006f76 <__retarget_lock_acquire_recursive>
 80096de:	89ab      	ldrh	r3, [r5, #12]
 80096e0:	071b      	lsls	r3, r3, #28
 80096e2:	d501      	bpl.n	80096e8 <_vfiprintf_r+0x3c>
 80096e4:	692b      	ldr	r3, [r5, #16]
 80096e6:	b9eb      	cbnz	r3, 8009724 <_vfiprintf_r+0x78>
 80096e8:	4629      	mov	r1, r5
 80096ea:	4630      	mov	r0, r6
 80096ec:	f7fe fb7e 	bl	8007dec <__swsetup_r>
 80096f0:	b1c0      	cbz	r0, 8009724 <_vfiprintf_r+0x78>
 80096f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096f4:	07dc      	lsls	r4, r3, #31
 80096f6:	d50e      	bpl.n	8009716 <_vfiprintf_r+0x6a>
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	b01d      	add	sp, #116	; 0x74
 80096fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009702:	4b7b      	ldr	r3, [pc, #492]	; (80098f0 <_vfiprintf_r+0x244>)
 8009704:	429d      	cmp	r5, r3
 8009706:	d101      	bne.n	800970c <_vfiprintf_r+0x60>
 8009708:	68b5      	ldr	r5, [r6, #8]
 800970a:	e7df      	b.n	80096cc <_vfiprintf_r+0x20>
 800970c:	4b79      	ldr	r3, [pc, #484]	; (80098f4 <_vfiprintf_r+0x248>)
 800970e:	429d      	cmp	r5, r3
 8009710:	bf08      	it	eq
 8009712:	68f5      	ldreq	r5, [r6, #12]
 8009714:	e7da      	b.n	80096cc <_vfiprintf_r+0x20>
 8009716:	89ab      	ldrh	r3, [r5, #12]
 8009718:	0598      	lsls	r0, r3, #22
 800971a:	d4ed      	bmi.n	80096f8 <_vfiprintf_r+0x4c>
 800971c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800971e:	f7fd fc2b 	bl	8006f78 <__retarget_lock_release_recursive>
 8009722:	e7e9      	b.n	80096f8 <_vfiprintf_r+0x4c>
 8009724:	2300      	movs	r3, #0
 8009726:	9309      	str	r3, [sp, #36]	; 0x24
 8009728:	2320      	movs	r3, #32
 800972a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800972e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009732:	2330      	movs	r3, #48	; 0x30
 8009734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098f8 <_vfiprintf_r+0x24c>
 8009738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800973c:	f04f 0901 	mov.w	r9, #1
 8009740:	4623      	mov	r3, r4
 8009742:	469a      	mov	sl, r3
 8009744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009748:	b10a      	cbz	r2, 800974e <_vfiprintf_r+0xa2>
 800974a:	2a25      	cmp	r2, #37	; 0x25
 800974c:	d1f9      	bne.n	8009742 <_vfiprintf_r+0x96>
 800974e:	ebba 0b04 	subs.w	fp, sl, r4
 8009752:	d00b      	beq.n	800976c <_vfiprintf_r+0xc0>
 8009754:	465b      	mov	r3, fp
 8009756:	4622      	mov	r2, r4
 8009758:	4629      	mov	r1, r5
 800975a:	4630      	mov	r0, r6
 800975c:	f7ff ff93 	bl	8009686 <__sfputs_r>
 8009760:	3001      	adds	r0, #1
 8009762:	f000 80aa 	beq.w	80098ba <_vfiprintf_r+0x20e>
 8009766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009768:	445a      	add	r2, fp
 800976a:	9209      	str	r2, [sp, #36]	; 0x24
 800976c:	f89a 3000 	ldrb.w	r3, [sl]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f000 80a2 	beq.w	80098ba <_vfiprintf_r+0x20e>
 8009776:	2300      	movs	r3, #0
 8009778:	f04f 32ff 	mov.w	r2, #4294967295
 800977c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009780:	f10a 0a01 	add.w	sl, sl, #1
 8009784:	9304      	str	r3, [sp, #16]
 8009786:	9307      	str	r3, [sp, #28]
 8009788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800978c:	931a      	str	r3, [sp, #104]	; 0x68
 800978e:	4654      	mov	r4, sl
 8009790:	2205      	movs	r2, #5
 8009792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009796:	4858      	ldr	r0, [pc, #352]	; (80098f8 <_vfiprintf_r+0x24c>)
 8009798:	f7f6 fd32 	bl	8000200 <memchr>
 800979c:	9a04      	ldr	r2, [sp, #16]
 800979e:	b9d8      	cbnz	r0, 80097d8 <_vfiprintf_r+0x12c>
 80097a0:	06d1      	lsls	r1, r2, #27
 80097a2:	bf44      	itt	mi
 80097a4:	2320      	movmi	r3, #32
 80097a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097aa:	0713      	lsls	r3, r2, #28
 80097ac:	bf44      	itt	mi
 80097ae:	232b      	movmi	r3, #43	; 0x2b
 80097b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b4:	f89a 3000 	ldrb.w	r3, [sl]
 80097b8:	2b2a      	cmp	r3, #42	; 0x2a
 80097ba:	d015      	beq.n	80097e8 <_vfiprintf_r+0x13c>
 80097bc:	9a07      	ldr	r2, [sp, #28]
 80097be:	4654      	mov	r4, sl
 80097c0:	2000      	movs	r0, #0
 80097c2:	f04f 0c0a 	mov.w	ip, #10
 80097c6:	4621      	mov	r1, r4
 80097c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097cc:	3b30      	subs	r3, #48	; 0x30
 80097ce:	2b09      	cmp	r3, #9
 80097d0:	d94e      	bls.n	8009870 <_vfiprintf_r+0x1c4>
 80097d2:	b1b0      	cbz	r0, 8009802 <_vfiprintf_r+0x156>
 80097d4:	9207      	str	r2, [sp, #28]
 80097d6:	e014      	b.n	8009802 <_vfiprintf_r+0x156>
 80097d8:	eba0 0308 	sub.w	r3, r0, r8
 80097dc:	fa09 f303 	lsl.w	r3, r9, r3
 80097e0:	4313      	orrs	r3, r2
 80097e2:	9304      	str	r3, [sp, #16]
 80097e4:	46a2      	mov	sl, r4
 80097e6:	e7d2      	b.n	800978e <_vfiprintf_r+0xe2>
 80097e8:	9b03      	ldr	r3, [sp, #12]
 80097ea:	1d19      	adds	r1, r3, #4
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	9103      	str	r1, [sp, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	bfbb      	ittet	lt
 80097f4:	425b      	neglt	r3, r3
 80097f6:	f042 0202 	orrlt.w	r2, r2, #2
 80097fa:	9307      	strge	r3, [sp, #28]
 80097fc:	9307      	strlt	r3, [sp, #28]
 80097fe:	bfb8      	it	lt
 8009800:	9204      	strlt	r2, [sp, #16]
 8009802:	7823      	ldrb	r3, [r4, #0]
 8009804:	2b2e      	cmp	r3, #46	; 0x2e
 8009806:	d10c      	bne.n	8009822 <_vfiprintf_r+0x176>
 8009808:	7863      	ldrb	r3, [r4, #1]
 800980a:	2b2a      	cmp	r3, #42	; 0x2a
 800980c:	d135      	bne.n	800987a <_vfiprintf_r+0x1ce>
 800980e:	9b03      	ldr	r3, [sp, #12]
 8009810:	1d1a      	adds	r2, r3, #4
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	9203      	str	r2, [sp, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	bfb8      	it	lt
 800981a:	f04f 33ff 	movlt.w	r3, #4294967295
 800981e:	3402      	adds	r4, #2
 8009820:	9305      	str	r3, [sp, #20]
 8009822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009908 <_vfiprintf_r+0x25c>
 8009826:	7821      	ldrb	r1, [r4, #0]
 8009828:	2203      	movs	r2, #3
 800982a:	4650      	mov	r0, sl
 800982c:	f7f6 fce8 	bl	8000200 <memchr>
 8009830:	b140      	cbz	r0, 8009844 <_vfiprintf_r+0x198>
 8009832:	2340      	movs	r3, #64	; 0x40
 8009834:	eba0 000a 	sub.w	r0, r0, sl
 8009838:	fa03 f000 	lsl.w	r0, r3, r0
 800983c:	9b04      	ldr	r3, [sp, #16]
 800983e:	4303      	orrs	r3, r0
 8009840:	3401      	adds	r4, #1
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009848:	482c      	ldr	r0, [pc, #176]	; (80098fc <_vfiprintf_r+0x250>)
 800984a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800984e:	2206      	movs	r2, #6
 8009850:	f7f6 fcd6 	bl	8000200 <memchr>
 8009854:	2800      	cmp	r0, #0
 8009856:	d03f      	beq.n	80098d8 <_vfiprintf_r+0x22c>
 8009858:	4b29      	ldr	r3, [pc, #164]	; (8009900 <_vfiprintf_r+0x254>)
 800985a:	bb1b      	cbnz	r3, 80098a4 <_vfiprintf_r+0x1f8>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	3307      	adds	r3, #7
 8009860:	f023 0307 	bic.w	r3, r3, #7
 8009864:	3308      	adds	r3, #8
 8009866:	9303      	str	r3, [sp, #12]
 8009868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986a:	443b      	add	r3, r7
 800986c:	9309      	str	r3, [sp, #36]	; 0x24
 800986e:	e767      	b.n	8009740 <_vfiprintf_r+0x94>
 8009870:	fb0c 3202 	mla	r2, ip, r2, r3
 8009874:	460c      	mov	r4, r1
 8009876:	2001      	movs	r0, #1
 8009878:	e7a5      	b.n	80097c6 <_vfiprintf_r+0x11a>
 800987a:	2300      	movs	r3, #0
 800987c:	3401      	adds	r4, #1
 800987e:	9305      	str	r3, [sp, #20]
 8009880:	4619      	mov	r1, r3
 8009882:	f04f 0c0a 	mov.w	ip, #10
 8009886:	4620      	mov	r0, r4
 8009888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800988c:	3a30      	subs	r2, #48	; 0x30
 800988e:	2a09      	cmp	r2, #9
 8009890:	d903      	bls.n	800989a <_vfiprintf_r+0x1ee>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0c5      	beq.n	8009822 <_vfiprintf_r+0x176>
 8009896:	9105      	str	r1, [sp, #20]
 8009898:	e7c3      	b.n	8009822 <_vfiprintf_r+0x176>
 800989a:	fb0c 2101 	mla	r1, ip, r1, r2
 800989e:	4604      	mov	r4, r0
 80098a0:	2301      	movs	r3, #1
 80098a2:	e7f0      	b.n	8009886 <_vfiprintf_r+0x1da>
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462a      	mov	r2, r5
 80098aa:	4b16      	ldr	r3, [pc, #88]	; (8009904 <_vfiprintf_r+0x258>)
 80098ac:	a904      	add	r1, sp, #16
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7fd fd7e 	bl	80073b0 <_printf_float>
 80098b4:	4607      	mov	r7, r0
 80098b6:	1c78      	adds	r0, r7, #1
 80098b8:	d1d6      	bne.n	8009868 <_vfiprintf_r+0x1bc>
 80098ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098bc:	07d9      	lsls	r1, r3, #31
 80098be:	d405      	bmi.n	80098cc <_vfiprintf_r+0x220>
 80098c0:	89ab      	ldrh	r3, [r5, #12]
 80098c2:	059a      	lsls	r2, r3, #22
 80098c4:	d402      	bmi.n	80098cc <_vfiprintf_r+0x220>
 80098c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098c8:	f7fd fb56 	bl	8006f78 <__retarget_lock_release_recursive>
 80098cc:	89ab      	ldrh	r3, [r5, #12]
 80098ce:	065b      	lsls	r3, r3, #25
 80098d0:	f53f af12 	bmi.w	80096f8 <_vfiprintf_r+0x4c>
 80098d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098d6:	e711      	b.n	80096fc <_vfiprintf_r+0x50>
 80098d8:	ab03      	add	r3, sp, #12
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	462a      	mov	r2, r5
 80098de:	4b09      	ldr	r3, [pc, #36]	; (8009904 <_vfiprintf_r+0x258>)
 80098e0:	a904      	add	r1, sp, #16
 80098e2:	4630      	mov	r0, r6
 80098e4:	f7fe f808 	bl	80078f8 <_printf_i>
 80098e8:	e7e4      	b.n	80098b4 <_vfiprintf_r+0x208>
 80098ea:	bf00      	nop
 80098ec:	0800cb54 	.word	0x0800cb54
 80098f0:	0800cb74 	.word	0x0800cb74
 80098f4:	0800cb34 	.word	0x0800cb34
 80098f8:	0800cec4 	.word	0x0800cec4
 80098fc:	0800cece 	.word	0x0800cece
 8009900:	080073b1 	.word	0x080073b1
 8009904:	08009687 	.word	0x08009687
 8009908:	0800ceca 	.word	0x0800ceca

0800990c <_read_r>:
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	4d07      	ldr	r5, [pc, #28]	; (800992c <_read_r+0x20>)
 8009910:	4604      	mov	r4, r0
 8009912:	4608      	mov	r0, r1
 8009914:	4611      	mov	r1, r2
 8009916:	2200      	movs	r2, #0
 8009918:	602a      	str	r2, [r5, #0]
 800991a:	461a      	mov	r2, r3
 800991c:	f7f7 ffea 	bl	80018f4 <_read>
 8009920:	1c43      	adds	r3, r0, #1
 8009922:	d102      	bne.n	800992a <_read_r+0x1e>
 8009924:	682b      	ldr	r3, [r5, #0]
 8009926:	b103      	cbz	r3, 800992a <_read_r+0x1e>
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	bd38      	pop	{r3, r4, r5, pc}
 800992c:	2000a398 	.word	0x2000a398

08009930 <strcpy>:
 8009930:	4603      	mov	r3, r0
 8009932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009936:	f803 2b01 	strb.w	r2, [r3], #1
 800993a:	2a00      	cmp	r2, #0
 800993c:	d1f9      	bne.n	8009932 <strcpy+0x2>
 800993e:	4770      	bx	lr

08009940 <__assert_func>:
 8009940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009942:	4614      	mov	r4, r2
 8009944:	461a      	mov	r2, r3
 8009946:	4b09      	ldr	r3, [pc, #36]	; (800996c <__assert_func+0x2c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4605      	mov	r5, r0
 800994c:	68d8      	ldr	r0, [r3, #12]
 800994e:	b14c      	cbz	r4, 8009964 <__assert_func+0x24>
 8009950:	4b07      	ldr	r3, [pc, #28]	; (8009970 <__assert_func+0x30>)
 8009952:	9100      	str	r1, [sp, #0]
 8009954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009958:	4906      	ldr	r1, [pc, #24]	; (8009974 <__assert_func+0x34>)
 800995a:	462b      	mov	r3, r5
 800995c:	f000 f80e 	bl	800997c <fiprintf>
 8009960:	f000 f81e 	bl	80099a0 <abort>
 8009964:	4b04      	ldr	r3, [pc, #16]	; (8009978 <__assert_func+0x38>)
 8009966:	461c      	mov	r4, r3
 8009968:	e7f3      	b.n	8009952 <__assert_func+0x12>
 800996a:	bf00      	nop
 800996c:	20000014 	.word	0x20000014
 8009970:	0800ced5 	.word	0x0800ced5
 8009974:	0800cee2 	.word	0x0800cee2
 8009978:	0800cf10 	.word	0x0800cf10

0800997c <fiprintf>:
 800997c:	b40e      	push	{r1, r2, r3}
 800997e:	b503      	push	{r0, r1, lr}
 8009980:	4601      	mov	r1, r0
 8009982:	ab03      	add	r3, sp, #12
 8009984:	4805      	ldr	r0, [pc, #20]	; (800999c <fiprintf+0x20>)
 8009986:	f853 2b04 	ldr.w	r2, [r3], #4
 800998a:	6800      	ldr	r0, [r0, #0]
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	f7ff fe8d 	bl	80096ac <_vfiprintf_r>
 8009992:	b002      	add	sp, #8
 8009994:	f85d eb04 	ldr.w	lr, [sp], #4
 8009998:	b003      	add	sp, #12
 800999a:	4770      	bx	lr
 800999c:	20000014 	.word	0x20000014

080099a0 <abort>:
 80099a0:	b508      	push	{r3, lr}
 80099a2:	2006      	movs	r0, #6
 80099a4:	f000 f82c 	bl	8009a00 <raise>
 80099a8:	2001      	movs	r0, #1
 80099aa:	f7f7 ff99 	bl	80018e0 <_exit>

080099ae <_raise_r>:
 80099ae:	291f      	cmp	r1, #31
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4604      	mov	r4, r0
 80099b4:	460d      	mov	r5, r1
 80099b6:	d904      	bls.n	80099c2 <_raise_r+0x14>
 80099b8:	2316      	movs	r3, #22
 80099ba:	6003      	str	r3, [r0, #0]
 80099bc:	f04f 30ff 	mov.w	r0, #4294967295
 80099c0:	bd38      	pop	{r3, r4, r5, pc}
 80099c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099c4:	b112      	cbz	r2, 80099cc <_raise_r+0x1e>
 80099c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099ca:	b94b      	cbnz	r3, 80099e0 <_raise_r+0x32>
 80099cc:	4620      	mov	r0, r4
 80099ce:	f000 f831 	bl	8009a34 <_getpid_r>
 80099d2:	462a      	mov	r2, r5
 80099d4:	4601      	mov	r1, r0
 80099d6:	4620      	mov	r0, r4
 80099d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099dc:	f000 b818 	b.w	8009a10 <_kill_r>
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d00a      	beq.n	80099fa <_raise_r+0x4c>
 80099e4:	1c59      	adds	r1, r3, #1
 80099e6:	d103      	bne.n	80099f0 <_raise_r+0x42>
 80099e8:	2316      	movs	r3, #22
 80099ea:	6003      	str	r3, [r0, #0]
 80099ec:	2001      	movs	r0, #1
 80099ee:	e7e7      	b.n	80099c0 <_raise_r+0x12>
 80099f0:	2400      	movs	r4, #0
 80099f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099f6:	4628      	mov	r0, r5
 80099f8:	4798      	blx	r3
 80099fa:	2000      	movs	r0, #0
 80099fc:	e7e0      	b.n	80099c0 <_raise_r+0x12>
	...

08009a00 <raise>:
 8009a00:	4b02      	ldr	r3, [pc, #8]	; (8009a0c <raise+0xc>)
 8009a02:	4601      	mov	r1, r0
 8009a04:	6818      	ldr	r0, [r3, #0]
 8009a06:	f7ff bfd2 	b.w	80099ae <_raise_r>
 8009a0a:	bf00      	nop
 8009a0c:	20000014 	.word	0x20000014

08009a10 <_kill_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d07      	ldr	r5, [pc, #28]	; (8009a30 <_kill_r+0x20>)
 8009a14:	2300      	movs	r3, #0
 8009a16:	4604      	mov	r4, r0
 8009a18:	4608      	mov	r0, r1
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	602b      	str	r3, [r5, #0]
 8009a1e:	f7f7 ff4f 	bl	80018c0 <_kill>
 8009a22:	1c43      	adds	r3, r0, #1
 8009a24:	d102      	bne.n	8009a2c <_kill_r+0x1c>
 8009a26:	682b      	ldr	r3, [r5, #0]
 8009a28:	b103      	cbz	r3, 8009a2c <_kill_r+0x1c>
 8009a2a:	6023      	str	r3, [r4, #0]
 8009a2c:	bd38      	pop	{r3, r4, r5, pc}
 8009a2e:	bf00      	nop
 8009a30:	2000a398 	.word	0x2000a398

08009a34 <_getpid_r>:
 8009a34:	f7f7 bf3c 	b.w	80018b0 <_getpid>

08009a38 <_init>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	bf00      	nop
 8009a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3e:	bc08      	pop	{r3}
 8009a40:	469e      	mov	lr, r3
 8009a42:	4770      	bx	lr

08009a44 <_fini>:
 8009a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a46:	bf00      	nop
 8009a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a4a:	bc08      	pop	{r3}
 8009a4c:	469e      	mov	lr, r3
 8009a4e:	4770      	bx	lr
